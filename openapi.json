{
    "openapi": "3.0.1",
    "info": {
        "title": "Boomi Flow",
        "version": "v1",
        "description": "# Boomi Flow API\r\n\r\nThis API reference provides information on the available endpoints in the Boomi Flow REST API, including parameters and response data format.\r\n\r\nAs Boomi Flow is based on an <a href=\"http://help.boomi.com/csh?context=GUID-b7cbf7a7-bcd0-4d1c-b926-69854df699ec\" target=\"_blank\">API-first architecture</a>, many of the operations performed within Boomi Flow can be accessed through this API. \r\n\r\nBefore you can start using the API, you will need to create a Boomi Flow account.\r\n\r\n## Making a request to the API\r\n\r\nAPI endpoint requests should be appended to the Boomi Flow API Host at:\r\n\r\n- flow.boomi.com\r\n\r\nFor example:\r\n\r\nGET **https://flow.boomi.com/api/draw/1/flow**\r\n\r\n> **NOTE:**  The <a href=\"http://help.boomi.com/csh?context=GUID-95ad682d-ce04-494a-9235-e113a89406bc\" target=\"_blank\">API tool</a> in Boomi Flow allows you to automatically authorize and interact with the API within the Boomi Flow application.\r\n\r\n# Authentication\r\n\r\nThe API supports authorization using an API Key .\r\n\r\nAPI keys are specific to a tenant, meaning that each API key only authenticates you for the tenant selected when generating the API key.\r\n\r\nYou can <a href=\"http://help.boomi.com/csh?context=GUID-7c393c4c-2193-40ee-b0aa-ef148c5b423c\" target=\"_blank\">manage your API keys</a> on the Boomi Flow **User Settings** page.\r\n\r\n## Authentication using an API Key\r\n\r\nTo use an API Key to authenticate requests to the Boomi Flow API:\r\n\r\n 1. <a href=\"http://help.boomi.com/csh?context=GUID-fab6941c-d8a2-433a-a2f2-6782eb873a02\" target=\"_blank\">Generate an API Key</a> in Boomi Flow, or by sending a POST request to the **api/admin/1/users/me/keys** endpoint. \r\n  \r\n 2. Add a **x-boomi-flow-api-key** header to your API requests instead of an Authorization header, to authenticate as yourself. This header should contain only the **apiKey** value of the API Key.\r\n\r\n3. If required, add a **manywhotenant** header referencing the tenant ID value that the API key is associated with.\r\n\r\n\r\n"
    },
    "paths": {
        "/api/admin/1/provisioning": {
            "post": {
                "tags": [
                    "Admin Provisioning"
                ],
                "summary": "Provision a Tenant",
                "description": "This endpoint requests the provisioning of a new tenant, and also creates a new user if one doesn't exist with the given email\r\naddress. If a value is given for the `notification` object, then the provisioning email sent to the user will\r\nbe overridden with the provided message.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRegistrationRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRegistrationRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRegistrationRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRegistrationRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRegistrationRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/2/provisioning": {
            "post": {
                "tags": [
                    "Admin Provisioning"
                ],
                "summary": "Provision a Tenant",
                "description": "This endpoint requests the provisioning of a new tenant, and also creates a new user if one doesn't exist with the given email\r\naddress. If an apiKeyName is provided an API Key will also be created for the new tenant.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRegistrationRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRegistrationRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRegistrationRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRegistrationRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRegistrationRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/1/organization/runtimes": {
            "get": {
                "tags": [
                    "Admin Runtimes"
                ],
                "summary": "List Runtimes",
                "description": "Returns a list of runtimes associated with the current organization.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RuntimeListResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RuntimeListResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin Runtimes"
                ],
                "summary": "Create Runtime",
                "description": "Creates a new runtime inside the current organization.",
                "requestBody": {
                    "description": "Details to use when creating the organization",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/RuntimeCreateRequest"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuntimeCreateRequest"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuntimeCreateRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuntimeCreateRequest"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuntimeCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RuntimeCreateResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RuntimeCreateResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/organization/runtimes/{id}": {
            "get": {
                "tags": [
                    "Admin Runtimes"
                ],
                "summary": "Load Runtime",
                "description": "Loads an associated runtime by ID in the current organization.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the runtime to find",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the runtime to find",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RuntimeResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RuntimeResponse"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Admin Runtimes"
                ],
                "summary": "Update Runtime",
                "description": "Updates a runtime by ID in the current organization.\r\n            \r\nRuntimes can be associated with one or more tenants, and any changes to properties take effect globally,\r\nand are reflected across all associated tenants.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the runtime to update",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the runtime to update",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The fields to update in the runtime",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/RuntimeUpdateRequest"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuntimeUpdateRequest"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuntimeUpdateRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuntimeUpdateRequest"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuntimeUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RuntimeResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RuntimeResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Admin Runtimes"
                ],
                "summary": "Delete Runtime",
                "description": "Deletes a runtime by ID in the current organization.\r\n            \r\nRuntimes can be associated with one or more tenants, and deleting a runtime will take effect globally,\r\nremoving access from all associated tenants.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the runtime to delete",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the runtime to delete",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/1/organization/runtimes/{id}/failures": {
            "get": {
                "tags": [
                    "Admin Runtimes"
                ],
                "summary": "List Runtime Failures",
                "description": "If the Flow cloud encounters an error communicating with a local runtime, details about the failure will be\r\navailable from this endpoint.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the runtime",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the runtime",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of states to return",
                        "schema": {
                            "type": "integer",
                            "description": "The number of states to return",
                            "format": "int32",
                            "default": 50
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page of states",
                        "schema": {
                            "type": "integer",
                            "description": "The current page of states",
                            "format": "int32",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RuntimeFailureItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RuntimeFailureItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/states": {
            "get": {
                "tags": [
                    "Admin States"
                ],
                "summary": "List States",
                "description": "Get a listing of all the flow states in the current tenant.",
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of states to return",
                        "schema": {
                            "type": "integer",
                            "description": "The number of states to return",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page of states",
                        "schema": {
                            "type": "integer",
                            "description": "The current page of states",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The status of the states to filter by",
                        "schema": {
                            "type": "string",
                            "description": "The status of the states to filter by",
                            "nullable": true
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "An ISO 8601 datetime to filter states from",
                        "schema": {
                            "type": "string",
                            "description": "An ISO 8601 datetime to filter states from",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "An ISO 8601 datetime to filter states until",
                        "schema": {
                            "type": "string",
                            "description": "An ISO 8601 datetime to filter states until",
                            "format": "date-time",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Admin States"
                ],
                "summary": "Delete Multiple States",
                "description": "Delete multiple flow states",
                "requestBody": {
                    "description": "An array of IDs of the states to delete",
                    "content": {
                        "null": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "An array of IDs of the states to delete",
                                "nullable": true
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "An array of IDs of the states to delete",
                                "nullable": true
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "An array of IDs of the states to delete",
                                "nullable": true
                            }
                        },
                        "text/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "An array of IDs of the states to delete",
                                "nullable": true
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "description": "An array of IDs of the states to delete",
                                "nullable": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/1/states/{id}": {
            "get": {
                "tags": [
                    "Admin States"
                ],
                "summary": "Load State",
                "description": "Load an individual flow state",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the state to load",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the state to load",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Admin States"
                ],
                "summary": "Delete State",
                "description": "Delete an individual flow state",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the state to delete",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the state to delete",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/1/states/flow": {
            "get": {
                "tags": [
                    "Admin States"
                ],
                "summary": "List States by Flow",
                "description": "Get a listing of all the flow states grouped by flow in the current tenant.",
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of flow states to return",
                        "schema": {
                            "type": "integer",
                            "description": "The number of flow states to return",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page of flow states",
                        "schema": {
                            "type": "integer",
                            "description": "The current page of flow states",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "The column to order the results by",
                        "schema": {
                            "type": "string",
                            "description": "The column to order the results by",
                            "default": "developerName",
                            "nullable": true
                        }
                    },
                    {
                        "name": "orderDirection",
                        "in": "query",
                        "description": "The direction the order will use",
                        "schema": {
                            "type": "string",
                            "description": "The direction the order will use",
                            "default": "ASC",
                            "nullable": true
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The status of the state to filter by",
                        "schema": {
                            "type": "string",
                            "description": "The status of the state to filter by",
                            "nullable": true
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "An ISO 8601 datetime to filter results from",
                        "schema": {
                            "type": "string",
                            "description": "An ISO 8601 datetime to filter results from",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "An ISO 8601 datetime to filter results until",
                        "schema": {
                            "type": "string",
                            "description": "An ISO 8601 datetime to filter results until",
                            "format": "date-time",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateFlowResponseAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateFlowResponseAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/states/flow/{id}": {
            "get": {
                "tags": [
                    "Admin States"
                ],
                "summary": "List States for a Flow",
                "description": "Get a listing of all the flow states for a specific flow in the current tenant.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the flow",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of flow states to return",
                        "schema": {
                            "type": "integer",
                            "description": "The number of flow states to return",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page of flow states",
                        "schema": {
                            "type": "integer",
                            "description": "The current page of flow states",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The status of the state to filter by",
                        "schema": {
                            "type": "string",
                            "description": "The status of the state to filter by",
                            "nullable": true
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "An ISO 8601 datetime to filter results from",
                        "schema": {
                            "type": "string",
                            "description": "An ISO 8601 datetime to filter results from",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "An ISO 8601 datetime to filter results until",
                        "schema": {
                            "type": "string",
                            "description": "An ISO 8601 datetime to filter results until",
                            "format": "date-time",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/states/flow/{id}/{version}": {
            "get": {
                "tags": [
                    "Admin States"
                ],
                "summary": "List States for a Flow Version",
                "description": "Get a listing of all the flow states for a specific flow version in the current tenant.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the flow",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version ID of the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The version ID of the flow",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of flow states to return",
                        "schema": {
                            "type": "integer",
                            "description": "The number of flow states to return",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page of flow states",
                        "schema": {
                            "type": "integer",
                            "description": "The current page of flow states",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The status of the state to filter by",
                        "schema": {
                            "type": "string",
                            "description": "The status of the state to filter by",
                            "nullable": true
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "An ISO 8601 datetime to filter results from",
                        "schema": {
                            "type": "string",
                            "description": "An ISO 8601 datetime to filter results from",
                            "format": "date-time",
                            "nullable": true
                        }
                    }
                }
            }
        },
        "/api/admin/1/tenant": {
            "get": {
                "tags": [
                    "Admin Tenants and Subtenants"
                ],
                "summary": "Load Tenant",
                "description": "Used to get the tenant object for the current tenant. Tenants provide a central place for flow builders to\r\nbuild, manage and deploy flows.",
                "parameters": [
                    {
                        "name": "includeSubTenants",
                        "in": "query",
                        "description": "Whether to include subtenants in the response",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to include subtenants in the response",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin Tenants and Subtenants"
                ],
                "summary": "Update Tenant",
                "description": "Used to update the tenant object for the current tenant. Tenants provide a central place for flow builders\r\nto build, manage and deploy flows.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Admin Tenants and Subtenants"
                ],
                "summary": "Delete Tenant",
                "description": "<aside class=\"alert alert-error\">\r\n            Use this API with extreme caution. Although we do keep backups of tenants, recovering from tenant delete\r\n            operations takes time and is chargeable. A request to delete tenants does require verification via email\r\n            before the actual delete is performed\r\n            </aside>",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/1/tenant/{id}": {
            "get": {
                "tags": [
                    "Admin Tenants and Subtenants"
                ],
                "summary": "Load Tenant",
                "description": "Used to get the tenant object for the current tenant. Tenants provide a central place for flow builders to\r\nbuild, manage and deploy flows.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "includeSubTenants",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/tenant/data": {
            "delete": {
                "tags": [
                    "Admin Tenants and Subtenants"
                ],
                "summary": "Delete Tenant Data",
                "description": "<aside class=\"alert alert-error\">\r\n            Use this API with extreme caution. Although we do keep backups of tenant data, recovering from tenant data\r\n            deletion operations takes time and is chargeable. A request to delete tenant data does require verification\r\n            via email before the actual delete is performed. However, make sure you check your settings carefully as\r\n            dependency validations are ignored. You have been warned!\r\n            </aside>",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/1/tenant/subtenants": {
            "get": {
                "tags": [
                    "Admin Tenants and Subtenants"
                ],
                "summary": "Load Subtenants",
                "description": "Used to list all the subtenants of the current tenant.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TenantResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TenantResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin Tenants and Subtenants"
                ],
                "summary": "Create Subtenant",
                "description": "Used to create a new subtenant underneath the current tenant. The <code>developerName</code> must be unique,\r\nand can only contain letters and numbers, with no spaces.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/SubtenantCreateRequest"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubtenantCreateRequest"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubtenantCreateRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubtenantCreateRequest"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubtenantCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantMinimalAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantMinimalAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/tenant/runtimes": {
            "get": {
                "tags": [
                    "Admin Tenants and Subtenants"
                ],
                "summary": "List the Runtimes for a Tenant",
                "description": "Used to get the list of runtimes for the current tenant.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TenantRuntimeListResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TenantRuntimeListResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/users": {
            "get": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "List Users",
                "description": "Get a listing of all users inside the current tenant.",
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "integer",
                            "description": "",
                            "format": "int32",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "integer",
                            "description": "",
                            "format": "int32",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Add User to Tenant",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/users/{id}": {
            "get": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Load User",
                "description": "Load an individual user from the current tenant.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserAPI"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Update User",
                "description": "Update information for an individual user in the current tenant.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Remove User from Tenant",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/1/users/me": {
            "get": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Load the Current User",
                "description": "Get the currently-authenticated user's information",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserMeAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserMeAPI"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Update the Current User",
                "description": "Update the currently-authenticated user's information",
                "requestBody": {
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/UserMeUpdateRequest"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserMeUpdateRequest"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserMeUpdateRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserMeUpdateRequest"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserMeUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserMeAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserMeAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/users/me/settings": {
            "get": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Load the Current User's Tenant settings",
                "description": "Load the tenant user settings for the currently-authenticated user",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTenantSettingsAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTenantSettingsAPI"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Update the Current User's Tenant settings",
                "description": "Update the tenant user settings for the currently-authenticated user",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/UserTenantSettingsAPI"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTenantSettingsAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTenantSettingsAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/users/me/keys": {
            "get": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Get API Keys",
                "description": "Get the API Keys for the currently-authenticated user",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserTenantAPIKey"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserTenantAPIKey"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Create a new API Key",
                "description": "Add a new API Key for a specific tenant for the currently-authenticated user",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/UserTenantAPIKey"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserTenantAPIKey"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserTenantAPIKey"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserTenantAPIKey"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserTenantAPIKey"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTenantAPIKey"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTenantAPIKey"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/users/me/keys/{name}": {
            "delete": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Delete an API Key",
                "description": "Delete an API Key for a specific tenant for the currently-authenticated user",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/1/users/me/user-settings": {
            "get": {
                "tags": [
                    "Admin Users"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UserSettingsAPI"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin Users"
                ],
                "summary": "Update the Current User's settings",
                "description": "Update the settings for the currently-authenticated user",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/UserSettingsAPI"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UserSettingsAPI"
                        }
                    }
                }
            }
        },
        "/api/admin/1/organization/invites": {
            "get": {
                "tags": [
                    "AdminOrganizationInvite"
                ],
                "summary": "List Organization Invitations",
                "description": "Lists all the invitations that the current user is able to action.",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationInvite"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationInvite"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/organization/invites/tenants": {
            "get": {
                "tags": [
                    "AdminOrganizationInviteTenants"
                ],
                "summary": "List Organization Tenant Invitations",
                "description": "Lists all the invitations that have been sent from the current organization.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationInvite"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationInvite"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AdminOrganizationInviteTenants"
                ],
                "summary": "Invite Tenant to Organization",
                "description": "Creates and sends an invitation for another tenant to join the currently-authenticated organization.",
                "requestBody": {
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationInviteTenantRequest"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationInviteTenantRequest"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationInviteTenantRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationInviteTenantRequest"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationInviteTenantRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/1/organization/invites/tenants/{id}": {
            "put": {
                "tags": [
                    "AdminOrganizationInviteTenants"
                ],
                "summary": "Accept Tenant Invitation",
                "description": "Accepts a pending invitation for a tenant to join an organization.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the organization the invite came from",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the organization the invite came from",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AdminOrganizationInviteTenants"
                ],
                "summary": "Reject Tenant Invitation",
                "description": "Rejects a pending invitation for a tenant to join an organization.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the organization the invite came from",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the organization the invite came from",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/organization/invites/tenants/cancel/{id}": {
            "patch": {
                "tags": [
                    "AdminOrganizationInviteTenants"
                ],
                "summary": "Cancel Tenant Invitation",
                "description": "Cancels a pending invitation for a tenant to join an organization.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the tenant the invite was sent to.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the tenant the invite was sent to.",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/organization/invites/tenants/acknowledge/{id}": {
            "patch": {
                "tags": [
                    "AdminOrganizationInviteTenants"
                ],
                "summary": "Acknowledge Tenant Invitation Rejection",
                "description": "Acknowledges the rejection of an invitation for a tenant to join an organization.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the tenant the invite was sent to.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the tenant the invite was sent to.",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/organization/invites/users": {
            "get": {
                "tags": [
                    "AdminOrganizationInviteUsers"
                ],
                "summary": "List Organization User Invitations",
                "description": "Lists all the invitations that have been sent from the current organization to users.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationInvite"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationInvite"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AdminOrganizationInviteUsers"
                ],
                "summary": "Invite User to Organization",
                "description": "Creates and sends an invitation for a user to join the currently-authenticated organization.",
                "requestBody": {
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationInviteUserRequest"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationInviteUserRequest"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationInviteUserRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationInviteUserRequest"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationInviteUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/1/organization/invites/users/{id}": {
            "put": {
                "tags": [
                    "AdminOrganizationInviteUsers"
                ],
                "summary": "Accept User Invitation",
                "description": "Accepts a pending invitation for a user to join an organization.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the organization the invite came from",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the organization the invite came from",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AdminOrganizationInviteUsers"
                ],
                "summary": "Reject User Invitation",
                "description": "Rejects a pending invitation for a user to join an organization.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the organization the invite came from",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the organization the invite came from",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/organization/invites/users/cancel/{id}": {
            "patch": {
                "tags": [
                    "AdminOrganizationInviteUsers"
                ],
                "summary": "Cancel User Invitation",
                "description": "Cancels a pending invitation for a user to join an organization",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the tenant the invite was sent to.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the tenant the invite was sent to.",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/organization/invites/users/acknowledge/{id}": {
            "patch": {
                "tags": [
                    "AdminOrganizationInviteUsers"
                ],
                "summary": "Cancel User Invitation",
                "description": "Acknowledges the rejection of an invitation for a user to join an organization",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the tenant the invite was sent to.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the tenant the invite was sent to.",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationInvite"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/organization/tenants": {
            "get": {
                "tags": [
                    "AdminOrganizationTenants"
                ],
                "summary": "List Organization Tenants",
                "description": "Lists all the tenants that are a part of this organization.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationTenant"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationTenant"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AdminOrganizationTenants"
                ],
                "summary": "Create Organization Tenant",
                "description": "Create a new tenant inside the current organization",
                "requestBody": {
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationTenantCreationRequest"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationTenantCreationRequest"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationTenantCreationRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationTenantCreationRequest"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationTenantCreationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationTenant"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationTenant"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/organization/tenants/{id}": {
            "delete": {
                "tags": [
                    "AdminOrganizationTenants"
                ],
                "summary": "Remove Tenant from Organization",
                "description": "Removed the specified tenant from the current organization.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the tenant to remove from the organization",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the tenant to remove from the organization",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/admin/1/organization/users": {
            "get": {
                "tags": [
                    "AdminOrganizationUsers"
                ],
                "summary": "List Organization Users",
                "description": "Lists all the users that are a part of this organization.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationUser"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationUser"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/1/organization/users/{id}": {
            "delete": {
                "tags": [
                    "AdminOrganizationUsers"
                ],
                "summary": "Remove User from Organization",
                "description": "Removed the specified users from the current organization.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the user to remove from the organization",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the user to remove from the organization",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/audit/1/search": {
            "get": {
                "tags": [
                    "Audit Audit"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "nullable": true
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            },
                            "nullable": true
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditEventItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditEventItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/dashboard/1/flow/{id}": {
            "get": {
                "tags": [
                    "Dashboard Dashboard"
                ],
                "summary": "List number of launches (States) for a Flow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "interval",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardFlowLaunchesResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardFlowLaunchesResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/assets": {
            "get": {
                "tags": [
                    "Draw Assets"
                ],
                "summary": "List Assets",
                "description": "Get a listing of all the assets in the current tenant",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AssetAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AssetAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Assets"
                ],
                "summary": "Delete Asset",
                "description": "Delete an individual asset (or folder)",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "put": {
                "tags": [
                    "Draw Assets"
                ],
                "summary": "Move Asset",
                "description": "Move an asset from one location to another (can also be used to rename an asset).",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetMoveRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetMoveRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetMoveRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetMoveRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetMoveRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "post": {
                "tags": [
                    "Draw Assets"
                ],
                "summary": "Create Folder",
                "description": "Create an empty \"folder\" in the current tenant's asset storage",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/assets/upload": {
            "post": {
                "tags": [
                    "Draw Assets"
                ],
                "summary": "Generate Upload URL",
                "description": "Generate a signed upload URL, which should be used to submit the asset to (using `PUT`). A `contentType` is\r\nrequired in this request.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/draw/1/authentication/saml/{tenant}": {
            "get": {
                "tags": [
                    "Draw Authentication"
                ],
                "summary": "Initiates the SAML flow by redirecting\r\nto the identity provider configured for the specific tenant",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/authentication/saml": {
            "post": {
                "tags": [
                    "Draw Authentication"
                ],
                "summary": "Handles the SAML response from the identity provider before\r\nredirecting back to the Tooling",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "SAMLResponse": {
                                        "type": "string",
                                        "description": "",
                                        "nullable": true
                                    },
                                    "RelayState": {
                                        "type": "string",
                                        "description": "",
                                        "nullable": true
                                    }
                                }
                            },
                            "encoding": {
                                "SAMLResponse": {
                                    "style": "form"
                                },
                                "RelayState": {
                                    "style": "form"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/css/tenant/{tenantId}/customstyles": {
            "get": {
                "tags": [
                    "Draw Draw"
                ],
                "summary": "Get Custom Styles",
                "parameters": [
                    {
                        "name": "tenantId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/dependents/{id}": {
            "get": {
                "tags": [
                    "Draw Draw"
                ],
                "summary": "List Element Dependents",
                "description": "List the flattened tree of elements that depends on a specific element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the element to list dependents of",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the element to list dependents of",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of dependents to return per page",
                        "schema": {
                            "type": "integer",
                            "description": "The number of dependents to return per page",
                            "format": "int32",
                            "default": 50
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page number of dependents",
                        "schema": {
                            "type": "integer",
                            "description": "The current page number of dependents",
                            "format": "int32",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DependencyAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DependencyAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/dependencies/{id}": {
            "get": {
                "tags": [
                    "Draw Draw"
                ],
                "summary": "List Element Dependencies",
                "description": "List the flattened tree of elements that a specific element depends on, including all registered dependencies of dependencies.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the element to list dependencies of",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the element to list dependencies of",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of dependencies to return per page",
                        "schema": {
                            "type": "integer",
                            "description": "The number of dependencies to return per page",
                            "format": "int32",
                            "default": 50
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page number of dependencies",
                        "schema": {
                            "type": "integer",
                            "description": "The current page number of dependencies",
                            "format": "int32",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DependencyAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DependencyAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/flow": {
            "post": {
                "tags": [
                    "Draw Flow"
                ],
                "summary": "Create/Update Flow",
                "description": "Used to create new flows or update existing ones. The flow object represents an entire flow application.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the <code>id</code> property is included in the request, the platform will update the flow with a\r\nmatching ID. If the <code>updateByName</code> property is set to <code>true</code>, the platform will update\r\nthe flow with the matching <code>developerName</code> property.\r\n</aside>",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/FlowRequestAPI"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Flow"
                ],
                "summary": "List Flows",
                "description": "Used to list and filter existing flows.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of flows where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of flows where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter for querying flows",
                        "schema": {
                            "type": "string",
                            "description": "The filter for querying flows",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FlowResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FlowResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/flow/{id}": {
            "get": {
                "tags": [
                    "Draw Flow"
                ],
                "summary": "Get Flow",
                "description": "Used to get an existing flow by ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the Flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the Flow",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Flow"
                ],
                "summary": "Delete Flow",
                "description": "Used to delete an existing flow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/element/flow/{flow}/{elementType}": {
            "get": {
                "tags": [
                    "Draw Flow"
                ],
                "summary": "List Elements in Flow",
                "description": "Used to list all the elements of a type used in a flow",
                "parameters": [
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "elementType",
                        "in": "path",
                        "description": "The element type to list",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The element type to list",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ElementAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ElementAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/flow/{flow}/{elementType}/{id}": {
            "post": {
                "tags": [
                    "Draw Flow"
                ],
                "summary": "Import Element into Flow",
                "description": "Used to import an existing element into a flow",
                "parameters": [
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "elementType",
                        "in": "path",
                        "description": "The element type to import",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The element type to import",
                            "nullable": true
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the element to import",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the element to import",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Flow"
                ],
                "summary": "Remove Element from Flow",
                "description": "Used to remove an imported element from a flow",
                "parameters": [
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "elementType",
                        "in": "path",
                        "description": "The element type to remove",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The element type to remove",
                            "nullable": true
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the element to remove",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the element to remove",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/graph/flow": {
            "post": {
                "tags": [
                    "Draw Flow Graph"
                ],
                "summary": "Update Flow Graph",
                "description": "Used to update a flow graph.\r\n<aside class=\"alert alert-info\">\r\nThe only properties that can be updated in each element are:\r\n<ul><li>developerName</li><li>developerSummary</li><li>x</li><li>y</li><li>height</li><li>width</li></ul></aside>",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/FlowGraphRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/FlowGraphRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FlowGraphRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FlowGraphRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/FlowGraphRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowGraphResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowGraphResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/graph/flow/{flow}": {
            "get": {
                "tags": [
                    "Draw Flow Graph"
                ],
                "summary": "Get Flow Graph",
                "description": "Used to get an existing flow graph. The flow graph provides the coordinate and basic configuration\r\ninformation of map and group elements.",
                "parameters": [
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowGraphResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowGraphResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/graph/flow/{flow}/elements/load": {
            "post": {
                "tags": [
                    "Draw Flow Graph"
                ],
                "summary": "Get Flow Elements",
                "description": "Used to get map or group elements within the flow graph. The response will contain all information\r\nabout the map and group elements, not just basic configuration information.",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "flow",
                        "description": "The unique identifier for the flow",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The list of map or group element ids to load",
                        "schema": {
                            "$ref": "#/definitions/FlowGraphElementIDRequestAPI"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FlowGraphElementResponseAPI"
                        }
                    }
                }
            }
        },
        "/api/draw/1/graph/flow/{flow}/elements/save": {
            "post": {
                "tags": [
                    "Draw Flow Graph"
                ],
                "summary": "Save Flow Elements",
                "description": "Used to save map or group elements within the flow graph. It is expected that all the information about\r\nthe map and group elements has been given, not just basic configuration information.",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "flow",
                        "description": "The unique identifier for the flow",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The list of map or group elements to save",
                        "schema": {
                            "$ref": "#/definitions/FlowGraphElementRequestAPI"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/flow/activation/{flow}/{version}/{isDefault}/{isActivated}": {
            "post": {
                "tags": [
                    "Draw Flow Snapshot"
                ],
                "summary": "Activate a Flow Snapshot",
                "description": "Used to activate and/or make default a flow snapshot version",
                "parameters": [
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow",
                            "nullable": true
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The unique identifier for the flow version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow version",
                            "nullable": true
                        }
                    },
                    {
                        "name": "isDefault",
                        "in": "path",
                        "description": "If this snapshot should be the default version for running users",
                        "required": true,
                        "schema": {
                            "type": "boolean",
                            "description": "If this snapshot should be the default version for running users"
                        }
                    },
                    {
                        "name": "isActivated",
                        "in": "path",
                        "description": "If this snapshot should be accessible to running users to run",
                        "required": true,
                        "schema": {
                            "type": "boolean",
                            "description": "If this snapshot should be accessible to running users to run"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/flow/revert/{flow}/{version}": {
            "post": {
                "tags": [
                    "Draw Flow Snapshot"
                ],
                "summary": "Revert a Flow Snapshot",
                "description": "Used to take an flow snapshot and apply it to the current flow being modelled. This is equivalent to undoing\r\nchanges to a flow for all flow builders.\r\n            \r\nTo revert a flow snapshot for running users, simply activate and make default the appropriate previous flow\r\nsnapshot version.\r\n            \r\n<aside class=\"alert alert-warning\">\r\nIf the flow being actively edited by other flow builders does not have a flow snapshot, all changes will be\r\nlost. The platform can only recover old flow versions from snapshots.\r\n</aside>",
                "parameters": [
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow",
                            "nullable": true
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The unique identifier for the flow version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow version",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/flow/snap/{flow}": {
            "post": {
                "tags": [
                    "Draw Flow Snapshot"
                ],
                "summary": "Create Flow Snapshot",
                "description": "Used to create a flow snapshot.",
                "parameters": [
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow",
                            "nullable": true
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "type": "string",
                                "description": "",
                                "nullable": true
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "type": "string",
                                "description": "",
                                "nullable": true
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "description": "",
                                "nullable": true
                            }
                        },
                        "text/json": {
                            "schema": {
                                "type": "string",
                                "description": "",
                                "nullable": true
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "type": "string",
                                "description": "",
                                "nullable": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Flow Snapshot"
                ],
                "summary": "List Flow Snapshots",
                "description": "Used to get the list of all snapshots for a particular flow.",
                "parameters": [
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "string",
                            "description": "",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FlowResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FlowResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/flow/snap/{flow}/{version}": {
            "get": {
                "tags": [
                    "Draw Flow Snapshot"
                ],
                "summary": "Get Flow Snapshot",
                "description": "Used to get a single flow snapshot.",
                "parameters": [
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow",
                            "nullable": true
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The unique identifier for the flow version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow version",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowImageResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowImageResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/flow/{flow}/{editingToken}/element/group": {
            "post": {
                "tags": [
                    "Draw Group Element"
                ],
                "summary": "Create/Update Group Element",
                "description": "Used to create new group elements or update existing ones.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the <code>id</code> property is included in the request, the platform will update the element with a\r\nmatching ID. If the <code>updateByName</code> property is set to <code>true</code>, the platform will update\r\nthe element with the matching <code>developerName</code> property.\r\n</aside>",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "Unique identifier for the flow containing the group element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Unique identifier for the flow containing the group element",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupElementRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupElementRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupElementRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupElementRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupElementRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Group Element"
                ],
                "summary": "List Group Elements",
                "description": "Used to list and filter existing group elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow containing the group element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow containing the group element",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GroupElementResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GroupElementResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/flow/{flow}/{editingToken}/element/group/{id}": {
            "get": {
                "tags": [
                    "Draw Group Element"
                ],
                "summary": "Get Group Element",
                "description": "Used to get an existing group element.",
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow containing the group element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow containing the group element",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the group element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the group element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Group Element"
                ],
                "summary": "Delete Group Element",
                "description": "Used to delete an existing group element.",
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow containing the group element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow containing the group element",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the group element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the group element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/element/identityprovider": {
            "post": {
                "tags": [
                    "Draw Identity Provider"
                ],
                "requestBody": {
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentityProviderAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentityProviderAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentityProviderAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentityProviderAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentityProviderAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IdentityProviderAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IdentityProviderAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Identity Provider"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "type": "integer",
                        "format": "int32",
                        "default": 20
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "format": "int32",
                        "default": 1
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "type": "string",
                        "default": "dateModified"
                    },
                    {
                        "in": "query",
                        "name": "orderDirection",
                        "type": "string",
                        "default": "DESC"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderAPIItemCollectionResponse"
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/identityprovider/{id}": {
            "get": {
                "tags": [
                    "Draw Identity Provider"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IdentityProviderAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IdentityProviderAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Identity Provider"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/identityprovider/1/{tenantId}/{id}/saml/metadata": {
            "get": {
                "tags": [
                    "Draw Identity Provider"
                ],
                "parameters": [
                    {
                        "name": "tenantId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/identityprovider/1/{tenantId}/{id}/saml/metadata": {
            "get": {
                "tags": [
                    "Draw Identity Provider"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/element/macro": {
            "post": {
                "tags": [
                    "Draw Macro Element"
                ],
                "summary": "Create/Update Macro Elements",
                "description": "Used to create new macro elements or update existing ones.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the <code>id</code> property is included in the request, the platform will update the element with a\r\nmatching ID. If the <code>updateByName</code> property is set to <code>true</code>, the platform will update\r\nthe element with the matching <code>developerName</code> property.\r\n</aside>",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/MacroElementRequestAPI"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MacroElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MacroElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Macro Element"
                ],
                "summary": "List Macro Elements",
                "description": "Used to list and filter existing macro elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MacroElementResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MacroElementResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/macro/{id}": {
            "get": {
                "tags": [
                    "Draw Macro Element"
                ],
                "summary": "Get Macro Element",
                "description": "Used to get an existing macro element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the macro element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the macro element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MacroElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MacroElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Macro Element"
                ],
                "summary": "Delete Macro Element",
                "description": "Used to delete an existing macro element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the macro element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the macro element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/flow/{flow}/{editingToken}/element/map": {
            "post": {
                "tags": [
                    "Draw Map Element"
                ],
                "summary": "Create/Update Map Elements",
                "description": "Used to create new map elements or update existing ones.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the <code>id</code> property is included in the request, the platform will update the element with a\r\nmatching ID. If the <code>updateByName</code> property is set to <code>true</code>, the platform will update\r\nthe element with the matching <code>developerName</code> property.\r\n</aside>",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow containing the map element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow containing the map element",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/MapElementRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapElementRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapElementRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapElementRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapElementRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MapElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MapElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Map Element"
                ],
                "summary": "List Map Elements",
                "description": "Used to filter existing map elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow containing the map elements",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow containing the map elements",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MapElementResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MapElementResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/flow/{flow}/{editingToken}/element/map/{id}": {
            "get": {
                "tags": [
                    "Draw Map Element"
                ],
                "summary": "Get Map Element",
                "description": "Used to get an existing map element.",
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow containing the map element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow containing the map element",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the map element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the map element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MapElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MapElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Map Element"
                ],
                "summary": "Delete Map Element",
                "description": "Used to delete an existing map element.",
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow containing the map element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow containing the map element",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the map element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the map element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/flow/{flow}/{editingToken}/element/navigation": {
            "post": {
                "tags": [
                    "Draw Navigation Element"
                ],
                "summary": "Create/Update Navigation Elements",
                "description": "Used to create new navigation elements or update existing ones.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the <code>id</code> property is included in the request, the platform will update the element with a\r\nmatching ID. If the <code>updateByName</code> property is set to <code>true</code>, the platform will update\r\nthe element with the matching <code>developerName</code> property.\r\n</aside>",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow containing the navigation element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow containing the navigation element",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/NavigationElementRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/NavigationElementRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NavigationElementRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NavigationElementRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/NavigationElementRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NavigationElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NavigationElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Navigation Element"
                ],
                "summary": "List Navigation Elements",
                "description": "Used to filter existing navigation elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow containing the navigation elements",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow containing the navigation elements",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/NavigationElementResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/NavigationElementResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/flow/{flow}/{editingToken}/element/navigation/{id}": {
            "get": {
                "tags": [
                    "Draw Navigation Element"
                ],
                "summary": "Get Navigation Element",
                "description": "Used to get an existing navigation element.",
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow containing the navigation element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow containing the navigation element",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the navigation element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the navigation element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NavigationElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NavigationElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Navigation Element"
                ],
                "summary": "Delete Navigation Element",
                "description": "Used to delete an existing navigation element.",
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "description": "The active editing token for the flow being edited",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The active editing token for the flow being edited",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "The unique identifier for the flow containing the navigation element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the flow containing the navigation element",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the navigation element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the navigation element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/element/page": {
            "post": {
                "tags": [
                    "Draw Page Element"
                ],
                "summary": "Create/Update Page Elements",
                "description": "Used to create new page elements or update existing ones.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the <code>id</code> property is included in the request, the platform will update the element with a\r\nmatching ID. If the <code>updateByName</code> property is set to <code>true</code>, the platform will update\r\nthe element with the matching <code>developerName</code> property.\r\n</aside>",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/PageElementRequestAPI"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Page Element"
                ],
                "summary": "List Page Elements",
                "description": "Used to list and filter existing page elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PageElementResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PageElementResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/page/{id}": {
            "get": {
                "tags": [
                    "Draw Page Element"
                ],
                "summary": "Get Page Element",
                "description": "Used to get an existing page element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the page element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the page element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Page Element"
                ],
                "summary": "Delete Page Element",
                "description": "Used to delete an existing page element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the page element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the page element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/element/service/describe": {
            "post": {
                "tags": [
                    "Draw Service Element"
                ],
                "summary": "Describe Service Element",
                "description": "Used to obtain a describe response for a service element.",
                "requestBody": {
                    "description": "The details required to describe the service element",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/DescribeServiceRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/DescribeServiceRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DescribeServiceRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DescribeServiceRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/DescribeServiceRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DescribeServiceResponseBaseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DescribeServiceResponseBaseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/service/install": {
            "post": {
                "tags": [
                    "Draw Service Element"
                ],
                "summary": "Install Service Element",
                "description": "Used to obtain an install response for a service element.",
                "requestBody": {
                    "description": "The details required to install the service element",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/DescribeServiceRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/DescribeServiceRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DescribeServiceRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DescribeServiceRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/DescribeServiceRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DescribeInstallResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DescribeInstallResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/service": {
            "post": {
                "tags": [
                    "Draw Service Element"
                ],
                "summary": "Create/Update Service Elements",
                "description": "Used to create new service elements or update existing ones.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the <code>id</code> property is included in the request, the platform will update the element with a\r\nmatching ID. If the <code>updateByName</code> property is set to <code>true</code>, the platform will update\r\nthe element with the matching <code>developerName</code> property.\r\n</aside>",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ServiceElementRequestAPI"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Service Element"
                ],
                "summary": "List Service Elements",
                "description": "Used to list and filter existing service elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceElementResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceElementResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/service/{id}": {
            "get": {
                "tags": [
                    "Draw Service Element"
                ],
                "summary": "Get Service Element",
                "description": "Used to get an existing service element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the service element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the service element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Service Element"
                ],
                "summary": "Delete Service Element",
                "description": "Used to delete an existing service element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the service element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the service element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/2/element/service": {
            "get": {
                "tags": [
                    "Draw Service Element"
                ],
                "summary": "List Service Elements v2",
                "description": "Used to list and filter existing Service elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "description": "The filter used for querying",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "Optional. The current page of Services",
                        "type": "integer",
                        "format": "int32",
                        "default": 1
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Optional. Restrict the number of returned results. Zero is no limit. 20 is the default",
                        "type": "integer",
                        "format": "int32",
                        "default": 20
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Optional. Specify which field to order results by. Default is dateModified",
                        "type": "string",
                        "default": "dateModified"
                    },
                    {
                        "in": "query",
                        "name": "orderDirection",
                        "description": "Optional. Specify which direction results should be ordered by. Can either be ASC or DESC. Default is DESC.",
                        "type": "string",
                        "default": "DESC"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ServiceElementResponseAPIItemCollectionResponse"
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/tag": {
            "post": {
                "tags": [
                    "Draw Tag Element"
                ],
                "summary": "Create/Update Tag Elements",
                "description": "Used to create new tag elements or update existing ones.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the <code>id</code> property is included in the request, the platform will update the element with a\r\nmatching ID. If the <code>updateByName</code> property is set to <code>true</code>, the platform will update\r\nthe element with the matching <code>developerName</code> property.\r\n</aside>",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/TagElementRequestAPI"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Tag Element"
                ],
                "summary": "List Tag Elements",
                "description": "Used to list and filter existing tag elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TagElementResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TagElementResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/tag/{id}": {
            "get": {
                "tags": [
                    "Draw Tag Element"
                ],
                "summary": "Get Tag Element",
                "description": "Used to get an existing tag element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the tag element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the tag element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Tag Element"
                ],
                "summary": "Delete Tag Element",
                "description": "Used to delete an existing tag element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the tag element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the tag element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/1/element/type": {
            "post": {
                "tags": [
                    "Draw Type Element"
                ],
                "summary": "Create/Update Type Elements",
                "description": "Used to create new type elements or update existing ones.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the <code>id</code> property is included in the request, the platform will update the element with a\r\nmatching ID. If the <code>updateByName</code> property is set to <code>true</code>, the platform will update\r\nthe element with the matching <code>developerName</code> property.\r\n</aside>",
                "parameters": [
                    {
                        "name": "overrideService",
                        "in": "query",
                        "description": "Whether to allow updates to a type that is associated with a service",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to allow updates to a type that is associated with a service",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/TypeElementRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TypeElementRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TypeElementRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TypeElementRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TypeElementRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Type Element"
                ],
                "summary": "List Type Elements",
                "description": "Used to list and filter existing type elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Optional. Restrict the number of returned results. Zero is no limit",
                        "schema": {
                            "type": "integer",
                            "description": "Optional. Restrict the number of returned results. Zero is no limit",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Optional. Specify which row to start. Zero is the first row",
                        "schema": {
                            "type": "integer",
                            "description": "Optional. Specify which row to start. Zero is the first row",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TypeElementResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TypeElementResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/type/{id}": {
            "get": {
                "tags": [
                    "Draw Type Element"
                ],
                "summary": "Get Type Element",
                "description": "Used to get an existing type element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the type element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the type element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Type Element"
                ],
                "summary": "Delete Type Element",
                "description": "Used to delete an existing type element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the type element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the type element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/2/element/type": {
            "get": {
                "tags": [
                    "Draw Type Element"
                ],
                "summary": "List Type Elements",
                "description": "Used to list and filter existing type elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "name": "id",
                        "description": "",
                        "type": "array",
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Optional. Restrict the number of returned results. Zero is no limit",
                        "schema": {
                            "type": "integer",
                            "description": "Optional. Restrict the number of returned results. Zero is no limit",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Optional. The current page of types",
                        "schema": {
                            "type": "integer",
                            "description": "Optional. The current page of types",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Optional. Specify which field to order results by. Default is dateModified",
                        "schema": {
                            "type": "string",
                            "description": "Optional. Specify which field to order results by. Default is dateModified",
                            "default": "dateModified",
                            "nullable": true
                        }
                    },
                    {
                        "name": "orderDirection",
                        "in": "query",
                        "description": "Optional. Specify which direction results should be ordered by. Can either be ASC or DESC. Default is DESC.",
                        "schema": {
                            "type": "string",
                            "description": "Optional. Specify which direction results should be ordered by. Can either be ASC or DESC. Default is DESC.",
                            "default": "DESC",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeElementResponseAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeElementResponseAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/value": {
            "post": {
                "tags": [
                    "Draw Value Element"
                ],
                "summary": "Create/Update Value Elements",
                "description": "Used to create new value elements or update existing ones.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the <code>id</code> property is included in the request, the platform will update the element with a\r\nmatching ID. If the <code>updateByName</code> property is set to <code>true</code>, the platform will update\r\nthe element with the matching <code>developerName</code> property.\r\n</aside>",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/ValueElementRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValueElementRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValueElementRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValueElementRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValueElementRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Draw Value Element"
                ],
                "summary": "List Value Elements",
                "description": "Used to list and filter existing value elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    },
                    {
                        "name": "contentType",
                        "in": "query",
                        "description": "Optional. One or more content types to filter by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Optional. One or more content types to filter by",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ValueElementResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ValueElementResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/value/{id}": {
            "get": {
                "tags": [
                    "Draw Value Element"
                ],
                "summary": "Get Value Element",
                "description": "Used to get an existing value element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the value element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the value element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueElementResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueElementResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Draw Value Element"
                ],
                "summary": "Delete Value Element",
                "description": "Used to delete an existing value element.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the value element",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the value element",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/draw/2/element/value": {
            "get": {
                "tags": [
                    "Draw Value Element"
                ],
                "summary": "List Value Elements",
                "description": "Used to list and filter existing value elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    },
                    {
                        "name": "contentType",
                        "in": "query",
                        "description": "Optional. One or more content types to filter by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Optional. One or more content types to filter by",
                            "nullable": true
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Optional. Restrict the number of returned results. Zero is no limit",
                        "schema": {
                            "type": "integer",
                            "description": "Optional. Restrict the number of returned results. Zero is no limit",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Optional. The current page of types",
                        "schema": {
                            "type": "integer",
                            "description": "Optional. The current page of types",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Optional. Specify which field to order results by. Default is dateModified",
                        "schema": {
                            "type": "string",
                            "description": "Optional. Specify which field to order results by. Default is dateModified",
                            "default": "dateModified",
                            "nullable": true
                        }
                    },
                    {
                        "name": "orderDirection",
                        "in": "query",
                        "description": "Optional. Specify which direction results should be ordered by. Can either be ASC or DESC. Default is DESC.",
                        "schema": {
                            "type": "string",
                            "description": "Optional. Specify which direction results should be ordered by. Can either be ASC or DESC. Default is DESC.",
                            "default": "DESC",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueElementResponseAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueElementResponseAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/1/element/value/reference": {
            "get": {
                "tags": [
                    "Draw Value Element"
                ],
                "summary": "List Value Element References",
                "description": "Used to list and filter value element references, which are in a condensed format to help flow builders\r\ncreate merge fields in content.\r\n            \r\n### Supported Element Types\r\n            \r\n<code>VARIABLE</code>: A reusable value containing data of the specified content type\r\n<code>LITERAL</code>: A simple, often single use value type containing a text or numeric value\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "parameters": [
                    {
                        "name": "contentType",
                        "in": "query",
                        "description": "Optional. One or more content types to filter by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Optional. One or more content types to filter by",
                            "nullable": true
                        }
                    },
                    {
                        "name": "elementType",
                        "in": "query",
                        "description": "Optional. One or more element types to filter by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Optional. One or more element types to filter by",
                            "nullable": true
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Optional. The ID of a value to filter by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            },
                            "description": "Optional. The ID of a value to filter by",
                            "nullable": true
                        }
                    },
                    {
                        "name": "typeElementId",
                        "in": "query",
                        "description": "Optional. The ID of a type to filter by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            },
                            "description": "Optional. The ID of a type to filter by",
                            "nullable": true
                        }
                    },
                    {
                        "name": "access",
                        "in": "query",
                        "description": "Optional. The access type to filter by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Optional. The access type to filter by",
                            "nullable": true
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    },
                    {
                        "name": "isFixed",
                        "in": "query",
                        "description": "Optional. Whether to filter by fixed values",
                        "schema": {
                            "type": "boolean",
                            "description": "Optional. Whether to filter by fixed values",
                            "default": false
                        }
                    },
                    {
                        "name": "includeSystemValues",
                        "in": "query",
                        "description": "Optional. Whether to include system values",
                        "schema": {
                            "type": "boolean",
                            "description": "Optional. Whether to include system values",
                            "default": true
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Optional. A search term to filter the results by",
                        "schema": {
                            "type": "string",
                            "description": "Optional. A search term to filter the results by",
                            "nullable": true
                        }
                    },
                    {
                        "name": "flow",
                        "in": "query",
                        "description": "Optional. The ID of a flow to filter by",
                        "schema": {
                            "type": "string",
                            "description": "Optional. The ID of a flow to filter by",
                            "format": "uuid",
                            "nullable": true
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Optional. Restrict the number of returned results. Zero is no limit",
                        "schema": {
                            "type": "integer",
                            "description": "Optional. Restrict the number of returned results. Zero is no limit",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Optional. Specify which row to start. Zero is the first row",
                        "schema": {
                            "type": "integer",
                            "description": "Optional. Specify which row to start. Zero is the first row",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ValueElementIdReferenceAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ValueElementIdReferenceAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/draw/2/element/page": {
            "get": {
                "tags": [
                    "DrawElementPage2"
                ],
                "summary": "List Page Elements",
                "description": "Used to list and filter existing page elements.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of elements where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of elements where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page of flow states",
                        "schema": {
                            "type": "integer",
                            "description": "The current page of flow states",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of flow states to return",
                        "schema": {
                            "type": "integer",
                            "description": "The number of flow states to return",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "The column to order the results by",
                        "schema": {
                            "type": "string",
                            "description": "The column to order the results by",
                            "default": "dateModified",
                            "nullable": true
                        }
                    },
                    {
                        "name": "orderDirection",
                        "in": "query",
                        "description": "The direction the order will use",
                        "schema": {
                            "type": "string",
                            "description": "The direction the order will use",
                            "default": "DESC",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageElementResponseAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageElementResponseAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/environment/1": {
            "post": {
                "tags": [
                    "Environment Environment"
                ],
                "summary": "Saves an environment",
                "description": "Edits an existing environment",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/EnvironmentAPI"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EnvironmentAPI"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Environment Environment"
                ],
                "summary": "Get environments",
                "description": "Gets all environments for the tenant the user is logged into",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EnvironmentAPI"
                            }
                        }
                    }
                }
            }
        },
        "/api/environment/1/{id}": {
            "get": {
                "tags": [
                    "Environment Environment"
                ],
                "summary": "Get environment",
                "description": "Gets an environment by Id",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EnvironmentAPI"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Environment Environment"
                ],
                "summary": "Delete an environment",
                "description": "Deletes an environment with the given Id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/features/1/global": {
            "get": {
                "tags": [
                    "Features Features"
                ],
                "summary": "Lists Feature Flags",
                "description": "Retrieves a list of all the feature flags that are applied globally across all tenants.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FeatureFlagAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FeatureFlagAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/features/1/tenant": {
            "get": {
                "tags": [
                    "Features Features"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FeatureFlagAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FeatureFlagAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Features Features"
                ],
                "summary": "Updates Feature Flag Tenant",
                "description": "Update feature flags for a specific tenant. The selected feature flag is only enabled for the specified tenant.",
                "requestBody": {
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantFeatureUpdateRequest"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantFeatureUpdateRequest"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantFeatureUpdateRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantFeatureUpdateRequest"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantFeatureUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/notifications/1": {
            "get": {
                "tags": [
                    "Notifications Notifications"
                ],
                "summary": "List Notifications",
                "description": "Get all the notifications that have been sent from inside a tenant",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter by type, currently supports: delete_all, delete_tenant, fault, password_reset, tenant_creation, warning",
                        "schema": {
                            "type": "string",
                            "description": "Filter by type, currently supports: delete_all, delete_tenant, fault, password_reset, tenant_creation, warning",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/NotificationAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/NotificationAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/notifications/1/me": {
            "get": {
                "tags": [
                    "Notifications Notifications"
                ],
                "summary": "List Notifications for User",
                "description": "Get all the unread notifications that have been sent to the currently logged in user, across all tenants",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter by type, currently supports: delete_all, delete_tenant, fault, password_reset, tenant_creation, warning",
                        "schema": {
                            "type": "string",
                            "description": "Filter by type, currently supports: delete_all, delete_tenant, fault, password_reset, tenant_creation, warning",
                            "nullable": true
                        }
                    },
                    {
                        "name": "includeRead",
                        "in": "query",
                        "description": "Also include read eamil.",
                        "schema": {
                            "type": "boolean",
                            "description": "Also include read eamil.",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/NotificationAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/NotificationAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/notifications/1/{id}": {
            "get": {
                "tags": [
                    "Notifications Notifications"
                ],
                "summary": "Finds a notification for the current user",
                "description": "Finds the notification and marks it as read",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/notifications/1/me/read": {
            "post": {
                "tags": [
                    "Notifications Notifications"
                ],
                "summary": "Mark all notifications as read for the current user",
                "description": "Marks all the notifications for the current user as read",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/package/1/flow/{id}": {
            "get": {
                "tags": [
                    "Package Package"
                ],
                "summary": "Create Package for Flow",
                "description": "Create a package of the latest version of a flow snapshot",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the flow",
                            "nullable": true
                        }
                    },
                    {
                        "name": "nullPasswords",
                        "in": "query",
                        "description": "Whether the package should include password values.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether the package should include password values.",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/package/1/tenant": {
            "get": {
                "tags": [
                    "Package Package"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "nullPasswords",
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Package Package"
                ],
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/package/1/flow/{id}/{version}": {
            "get": {
                "tags": [
                    "Package Package"
                ],
                "summary": "Create Package for Flow Version",
                "description": "Get the package of a specific version of a Flow Snapshot",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the flow",
                            "nullable": true
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the flow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The version of the flow",
                            "nullable": true
                        }
                    },
                    {
                        "name": "nullPasswords",
                        "in": "query",
                        "description": "Whether the package should include password values.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether the package should include password values.",
                            "default": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/package/1/flow": {
            "post": {
                "tags": [
                    "Package Package"
                ],
                "summary": "Import Package",
                "description": "This allows you to import a flow package into a Tenant. It’s important to note that this is not the same as\r\ncloning a flow. If you import a flow package into a tenant that contains a flow with the same flow ID, the\r\nflow in the target tenant will be overwritten with the flow package being imported.",
                "parameters": [
                    {
                        "name": "isSnapshot",
                        "in": "query",
                        "description": "Optional. Whether the package should be imported directly as a snapshot, and not modelling data",
                        "schema": {
                            "type": "boolean",
                            "description": "Optional. Whether the package should be imported directly as a snapshot, and not modelling data",
                            "default": false
                        }
                    },
                    {
                        "name": "isActive",
                        "in": "query",
                        "description": "Optional. Whether the package should be imported as an active snapshot (<code>isSnapshot</code> must be true to take effect)",
                        "schema": {
                            "type": "boolean",
                            "description": "Optional. Whether the package should be imported as an active snapshot (<code>isSnapshot</code> must be true to take effect)",
                            "default": false
                        }
                    },
                    {
                        "name": "isDefault",
                        "in": "query",
                        "description": "Optional. Whether the package should be immediately made the default version (<code>isSnapshot</code> must be true to take effect)",
                        "schema": {
                            "type": "boolean",
                            "description": "Optional. Whether the package should be immediately made the default version (<code>isSnapshot</code> must be true to take effect)",
                            "default": false
                        }
                    },
                    {
                        "name": "uriMapping",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UriMapping"
                            },
                            "nullable": true
                        }
                    },
                    {
                        "name": "overwriteExisting",
                        "in": "query",
                        "description": "Whether to overwrite any elements that already exist in the tenant with the\r\n            versions included in the package. Enabled by default.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to overwrite any elements that already exist in the tenant with the\r\n            versions included in the package. Enabled by default.",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "description": "The package content",
                    "content": {
                        "null": {
                            "schema": {
                                "type": "string",
                                "description": "The package content",
                                "nullable": true
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "type": "string",
                                "description": "The package content",
                                "nullable": true
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "description": "The package content",
                                "nullable": true
                            }
                        },
                        "text/json": {
                            "schema": {
                                "type": "string",
                                "description": "The package content",
                                "nullable": true
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "type": "string",
                                "description": "The package content",
                                "nullable": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The package was successfully imported",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "The package wasn't imported, as there are conflicting elements in the tenant",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PackageConflictResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PackageConflictResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/package/1/shared/flow": {
            "post": {
                "tags": [
                    "Package Package"
                ],
                "summary": "Import Package with Flow Sharing Token",
                "description": "Import a flow via a unique sharing token",
                "parameters": [
                    {
                        "name": "isSnapshot",
                        "in": "query",
                        "description": "Optional. Whether the package should be imported directly as a snapshot, and not modelling data",
                        "schema": {
                            "type": "boolean",
                            "description": "Optional. Whether the package should be imported directly as a snapshot, and not modelling data",
                            "default": false
                        }
                    },
                    {
                        "name": "isActive",
                        "in": "query",
                        "description": "Optional. Whether the package should be imported as an active snapshot (<code>isSnapshot</code> must be true to take effect)",
                        "schema": {
                            "type": "boolean",
                            "description": "Optional. Whether the package should be imported as an active snapshot (<code>isSnapshot</code> must be true to take effect)",
                            "default": false
                        }
                    },
                    {
                        "name": "isDefault",
                        "in": "query",
                        "description": "Optional. Whether the package should be immediately made the default version (<code>isSnapshot</code> must be true to take effect)",
                        "schema": {
                            "type": "boolean",
                            "description": "Optional. Whether the package should be immediately made the default version (<code>isSnapshot</code> must be true to take effect)",
                            "default": false
                        }
                    },
                    {
                        "name": "overwriteExisting",
                        "in": "query",
                        "description": "Whether to overwrite any elements that already exist in the tenant with the\r\n            versions included in the package. Enabled by default.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to overwrite any elements that already exist in the tenant with the\r\n            versions included in the package. Enabled by default.",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedPackageRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedPackageRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedPackageRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedPackageRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedPackageRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The package was successfully imported",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponseAPI"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "The package wasn't imported, as there are conflicting elements in the tenant",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PackageConflictResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PackageConflictResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/package/1/flow/{flow}/share": {
            "post": {
                "tags": [
                    "Package Package"
                ],
                "summary": "Get Flow Sharing Token",
                "description": "Get the sharing token for the last published version of a flow",
                "parameters": [
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "nullPasswords",
                        "in": "query",
                        "description": "Whether the shared package should include password values.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether the shared package should include password values."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharedPackageResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharedPackageResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/package/1/flow/{flow}/{version}/share": {
            "post": {
                "tags": [
                    "Package Package"
                ],
                "summary": "Get Flow Version Sharing Token",
                "description": "Get the sharing token for a specific version of a flow",
                "parameters": [
                    {
                        "name": "flow",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "nullPasswords",
                        "in": "query",
                        "description": "Whether the shared package should include password values.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether the shared package should include password values."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharedPackageResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharedPackageResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{tenantId}/play/{name}": {
            "delete": {
                "tags": [
                    "Play Play"
                ],
                "summary": "Delete Player",
                "description": "Delete a player by name",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "tenantId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/{tenantId}/play/{playerName}": {
            "post": {
                "tags": [
                    "Play Play"
                ],
                "summary": "Update Player",
                "description": "The player content should be sent as <code>application/x-www-form-urlencoded; charset=UTF8</code> request\r\nwith the body of the request set to <code>=player content goes here</code>",
                "parameters": [
                    {
                        "name": "tenantId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "playerName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "player": {
                                        "type": "string",
                                        "nullable": true
                                    }
                                }
                            },
                            "encoding": {
                                "player": {
                                    "style": "form"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "get": {
                "tags": [
                    "Play Play"
                ],
                "summary": "Get Player",
                "description": "Get the contents of a player by name",
                "operationId": "GetPlayerForTenant",
                "parameters": [
                    {
                        "name": "playerName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "tenantId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/{tenantId}/player": {
            "get": {
                "tags": [
                    "Play Play"
                ],
                "summary": "Get Players",
                "description": "Get the names of all the players available in this tenant",
                "operationId": "GetPlayers1",
                "parameters": [
                    {
                        "name": "tenantId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{tenantId}/play": {
            "get": {
                "tags": [
                    "Play Play"
                ],
                "summary": "Get Players",
                "description": "Get the names of all the players available in this tenant",
                "operationId": "GetPlayers2",
                "parameters": [
                    {
                        "name": "tenantId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/release/1": {
            "post": {
                "tags": [
                    "Release Release"
                ],
                "summary": "Saves a release",
                "description": "Saves a new or edits an existing release",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/ReleaseAPI"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ReleaseAPI"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Release Release"
                ],
                "summary": "Get releases",
                "description": "Gets all releases for the tenant the user is logged into",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReleaseAPI"
                            }
                        }
                    }
                }
            }
        },
        "/api/release/1/{id}": {
            "get": {
                "tags": [
                    "Release Release"
                ],
                "summary": "Get release",
                "description": "Gets a release by Id",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ReleaseAPI"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Release Release"
                ],
                "summary": "Delete a release",
                "description": "Deletes a release with the given Id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/release/1/{id}/flow/{flowId}/version/{versionId}": {
            "put": {
                "tags": [
                    "Release Release"
                ],
                "summary": "Add flow",
                "description": "Adds a flow to a release",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "path",
                        "name": "flowId",
                        "description": "",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "path",
                        "name": "versionId",
                        "description": "",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/release/1/{id}/flow/{flowId}": {
            "delete": {
                "tags": [
                    "Release Release"
                ],
                "summary": "Delete release flow",
                "description": "Removes the flow from the release",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "path",
                        "name": "flowId",
                        "description": "",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/1/service/data": {
            "post": {
                "tags": [
                    "Run Data"
                ],
                "summary": "Load Data from Service",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectDataRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectDataRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectDataRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectDataRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectDataRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectDataResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectDataResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/service/file": {
            "post": {
                "tags": [
                    "Run Files"
                ],
                "summary": "Load Files from Service",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/FileDataRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileDataRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileDataRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileDataRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileDataRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectDataResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectDataResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/service/file/content": {
            "post": {
                "tags": [
                    "Run Files"
                ],
                "summary": "Upload File to Service",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectDataResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectDataResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/service/file/delete": {
            "post": {
                "tags": [
                    "Run Files"
                ],
                "summary": "Delete File from Service",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/FileDataRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileDataRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileDataRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileDataRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileDataRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectDataResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectDataResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/flow/name/{name}": {
            "get": {
                "tags": [
                    "Run Flow"
                ],
                "summary": "Load Flow by Name",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the flow to load",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The name of the flow to load",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/flow/{id}": {
            "get": {
                "tags": [
                    "Run Flow"
                ],
                "summary": "Load Flow by ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the flow to load",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The ID of the flow to load",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/flow": {
            "get": {
                "tags": [
                    "Run Flow"
                ],
                "summary": "List Flows",
                "description": "Used to list and filter existing snapshotted flows.\r\n\r\n### Filter\r\n\r\nThe filter can take the following formats:\r\n\r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of flows where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of flows where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FlowResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FlowResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state/{stateId}/log": {
            "get": {
                "tags": [
                    "Run Log"
                ],
                "summary": "Get Log",
                "description": "Get the execution log of a state",
                "parameters": [
                    {
                        "name": "flowId",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "stateId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LogAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LogAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/oauth": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Authenticate (OAuth 1.0a)",
                "description": "Used to authenticate with OAuth 1.0a.\r\n            \r\n<aside class=\"alert alert-info\">\r\nThe OAuth 1.0a API returns a callback URI.\r\n</aside>",
                "parameters": [
                    {
                        "name": "oauth_token",
                        "in": "query",
                        "description": "The OAuth authentication token to authenticate with.",
                        "schema": {
                            "type": "string",
                            "description": "The OAuth authentication token to authenticate with.",
                            "nullable": true
                        }
                    },
                    {
                        "name": "oauth_verifier",
                        "in": "query",
                        "description": "The OAuth authentication verifier to authenticate with.",
                        "schema": {
                            "type": "string",
                            "description": "The OAuth authentication verifier to authenticate with.",
                            "nullable": true
                        }
                    },
                    {
                        "name": "oauth_error",
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "string",
                            "description": "",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/1/oauth2": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Authenticate (OAuth 2.0)",
                "description": "Used to authenticate with OAuth 2.0.\r\n            \r\n<aside class=\"alert alert-info\">\r\nThe OAuth 2.0 API redirects the user back to the application with a successful authentication.\r\n</aside>",
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "description": "The OAuth authentication code the authenticate with.",
                        "schema": {
                            "type": "string",
                            "description": "The OAuth authentication code the authenticate with.",
                            "nullable": true
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "The OAuth authentication state the authenticate with.",
                        "schema": {
                            "type": "string",
                            "description": "The OAuth authentication state the authenticate with.",
                            "nullable": true
                        }
                    },
                    {
                        "name": "error",
                        "in": "query",
                        "description": "Provide an error code to throw an error with that code.",
                        "schema": {
                            "type": "string",
                            "description": "Provide an error code to throw an error with that code.",
                            "nullable": true
                        }
                    },
                    {
                        "name": "error_description",
                        "in": "query",
                        "description": "The error description to throw with the error code.",
                        "schema": {
                            "type": "string",
                            "description": "The error description to throw with the error code.",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/1/saml": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Authenticate (SAML)",
                "description": "Used to authenticate with SAML",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "SAMLResponse": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "RelayState": {
                                        "type": "string",
                                        "nullable": true
                                    }
                                }
                            },
                            "encoding": {
                                "SAMLResponse": {
                                    "style": "form"
                                },
                                "RelayState": {
                                    "style": "form"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/2/saml": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "SAMLResponse": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "RelayState": {
                                        "type": "string",
                                        "nullable": true
                                    }
                                }
                            },
                            "encoding": {
                                "SAMLResponse": {
                                    "style": "form"
                                },
                                "RelayState": {
                                    "style": "form"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/1/oidc": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/2/oauth2": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/1/oidc": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "state",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/2/oauth2": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "state",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/1/authentication/{stateId}": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Get Authentication Context",
                "description": "When you initialize a Flow, you are provided with the authentication context in the response.\r\n            \r\nHowever, you can also retrieve and login to Services individually.\r\n            \r\nIt’s important to note that despite authentication being done against a Flow state, the returned Runtime Authentication Token is valid across all Flow States.",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "nullable": true
                        }
                    },
                    {
                        "name": "serviceElementId",
                        "in": "query",
                        "description": "The serviceElmentId of the Service to get the authentication context of.",
                        "schema": {
                            "type": "string",
                            "description": "The serviceElmentId of the Service to get the authentication context of.",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineAuthorizationContextAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineAuthorizationContextAPI"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Authenticate",
                "description": "Authenticate with the given authentication credentials to the given state",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state to authenticate to.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state to authenticate to.",
                            "nullable": true
                        }
                    },
                    {
                        "name": "serviceElementId",
                        "in": "query",
                        "description": "The Service element id of the Service to authenticate to.",
                        "schema": {
                            "type": "string",
                            "description": "The Service element id of the Service to authenticate to.",
                            "nullable": true
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthenticationCredentialsAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthenticationCredentialsAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthenticationCredentialsAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthenticationCredentialsAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthenticationCredentialsAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/authorization/{state}": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Authorization Check",
                "description": "Check if the currently authenticated user has permission to access the state at its current position",
                "parameters": [
                    {
                        "name": "state",
                        "in": "path",
                        "description": "The unique identifier of the Flow state to check the current user against.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state to check the current user against.",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/1/navigation/{stateId}": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Get Navigation",
                "description": "Activate a navigation and if the current Flow state is on a navigation item, then that item is highlighted.",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "nullable": true
                        }
                    }
                ],
                "requestBody": {
                    "description": "The details of the navigation to activate.",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineNavigationRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineNavigationRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineNavigationRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineNavigationRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineNavigationRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineNavigationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineNavigationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state/out/{stateId}/{selectedOutcomeId}": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Flow Out",
                "description": "Initiate a flow out from an Outcome that is configured with a Flow Out.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the flow out state is already running, it will be joined.\r\n            \r\nOtherwise, it will be initialised.\r\n</aside>",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "nullable": true
                        }
                    },
                    {
                        "name": "selectedOutcomeId",
                        "in": "path",
                        "description": "The outcome to Flow Out through.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The outcome to Flow Out through.",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInitializationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInitializationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Initialize a Flow",
                "description": "Used to initialize a flow",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInitializationRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInitializationRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInitializationRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInitializationRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInitializationRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInitializationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInitializationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Initialize a Flow (Simple)",
                "description": "Used to initialise a flow and authenitcate into it.\r\n            \r\n<aside class=\"alert alert-info\">\r\nEither a flow ID or developer name must be provided to initialize a flow.\r\n</aside>",
                "requestBody": {
                    "description": "The details of the Flow with a username and password to authenticate with.",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInitializationSimpleRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInitializationSimpleRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInitializationSimpleRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInitializationSimpleRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInitializationSimpleRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInvokeResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInvokeResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state/{stateId}": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Invoke Flow State",
                "description": "Used to invoke a flow state",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "nullable": true
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInvokeResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInvokeResponseAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Join Flow State",
                "description": "Used to join the state provided",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "nullable": true
                        }
                    },
                    {
                        "name": "mode",
                        "in": "query",
                        "description": "The mode in which to join the state.",
                        "schema": {
                            "type": "string",
                            "description": "The mode in which to join the state.",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInvokeResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInvokeResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/2/state/{stateId}": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Invoke Flow State",
                "description": "Used to invoke a flow state",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "nullable": true
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInvokeResponse2API"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInvokeResponse2API"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Run Run"
                ],
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "mode",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInvokeResponse2API"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInvokeResponse2API"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/2/state/{stateId}": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Invoke Flow State",
                "description": "Used to invoke a flow state",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "stateId",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EngineInvokeRequestAPI"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EngineInvokeResponse2API"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Run Run"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "stateId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EngineInvokeResponse2API"
                        }
                    }
                }
            }
        },
        "/api/run/1/response": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Response From Service",
                "description": "Used to get the invoke type of the service response provided",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceResponseAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceResponseAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceResponseAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceResponseAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceResponseAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/event": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Event",
                "description": "Used to get the invoke type of the service event provided",
                "requestBody": {
                    "description": "",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/ListenerServiceResponseAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ListenerServiceResponseAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ListenerServiceResponseAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ListenerServiceResponseAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ListenerServiceResponseAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state/{stateId}/listener": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Add Listener",
                "description": "Used to add a listener to the state <code>stateId</code> from the details in the request body",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "",
                            "nullable": true
                        }
                    }
                ],
                "requestBody": {
                    "description": "The details of the state listener used to set up the new listener",
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/StateListenerRequestAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/StateListenerRequestAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StateListenerRequestAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StateListenerRequestAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/StateListenerRequestAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateListenerResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateListenerResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state/{stateId}/listener/{listenerId}": {
            "delete": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Remove Listener",
                "description": "Used to remove the listener on the state <code>stateId</code> with the id <code>listenerId</code>",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "nullable": true
                        }
                    },
                    {
                        "name": "listenerId",
                        "in": "path",
                        "description": "The unique identifier of the listener.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the listener.",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/1/state/package": {
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Import State",
                "description": "Used to import a state into the tenant from JSON",
                "requestBody": {
                    "description": "The JSON of the state to be imported.",
                    "content": {
                        "null": {
                            "schema": {
                                "type": "string",
                                "description": "The JSON of the state to be imported.",
                                "nullable": true
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "type": "string",
                                "description": "The JSON of the state to be imported.",
                                "nullable": true
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "description": "The JSON of the state to be imported.",
                                "nullable": true
                            }
                        },
                        "text/json": {
                            "schema": {
                                "type": "string",
                                "description": "The JSON of the state to be imported.",
                                "nullable": true
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "type": "string",
                                "description": "The JSON of the state to be imported.",
                                "nullable": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/run/1/state/package/{stateId}": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Export State",
                "description": "Used to export a state from the tenant into JSON.\r\n            \r\n<aside class=\"alert alert-info\">\r\nUsers only have permissions to export States for which they are the Running User.\r\n</aside>",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state/{stateId}/ping/{stateToken}": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Check Flow State Changes",
                "description": "Used to check if a change has occurred to the state, by comparing the current state token of the state with the provided one",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "stateToken",
                        "in": "path",
                        "description": "The state token to compare to the current state token of the Flow state",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The state token to compare to the current state token of the Flow state",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state/{stateId}/values/{id}": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Get Flow State Value",
                "description": "Used to get the value for the id provided in the flow state",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier of the Flow value.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow value.",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineValueAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineValueAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state/{stateId}/values/name/{name}": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Get Flow State Value by Name",
                "description": "Used to get the value for the name provided in the flow state",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Flow value.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The name of the Flow value.",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineValueAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineValueAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state/{stateId}/values": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Get Flow State Values",
                "description": "Used to get all the values in the flow state. This endpoint requires a runtime authentication token, which\r\nmeans it can only be used with non-public flows.",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EngineValueAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EngineValueAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Set Flow State Values",
                "description": "Used to set values in the flow state with the given data. This endpoint requires a runtime authentication\r\ntoken, which means it can only be used with non-public flows.",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The new details for a list of values.",
                    "content": {
                        "null": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EngineValueAPI"
                                },
                                "description": "The new details for a list of values.",
                                "nullable": true
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EngineValueAPI"
                                },
                                "description": "The new details for a list of values.",
                                "nullable": true
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EngineValueAPI"
                                },
                                "description": "The new details for a list of values.",
                                "nullable": true
                            }
                        },
                        "text/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EngineValueAPI"
                                },
                                "description": "The new details for a list of values.",
                                "nullable": true
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EngineValueAPI"
                                },
                                "description": "The new details for a list of values.",
                                "nullable": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EngineValueAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EngineValueAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state/{stateId}/history": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Get Flow State History",
                "description": "Returns a sequence of visited map elements (excluding the current one) in the order of visiting them",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier of the Flow state.",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "onlyUIMapElements",
                        "in": "query",
                        "description": "The flag indicating that only the UI map elements should be returned",
                        "schema": {
                            "type": "boolean",
                            "description": "The flag indicating that only the UI map elements should be returned",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateHistoryAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StateHistoryAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/run/1/state/{stateId}/download/{fileId}/{filename}": {
            "get": {
                "tags": [
                    "Run Run"
                ],
                "summary": "Download document",
                "description": "Downloads the octet stream of a document stored in the Flow internal storage",
                "parameters": [
                    {
                        "in": "path",
                        "name": "stateId",
                        "description": "The unique identifier of the Flow state.",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "path",
                        "name": "fileId",
                        "description": "The id of the document",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "filename",
                        "description": "The chosen name of the document that is returned",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/service/1/requests": {
            "get": {
                "tags": [
                    "Service Invoker"
                ],
                "summary": "List Invoker Requests",
                "description": "Get the metadata for every request sent to a Service",
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of service requests to return",
                        "schema": {
                            "type": "integer",
                            "description": "The number of service requests to return",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page of service requests",
                        "schema": {
                            "type": "integer",
                            "description": "The current page of service requests",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Property to order service requests by, defaults to \"createdAt\"",
                        "schema": {
                            "type": "string",
                            "description": "Property to order service requests by, defaults to \"createdAt\"",
                            "default": "createdAt",
                            "nullable": true
                        }
                    },
                    {
                        "name": "orderDirection",
                        "in": "query",
                        "description": "ASC or DESC, defaults to DESC",
                        "schema": {
                            "type": "string",
                            "description": "ASC or DESC, defaults to DESC",
                            "default": "DESC",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceInvokerRequestAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceInvokerRequestAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/service/1/requests/{id}": {
            "get": {
                "tags": [
                    "Service Invoker"
                ],
                "summary": "Get Invoker Requests",
                "description": "Get the metadata for a specific request sent to a service",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceInvokerRequestAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceInvokerRequestAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/service/1/requests/flow/{id}": {
            "get": {
                "tags": [
                    "Service Invoker"
                ],
                "summary": "List Flow Invoker Requests",
                "description": "Get the metadata for every request sent to a Service from a specific Flow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The flow ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The flow ID",
                            "format": "uuid",
                            "nullable": true
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of service requests to return",
                        "schema": {
                            "type": "integer",
                            "description": "The number of service requests to return",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page of service requests",
                        "schema": {
                            "type": "integer",
                            "description": "The current page of service requests",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Property to order service requests by, defaults to \"createdAt\"",
                        "schema": {
                            "type": "string",
                            "description": "Property to order service requests by, defaults to \"createdAt\"",
                            "default": "createdAt",
                            "nullable": true
                        }
                    },
                    {
                        "name": "orderDirection",
                        "in": "query",
                        "description": "ASC or DESC, defaults to DESC",
                        "schema": {
                            "type": "string",
                            "description": "ASC or DESC, defaults to DESC",
                            "default": "DESC",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceInvokerRequestAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceInvokerRequestAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/service/1/requests/flow/{id}/{version}": {
            "get": {
                "tags": [
                    "Service Invoker"
                ],
                "summary": "List Flow Version Invoker Requests",
                "description": "Get the metadata for every request sent to a Service from a specific version of a Flow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The flow ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The flow ID",
                            "format": "uuid",
                            "nullable": true
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The flow version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The flow version",
                            "format": "uuid",
                            "nullable": true
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of service requests to return",
                        "schema": {
                            "type": "integer",
                            "description": "The number of service requests to return",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page of service requests",
                        "schema": {
                            "type": "integer",
                            "description": "The current page of service requests",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Property to order service requests by, defaults to \"createdAt\"",
                        "schema": {
                            "type": "string",
                            "description": "Property to order service requests by, defaults to \"createdAt\"",
                            "default": "createdAt",
                            "nullable": true
                        }
                    },
                    {
                        "name": "orderDirection",
                        "in": "query",
                        "description": "ASC or DESC, defaults to DESC",
                        "schema": {
                            "type": "string",
                            "description": "ASC or DESC, defaults to DESC",
                            "default": "DESC",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceInvokerRequestAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceInvokerRequestAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/service/1/requests/state/{id}": {
            "get": {
                "tags": [
                    "Service Invoker"
                ],
                "summary": "List State Invoker Requests",
                "description": "Get the metadata for every request sent to a Service from a specific State",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The state ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The state ID",
                            "format": "uuid",
                            "nullable": true
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of service requests to return",
                        "schema": {
                            "type": "integer",
                            "description": "The number of service requests to return",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page of service requests",
                        "schema": {
                            "type": "integer",
                            "description": "The current page of service requests",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Property to order service requests by, defaults to \"createdAt\"",
                        "schema": {
                            "type": "string",
                            "description": "Property to order service requests by, defaults to \"createdAt\"",
                            "default": "createdAt",
                            "nullable": true
                        }
                    },
                    {
                        "name": "orderDirection",
                        "in": "query",
                        "description": "ASC or DESC, defaults to DESC",
                        "schema": {
                            "type": "string",
                            "description": "ASC or DESC, defaults to DESC",
                            "default": "DESC",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceInvokerRequestAPIItemCollectionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceInvokerRequestAPIItemCollectionResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/culture": {
            "post": {
                "tags": [
                    "Translate Cultures"
                ],
                "summary": "Create/Update Content Value Culture",
                "description": "Used to create new content value cultures or update existing ones.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIf the <code>id</code> property is included in the request, the platform will update the culture with a\r\nmatching ID.\r\n</aside>",
                "consumes": [
                    "",
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/CultureAPI"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CultureAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CultureAPI"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Translate Cultures"
                ],
                "summary": "List Content Value Cultures",
                "description": "Used to get existing content value cultures.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CultureAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CultureAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/culture/{id}": {
            "get": {
                "tags": [
                    "Translate Cultures"
                ],
                "summary": "Get Content Value Culture",
                "description": "Used to get an existing content value culture.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier for the content value culture",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The unique identifier for the content value culture",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CultureAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CultureAPI"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Translate Cultures"
                ],
                "summary": "Delete Content Value Culture",
                "description": "Used to delete an existing content value culture.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/translate/1/flow": {
            "get": {
                "tags": [
                    "Translate Flow"
                ],
                "summary": "List Flow Translations",
                "description": "Used to filter existing flow objects that are available for translation.\r\n            \r\n### Filter\r\n            \r\nThe filter can take the following formats:\r\n            \r\n* <code>developerName eq '{developer_name}'</code>: Filter the list of flows where the <code>developerName</code> property exactly matches the provided developer name (case insensitive)\r\n* <code>substringof(developerName, '{developer_name}')</code>: Filter the list of flows where the <code>developerName</code> property partially matches the provided developer name (case insensitive)",
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The filter used for querying",
                        "schema": {
                            "type": "string",
                            "description": "The filter used for querying",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FlowResponseAPI"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FlowResponseAPI"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/flow/{id}": {
            "get": {
                "tags": [
                    "Translate Flow"
                ],
                "summary": "Get Flow Translation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowImageTranslationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowImageTranslationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/flow/{flow}/{editingToken}/element/map": {
            "post": {
                "tags": [
                    "Translate Map Element"
                ],
                "summary": "Update Map Element Translation",
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/MapElementTranslationResponseAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapElementTranslationResponseAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapElementTranslationResponseAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapElementTranslationResponseAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapElementTranslationResponseAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MapElementTranslationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MapElementTranslationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/flow/{flow}/{editingToken}/element/map/{id}": {
            "get": {
                "tags": [
                    "Translate Map Element"
                ],
                "summary": "Get Map Element Translation",
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MapElementTranslationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MapElementTranslationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/flow/{flow}/{editingToken}/element/navigation": {
            "post": {
                "tags": [
                    "Translate Navigation Element"
                ],
                "summary": "Update Navigation Translation",
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/NavigationElementTranslationResponseAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/NavigationElementTranslationResponseAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NavigationElementTranslationResponseAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NavigationElementTranslationResponseAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/NavigationElementTranslationResponseAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NavigationElementTranslationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NavigationElementTranslationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/flow/{flow}/{editingToken}/element/navigation/{id}": {
            "get": {
                "tags": [
                    "Translate Navigation Element"
                ],
                "summary": "Get Navigation Translation",
                "parameters": [
                    {
                        "name": "editingToken",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "flow",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NavigationElementTranslationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NavigationElementTranslationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/element/page": {
            "post": {
                "tags": [
                    "Translate Page Element"
                ],
                "summary": "Update Page Translation",
                "requestBody": {
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/PageElementTranslationResponseAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/PageElementTranslationResponseAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PageElementTranslationResponseAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PageElementTranslationResponseAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/PageElementTranslationResponseAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageElementTranslationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageElementTranslationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/element/page/{id}": {
            "get": {
                "tags": [
                    "Translate Page Element"
                ],
                "summary": "Get Page Transation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageElementTranslationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageElementTranslationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/element/type": {
            "post": {
                "tags": [
                    "Translate Type Element"
                ],
                "summary": "Update Type Translation",
                "requestBody": {
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/TypeElementTranslationResponseAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TypeElementTranslationResponseAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TypeElementTranslationResponseAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TypeElementTranslationResponseAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/TypeElementTranslationResponseAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeElementTranslationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeElementTranslationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/element/type/{id}": {
            "get": {
                "tags": [
                    "Translate Type Element"
                ],
                "summary": "Get Type Translation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeElementTranslationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeElementTranslationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/element/value": {
            "post": {
                "tags": [
                    "Translate Value Element"
                ],
                "summary": "Update Value Translation",
                "requestBody": {
                    "content": {
                        "null": {
                            "schema": {
                                "$ref": "#/components/schemas/ValueElementTranslationResponseAPI"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValueElementTranslationResponseAPI"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValueElementTranslationResponseAPI"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValueElementTranslationResponseAPI"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValueElementTranslationResponseAPI"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueElementTranslationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueElementTranslationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/translate/1/element/value/{id}": {
            "get": {
                "tags": [
                    "Translate Value Element"
                ],
                "summary": "Get Value Translation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueElementTranslationResponseAPI"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueElementTranslationResponseAPI"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "TenantRegistrationRequestAPI": {
            "type": "object",
            "properties": {
                "tenantName": {
                    "description": "The name of the tenant to create",
                    "type": "string"
                },
                "apiKeyName": {
                    "type": "string"
                },
                "firstName": {
                    "description": "The first name of the user",
                    "type": "string"
                },
                "lastName": {
                    "description": "The last name of the user",
                    "type": "string"
                },
                "email": {
                    "description": "The email of the user",
                    "type": "string"
                }
            }
        },
        "RuntimeStatus": {
            "format": "int32",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "type": "integer"
        },
        "RuntimeListResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "A unique identifier for the runtime",
                    "type": "string"
                },
                "developerName": {
                    "description": "A human-readable name for the runtime",
                    "type": "string"
                },
                "numberOfHealthyNodes": {
                    "format": "int32",
                    "description": "The number of healthy nodes currently part of the runtime. This count is determined from the number of nodes\r\nthat have reported a status in the last few minutes.",
                    "type": "integer"
                },
                "numberOfTenants": {
                    "format": "int32",
                    "description": "The number of tenants currently associated with this runtime",
                    "type": "integer"
                },
                "reportedAt": {
                    "format": "date-time",
                    "description": "The timestamp of the latest report received from any node in the runtime",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/RuntimeStatus"
                },
                "uri": {
                    "description": "The URI used to access the runtime. This could be an internal, private or public URI.",
                    "type": "string"
                },
                "latestVersion": {
                    "description": "The latest version of the runtime the node is currently running.",
                    "type": "string"
                }
            }
        },
        "RuntimeCreateRequestTenant": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The unique identifier for the tenant",
                    "type": "string"
                }
            }
        },
        "RuntimeCreateRequest": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The name to use for the created runtime",
                    "type": "string"
                },
                "tenants": {
                    "description": "Any tenants to associate with the runtime",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RuntimeCreateRequestTenant"
                    }
                }
            }
        },
        "BuilderWhoAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The unique identifier for the builder on ManyWho. This identifier is the same across all tenants for which the builder has permissions.",
                    "type": "string"
                },
                "firstName": {
                    "description": "The first name of the builder",
                    "type": "string"
                },
                "lastName": {
                    "description": "The last name of the builder",
                    "type": "string"
                },
                "email": {
                    "description": "The email of the builder",
                    "type": "string"
                }
            }
        },
        "RuntimeTenant": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The unique identifier for the tenant",
                    "type": "string"
                },
                "developerName": {
                    "description": "The name of the tenant",
                    "type": "string"
                },
                "associatedAt": {
                    "format": "date-time",
                    "description": "The timestamp of when the tenant was first associated with the runtime",
                    "type": "string"
                }
            }
        },
        "RuntimeCreateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "A unique identifier for the runtime",
                    "type": "string"
                },
                "createdAt": {
                    "format": "date-time",
                    "description": "When the runtime was created",
                    "type": "string"
                },
                "createdBy": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "developerName": {
                    "description": "A human-readable name for the runtime",
                    "type": "string"
                },
                "installationToken": {
                    "description": "A one-time token that the runtime must be configured with for installation",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/RuntimeStatus"
                },
                "tenants": {
                    "description": "A list of all the tenants currently associated with this runtime",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RuntimeTenant"
                    }
                }
            }
        },
        "AddressFamily": {
            "format": "int32",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                6,
                7,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                21,
                22,
                23,
                24,
                25,
                26,
                28,
                29,
                65536,
                65537,
                -1
            ],
            "type": "integer"
        },
        "IPAddress": {
            "type": "object",
            "properties": {
                "addressFamily": {
                    "$ref": "#/definitions/AddressFamily"
                },
                "scopeId": {
                    "format": "int64",
                    "type": "integer"
                },
                "isIPv6Multicast": {
                    "type": "boolean",
                    "readOnly": true
                },
                "isIPv6LinkLocal": {
                    "type": "boolean",
                    "readOnly": true
                },
                "isIPv6SiteLocal": {
                    "type": "boolean",
                    "readOnly": true
                },
                "isIPv6Teredo": {
                    "type": "boolean",
                    "readOnly": true
                },
                "isIPv6UniqueLocal": {
                    "type": "boolean",
                    "readOnly": true
                },
                "isIPv4MappedToIPv6": {
                    "type": "boolean",
                    "readOnly": true
                }
            }
        },
        "RuntimeNode": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The hostname for the node",
                    "type": "string"
                },
                "ipAddresses": {
                    "description": "A list of the IP addresses currently associated with the node",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IPAddress"
                    }
                },
                "createdAt": {
                    "format": "date-time",
                    "description": "Timestamp of when the node was first created",
                    "type": "string"
                },
                "reportedAt": {
                    "format": "date-time",
                    "description": "Timestamp of the last report received from this node",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/RuntimeStatus"
                },
                "version": {
                    "description": "The version of the runtime the node is currently running",
                    "type": "string"
                }
            }
        },
        "RuntimeResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "A unique identifier for the runtime",
                    "type": "string"
                },
                "createdAt": {
                    "format": "date-time",
                    "description": "When the runtime was created",
                    "type": "string"
                },
                "createdBy": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "developerName": {
                    "description": "A human-readable name for the runtime",
                    "type": "string"
                },
                "nodes": {
                    "description": "A list of all the nodes that are currently part of the runtime",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RuntimeNode"
                    }
                },
                "reportedAt": {
                    "format": "date-time",
                    "description": "The timestamp of the latest report received from the node",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/RuntimeStatus"
                },
                "tenants": {
                    "description": "A list of all the tenants currently associated with this runtime",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RuntimeTenant"
                    }
                },
                "uri": {
                    "description": "The URI used to access the runtime. This could be an internal, private or public URI.",
                    "type": "string"
                }
            }
        },
        "RuntimeUpdateRequestTenant": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The unique identifier for the tenant",
                    "type": "string"
                }
            }
        },
        "RuntimeUpdateRequest": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The new name to use for the runtime",
                    "type": "string"
                },
                "tenants": {
                    "description": "Any tenants to associate with the runtime",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RuntimeUpdateRequestTenant"
                    }
                }
            }
        },
        "RuntimeFailure": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The ID of the failure",
                    "type": "string"
                },
                "failure": {
                    "description": "The actual failure content; usually an exception message",
                    "type": "string"
                },
                "messageType": {
                    "type": "string"
                },
                "occurredAt": {
                    "format": "date-time",
                    "description": "When the failure happened",
                    "type": "string"
                }
            }
        },
        "RuntimeFailureItemCollectionResponse": {
            "type": "object",
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RuntimeFailure"
                    },
                    "readOnly": true
                }
            }
        },
        "FlowIdAPI": {
            "description": "A composite unique identifier assigned by the platform, which should not be included for new flows.",
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the flow. This identifier does not change for the lifetime of the flow and is generated when the flow is first created.",
                    "type": "string"
                },
                "versionId": {
                    "description": "The unique identifier for a specific version of a flow. This identifier changes any time a change is made to the flow - in structure or content.",
                    "type": "string"
                }
            }
        },
        "PropertyAPI": {
            "type": "object",
            "properties": {
                "typeElementPropertyId": {
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                },
                "contentValue": {
                    "type": "string"
                },
                "contentType": {
                    "type": "string"
                },
                "contentFormat": {
                    "type": "string"
                },
                "objectData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectAPI"
                    }
                },
                "typeElementId": {
                    "type": "string"
                }
            }
        },
        "ObjectAPI": {
            "type": "object",
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                },
                "typeElementId": {
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "type": "integer"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PropertyAPI"
                    }
                },
                "typeElementBindingDeveloperName": {
                    "type": "string"
                },
                "isSelected": {
                    "type": "boolean"
                }
            }
        },
        "StateValueAPI": {
            "type": "object",
            "properties": {
                "valueElementId": {
                    "type": "string"
                },
                "valueElementDeveloperName": {
                    "type": "string"
                },
                "objectData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectAPI"
                    }
                },
                "contentValue": {
                    "type": "string"
                },
                "contentType": {
                    "type": "string"
                }
            }
        },
        "UserInteractionAPI": {
            "type": "object",
            "properties": {
                "manywhoUserId": {
                    "type": "string"
                },
                "latitude": {
                    "format": "double",
                    "description": "The latitude coordinate of the user's location.",
                    "type": "number"
                },
                "longitude": {
                    "format": "double",
                    "description": "The longitude coordinate of the user's location.",
                    "type": "number"
                },
                "accuracy": {
                    "format": "double",
                    "description": "The accuracy of the location data that has been collected.",
                    "type": "number"
                },
                "altitude": {
                    "format": "double",
                    "description": "The altitude of the user above mean sea level.",
                    "type": "number"
                },
                "altitudeAccuracy": {
                    "format": "double",
                    "description": "The accuracy of the altitude data that has been collected.",
                    "type": "number"
                },
                "heading": {
                    "format": "double",
                    "description": "The heading of the user as degrees clockwise from North.",
                    "type": "number"
                },
                "speed": {
                    "format": "double",
                    "description": "The speed of the user in meters per second.",
                    "type": "number"
                },
                "time": {
                    "format": "date-time",
                    "description": "The timestamp of the data that has been collected",
                    "type": "string"
                }
            }
        },
        "UserVoteAPI": {
            "type": "object",
            "properties": {
                "selectedOutcomeId": {
                    "type": "string"
                },
                "directoryUserId": {
                    "type": "string"
                },
                "manywhoUserId": {
                    "type": "string"
                },
                "latitude": {
                    "format": "double",
                    "description": "The latitude coordinate of the user's location.",
                    "type": "number"
                },
                "longitude": {
                    "format": "double",
                    "description": "The longitude coordinate of the user's location.",
                    "type": "number"
                },
                "accuracy": {
                    "format": "double",
                    "description": "The accuracy of the location data that has been collected.",
                    "type": "number"
                },
                "altitude": {
                    "format": "double",
                    "description": "The altitude of the user above mean sea level.",
                    "type": "number"
                },
                "altitudeAccuracy": {
                    "format": "double",
                    "description": "The accuracy of the altitude data that has been collected.",
                    "type": "number"
                },
                "heading": {
                    "format": "double",
                    "description": "The heading of the user as degrees clockwise from North.",
                    "type": "number"
                },
                "speed": {
                    "format": "double",
                    "description": "The speed of the user in meters per second.",
                    "type": "number"
                },
                "time": {
                    "format": "date-time",
                    "description": "The timestamp of the data that has been collected",
                    "type": "string"
                }
            }
        },
        "StackFrameInfoAPI": {
            "type": "object",
            "properties": {
                "flowId": {
                    "format": "uuid",
                    "type": "string"
                },
                "mapElementId": {
                    "format": "uuid",
                    "type": "string"
                }
            }
        },
        "StateEntryAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "flowId": {
                    "$ref": "#/definitions/FlowIdAPI"
                },
                "flowDeveloperName": {
                    "type": "string"
                },
                "mapElementId": {
                    "type": "string"
                },
                "mapElementDeveloperName": {
                    "type": "string"
                },
                "nextMapElementId": {
                    "format": "uuid",
                    "type": "string"
                },
                "authenticatingServiceElementId": {
                    "format": "uuid",
                    "type": "string"
                },
                "dateCommitted": {
                    "format": "date-time",
                    "type": "string"
                },
                "chosenOutcomeId": {
                    "type": "string"
                },
                "chosenOutcomeDeveloperName": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateValueAPI"
                    }
                },
                "userInteractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserInteractionAPI"
                    }
                },
                "userVotes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/UserVoteAPI"
                    }
                },
                "frames": {
                    "description": "It contains info about the list of stack frames valid for this state entry\r\nThe last stack frame has MapElementId == null (to avoid redundancy) as this data can be taken from MapElementId",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackFrameInfoAPI"
                    }
                }
            }
        },
        "LoggingLevel": {
            "format": "int64",
            "enum": [
                1,
                257
            ],
            "type": "integer"
        },
        "LogEntryAPI": {
            "type": "object",
            "properties": {
                "timestamp": {
                    "format": "date-time",
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "level": {
                    "$ref": "#/definitions/LoggingLevel"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "LogAPI": {
            "type": "object",
            "properties": {
                "stateId": {
                    "type": "string"
                },
                "flowId": {
                    "type": "string"
                },
                "flowDeveloperName": {
                    "type": "string"
                },
                "entries": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/LogEntryAPI"
                    }
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "FlowStackFrameAPI": {
            "type": "object",
            "properties": {
                "flowId": {
                    "$ref": "#/definitions/FlowIdAPI"
                },
                "mapElementId": {
                    "format": "uuid",
                    "description": "If this frame is the current frame, this property contains the id of the current map element.\r\nIf this frame refers to one of the parent frames, this property contains the id of a Subflow map element that was the entry point to the next frame.",
                    "type": "string"
                },
                "mapElementDeveloperName": {
                    "description": "If this frame is the current frame, this property contains the developer name of the current map element.\r\nIf this frame refers to one of the parent frames, this property contains the id of a Subflow map element that was the entry point to the next frame.",
                    "type": "string"
                },
                "runningUserId": {
                    "description": "This is our reference running user.  By default, the running user is the person who initializes the flow.  From then on,\r\nthe running user can be re-assigned as needed - but it is always a single user identity that is tagged as the running user.",
                    "type": "string"
                },
                "precommitStateEntry": {
                    "$ref": "#/definitions/StateEntryAPI"
                },
                "values": {
                    "description": "The list of value elements that are associated with this frame",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateValueAPI"
                    }
                }
            }
        },
        "RuntimePathElementAPI": {
            "type": "object",
            "properties": {
                "flowId": {
                    "format": "uuid",
                    "description": "The ID of the Flow",
                    "type": "string"
                },
                "mapElementId": {
                    "format": "uuid",
                    "description": "The ID of the Map Element",
                    "type": "string"
                }
            }
        },
        "ArchivedStackFrameAPI": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "The runtime path of the Subflow map element that is associated with this Archived Stack Frame",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RuntimePathElementAPI"
                    }
                },
                "values": {
                    "description": "Archived values of value elements",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateValueAPI"
                    }
                }
            }
        },
        "StateAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                },
                "dateCreated": {
                    "format": "date-time",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "type": "string"
                },
                "expiresAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "currentFlowId": {
                    "$ref": "#/definitions/FlowIdAPI"
                },
                "currentFlowDeveloperName": {
                    "type": "string"
                },
                "currentMapElementId": {
                    "type": "string"
                },
                "currentMapElementDeveloperName": {
                    "type": "string"
                },
                "entryOutcomeId": {
                    "type": "string"
                },
                "entryOutcomeDeveloperName": {
                    "type": "string"
                },
                "currentStreamId": {
                    "type": "string"
                },
                "currentRunningUserId": {
                    "type": "string"
                },
                "currentRunningUserEmail": {
                    "type": "string"
                },
                "currentRunningUserExternalId": {
                    "type": "string"
                },
                "externalIdentifier": {
                    "type": "string"
                },
                "manywhoTenantId": {
                    "type": "string"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "stateEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateEntryAPI"
                    }
                },
                "precommitStateEntry": {
                    "$ref": "#/definitions/StateEntryAPI"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateValueAPI"
                    }
                },
                "authorizationHeader": {
                    "type": "string"
                },
                "isDone": {
                    "type": "boolean"
                },
                "isExpired": {
                    "type": "boolean"
                },
                "log": {
                    "$ref": "#/definitions/LogAPI"
                },
                "joinUri": {
                    "type": "string"
                },
                "rootFaults": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hasRootFaults": {
                    "type": "boolean",
                    "readOnly": true
                },
                "storeId": {
                    "type": "string"
                },
                "frames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FlowStackFrameAPI"
                    }
                },
                "archivedFrames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ArchivedStackFrameAPI"
                    }
                },
                "waitExpiresAt": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "StateAPIItemCollectionResponse": {
            "type": "object",
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateAPI"
                    },
                    "apiKeyName": {
                        "type": "string",
                        "nullable": true
                    },
                    "readOnly": true
                }
            }
        },
        "OrganizationMinimal": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The ID of the organization",
                    "type": "string"
                },
                "name": {
                    "description": "The friendly name of the organization",
                    "type": "string"
                }
            }
        },
        "IPRangeAPI": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The name for this IP range restriction, and typically a helpful one to remind builders of the purpose",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "Any additional summary information about this IP range restriction that will help explain the purpose",
                    "type": "string"
                },
                "startIPAddress": {
                    "description": "The lower end of the IP range in IPv4 format (dotted decimal)",
                    "type": "string"
                },
                "endIPAddress": {
                    "description": "The upper end of the IP range in IPv4 format (dotted decimal)",
                    "type": "string"
                }
            }
        },
        "GroupSettings": {
            "type": "object",
            "properties": {
                "groupAttribute": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ClaimsSettings": {
            "type": "object",
            "properties": {
                "emailAddress": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                }
            }
        },
        "SamlSettings": {
            "type": "object",
            "properties": {
                "certificate": {
                    "description": "The public certificate used for validating the signature of any SAML objects.",
                    "type": "string"
                },
                "redirectUri": {
                    "description": "The URI to redirect users to, in order for them to authenticate in the IdP.",
                    "type": "string"
                },
                "logoutUri": {
                    "description": "The URI to redirect users to, in order for them to logout of the IdP.",
                    "type": "string"
                },
                "groupSettings": {
                    "$ref": "#/definitions/GroupSettings"
                },
                "claims": {
                    "$ref": "#/definitions/ClaimsSettings"
                }
            }
        },
        "SecuritySettingsAPI": {
            "description": "Specific security settings that should be applied to this tenant, beyond the defaults (excluding subtenants)",
            "type": "object",
            "properties": {
                "isAdminRestrictedByIPRange": {
                    "description": "Indicates that the Admin APIs should be protected by the provided IP ranges in `authorizedAdminIPRanges`.\r\nSetting this to `false` will not remove the list of IP Range entries and will simply disable IP range \r\nrestrictions",
                    "type": "boolean"
                },
                "isPackagingRestrictedByIPRange": {
                    "description": "Indicates that the Packaging APIs should be protected by the provided IP ranges in \r\n`authorizedPackagingIPRanges`. Setting this to `false` will not remove the list of IP Range entries and will \r\nsimply disable IP range restrictions",
                    "type": "boolean"
                },
                "isDrawRestrictedByIPRange": {
                    "description": "Indicates that the Draw APIs should be protected by the provided IP ranges in `authorizedDrawIPRanges`. \r\nSetting this to `false` will not remove the list of IP Range entries and will simply disable IP range \r\nrestrictions",
                    "type": "boolean"
                },
                "isRunRestrictedByIPRange": {
                    "description": "Indicates that the Run APIs should be protected by the provided IP ranges in `authorizedRunIPRanges`. \r\nSetting this to `false` will not remove the list of IP Range entries and will simply disable IP range \r\nrestrictions",
                    "type": "boolean"
                },
                "authorizedAdminIPRanges": {
                    "description": "A list of IP ranges that requests to the Admin API must originate from to gain access",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IPRangeAPI"
                    }
                },
                "authorizedPackagingIPRanges": {
                    "description": "A list of IP ranges that requests to the Packaging API must originate from to be allowed access",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IPRangeAPI"
                    }
                },
                "authorizedDrawIPRanges": {
                    "description": "A list of IP ranges that requests to the Draw API must originate from to to be allowed access",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IPRangeAPI"
                    }
                },
                "authorizedRunIPRanges": {
                    "description": "A list of IP ranges that requests to the Run API must originate from to be allowed access",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IPRangeAPI"
                    }
                },
                "isSamlEnabled": {
                    "type": "boolean"
                },
                "samlSettings": {
                    "$ref": "#/definitions/SamlSettings"
                }
            }
        },
        "StateReportingAuthentication": {
            "format": "int32",
            "enum": [
                0,
                1,
                2
            ],
            "type": "integer"
        },
        "StateSettingsAPI": {
            "description": "Settings used for state persistence and reporting",
            "type": "object",
            "properties": {
                "endpoint": {
                    "description": "The URI to send all state updates to, which must implement our Reporting API interface. More details \r\non that can be found [here](https://github.com/manywho/reporting)",
                    "type": "string"
                },
                "authentication": {
                    "$ref": "#/definitions/StateReportingAuthentication"
                },
                "username": {
                    "description": "Username or Client Id, if authentication is set to Basic or ClientCredentials",
                    "type": "string"
                },
                "password": {
                    "description": "Password or Client Secret, if authentication is set to Basic or ClientCredentials",
                    "type": "string"
                },
                "tokenEndpoint": {
                    "description": "OAuth token endpoint for ClientCredentials based authentication",
                    "type": "string"
                }
            }
        },
        "ObservabilitySettingsAPI": {
            "description": "Settings used for runtime observabillity",
            "type": "object",
            "properties": {
                "otlpEndpoint": {
                    "description": "The URI to dispatch runtime OTLP data",
                    "type": "string"
                },
                "otlpHeaders": {
                    "description": "A comma-separated string of headers to send with each dispatch",
                    "type": "string"
                },
                "otlpSensitiveDataLogging": {
                    "format": "int32",
                    "description": "When this is enabled more verbose and potentially sensitive information will be logged",
                    "type": "integer"
                }
            }
        },
        "ReleaseCycle": {
            "format": "int32",
            "enum": [
                0,
                1
            ],
            "type": "integer"
        },
        "TenantSettingsAPI": {
            "description": "Settings that are specific to features used in the tenant",
            "type": "object",
            "properties": {
                "disableServiceInvokerLogging": {
                    "description": "Whether to disable the logging of service invoker requests, reponses and failures. They are helpful when\r\ndebugging, and a requirement for a tenant's flows to be tested using Reflow, but having the platform store\r\nthem might be against a customer's compliance rules.",
                    "type": "boolean"
                },
                "releaseCycle": {
                    "$ref": "#/definitions/ReleaseCycle"
                },
                "formatValues": {
                    "type": "boolean"
                },
                "useRegionalRedirectUris": {
                    "type": "boolean"
                }
            }
        },
        "ExternalStorageSettingsAPI": {
            "type": "object",
            "properties": {
                "enableReplication": {
                    "description": "Whether to enable saving data to both the platform and the store simultaneously. This functionality is\r\nintended to ease the process of a full migration to external-only storage.",
                    "type": "boolean"
                },
                "enableStates": {
                    "description": "Whether to store states using the External Storage API or not",
                    "type": "boolean"
                },
                "globalStoreId": {
                    "format": "uuid",
                    "description": "The ID of the store to use for all content in the tenant",
                    "type": "string"
                }
            }
        },
        "FeatureFlagAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "createdAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "updatedAt": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "TenantResponseAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the tenant. The unique identifier is assigned by the platform.",
                    "type": "string"
                },
                "expiresAt": {
                    "format": "date-time",
                    "description": "A timestamp of when the tenant should expire",
                    "type": "string"
                },
                "subTenants": {
                    "description": "The list of sub tenants associated with this parent tenant.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TenantResponseAPI"
                    }
                },
                "organization": {
                    "$ref": "#/definitions/OrganizationMinimal"
                },
                "parentTenant": {
                    "$ref": "#/definitions/TenantResponseAPI"
                },
                "developerName": {
                    "description": "The unique developer name for the tenant. The developer name is related to the domain information provided in the builder username.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "A summary of the tenant. This is typically additional information that will help explain the purpose of the\r\ntenant",
                    "type": "string"
                },
                "securitySettings": {
                    "$ref": "#/definitions/SecuritySettingsAPI"
                },
                "subdomain": {
                    "description": "The requested subdomain to register for this tenant. If provided, the subdomain must be unique for the\r\nentire platform",
                    "type": "string"
                },
                "stateSettings": {
                    "$ref": "#/definitions/StateSettingsAPI"
                },
                "observabilitySettings": {
                    "$ref": "#/definitions/ObservabilitySettingsAPI"
                },
                "tenantSettings": {
                    "$ref": "#/definitions/TenantSettingsAPI"
                },
                "externalStorageSettings": {
                    "$ref": "#/definitions/ExternalStorageSettingsAPI"
                },
                "featureFlags": {
                    "description": "Feature Flags related to the tenant",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureFlagAPI"
                    }
                }
            }
        },
        "TenantRequestAPI": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The unique developer name for the tenant. The developer name is related to the domain information provided in the builder username.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "A summary of the tenant. This is typically additional information that will help explain the purpose of the\r\ntenant",
                    "type": "string"
                },
                "securitySettings": {
                    "$ref": "#/definitions/SecuritySettingsAPI"
                },
                "subdomain": {
                    "description": "The requested subdomain to register for this tenant. If provided, the subdomain must be unique for the\r\nentire platform",
                    "type": "string"
                },
                "stateSettings": {
                    "$ref": "#/definitions/StateSettingsAPI"
                },
                "observabilitySettings": {
                    "$ref": "#/definitions/ObservabilitySettingsAPI"
                },
                "tenantSettings": {
                    "$ref": "#/definitions/TenantSettingsAPI"
                },
                "externalStorageSettings": {
                    "$ref": "#/definitions/ExternalStorageSettingsAPI"
                },
                "featureFlags": {
                    "description": "Feature Flags related to the tenant",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureFlagAPI"
                    }
                }
            }
        },
        "DeleteRequestAPI": {
            "type": "object",
            "properties": {
                "cultures": {
                    "description": "Indicates if all non-default cultures should be deleted",
                    "type": "boolean"
                },
                "flows": {
                    "description": "Indicates if all flows should be deleted",
                    "type": "boolean"
                },
                "pages": {
                    "description": "Indicates if all page elements should be deleted",
                    "type": "boolean"
                },
                "values": {
                    "description": "Indicates if all value elements should be deleted",
                    "type": "boolean"
                },
                "types": {
                    "description": "Indicates if all type elements should be deleted",
                    "type": "boolean"
                },
                "services": {
                    "description": "Indicates if all service elements should be deleted",
                    "type": "boolean"
                },
                "tags": {
                    "description": "Indicates if all tag elements should be deleted",
                    "type": "boolean"
                },
                "snapshots": {
                    "description": "Indicates if all flow snapshots should be deleted",
                    "type": "boolean"
                },
                "states": {
                    "description": "Indicates if all flow states should be deleted",
                    "type": "boolean"
                },
                "macros": {
                    "description": "Indicates if all macro elements should be deleted",
                    "type": "boolean"
                },
                "identityProviders": {
                    "type": "boolean"
                },
                "openApiSchemas": {
                    "description": "Indicates if all cached OpenAPI Schemas should be deleted",
                    "type": "boolean"
                }
            }
        },
        "SubtenantCreateRequest": {
            "type": "object",
            "properties": {
                "developerName": {
                    "type": "string"
                },
                "developerSummary": {
                    "type": "string"
                }
            }
        },
        "TenantMinimalAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                }
            }
        },
        "TenantRuntimeListResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "A unique identifier for the runtime",
                    "type": "string"
                },
                "developerName": {
                    "description": "A human-readable name for the runtime",
                    "type": "string"
                },
                "latestVersion": {
                    "description": "The latest version of the runtime the node is currently running.",
                    "type": "string"
                }
            }
        },
        "Role": {
            "type": "object",
            "properties": {
                "roleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "developerName": {
                    "type": "string"
                },
                "friendlyName": {
                    "type": "string"
                }
            }
        },
        "UserTokenAPI": {
            "type": "object",
            "properties": {
                "serviceId": {
                    "format": "uuid",
                    "type": "string"
                },
                "createdAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "updatedAt": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "UserTenantSettingsNotificationsAPI": {
            "type": "object",
            "properties": {
                "enableEmails": {
                    "type": "boolean"
                }
            }
        },
        "UserTenantAPIKey": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "apiKey": {
                    "type": "string"
                },
                "createdAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "tenantId": {
                    "format": "uuid",
                    "type": "string"
                }
            }
        },
        "UserTenantSettingsAPI": {
            "type": "object",
            "properties": {
                "notifications": {
                    "$ref": "#/definitions/UserTenantSettingsNotificationsAPI"
                },
                "enabledSSO": {
                    "type": "boolean"
                },
                "apiKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserTenantAPIKey"
                    }
                }
            }
        },
        "UserTenantAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                },
                "developerSummary": {
                    "type": "string"
                },
                "expiresAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "isExpired": {
                    "type": "boolean",
                    "readOnly": true
                },
                "lastLoggedInAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/UserTenantSettingsAPI"
                },
                "organization": {
                    "$ref": "#/definitions/OrganizationMinimal"
                },
                "roleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "isSso": {
                    "type": "boolean"
                }
            }
        },
        "UserAPI": {
            "type": "object",
            "properties": {
                "role": {
                    "$ref": "#/definitions/Role"
                },
                "isSso": {
                    "type": "boolean"
                },
                "tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserTokenAPI"
                    }
                },
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "createdAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationMinimal"
                    }
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserTenantAPI"
                    }
                }
            }
        },
        "UserAPIItemCollectionResponse": {
            "type": "object",
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserAPI"
                    },
                    "readOnly": true
                }
            }
        },
        "UserMeAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "createdAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationMinimal"
                    }
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserTenantAPI"
                    }
                }
            }
        },
        "UserMeUpdateRequest": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                }
            }
        },
        "CanvasSettings": {
            "type": "object",
            "properties": {
                "lineThickness": {
                    "format": "float",
                    "type": "number"
                },
                "mapElementColorStyle": {
                    "type": "string"
                }
            }
        },
        "UserSettingsAPI": {
            "type": "object",
            "properties": {
                "canvasSettings": {
                    "$ref": "#/definitions/CanvasSettings"
                }
            }
        },
        "OrganizationInvite": {
            "type": "object",
            "properties": {
                "organization": {
                    "$ref": "#/definitions/OrganizationMinimal"
                },
                "completedBy": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "completedAt": {
                    "format": "date-time",
                    "description": "When the invitation was either accepted or rejected",
                    "type": "string"
                },
                "invitedBy": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "invitedAt": {
                    "format": "date-time",
                    "description": "When the invitation was sent",
                    "type": "string"
                },
                "status": {
                    "description": "The current status of the invitation. Can be one of \"invited\", \"accepted\", \"rejected\", \"canceled\", or \"acknowledged\".",
                    "type": "string"
                },
                "tenant": {
                    "$ref": "#/definitions/TenantMinimalAPI"
                },
                "type": {
                    "description": "The type of invitation. Can be one of \"tenant\" or \"user\".",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "OrganizationInviteTenantRequest": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The name of the tenant to send the invite to",
                    "type": "string"
                },
                "id": {
                    "format": "uuid",
                    "description": "The ID of the tenant to send the invite to",
                    "type": "string"
                }
            }
        },
        "OrganizationInviteUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "The email of the user to send the invite to",
                    "type": "string"
                },
                "id": {
                    "format": "uuid",
                    "description": "The ID of the user to send the invite to",
                    "type": "string"
                }
            }
        },
        "OrganizationTenant": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The ID of the tenant",
                    "type": "string"
                },
                "developerName": {
                    "description": "The name of the tenant",
                    "type": "string"
                },
                "parentId": {
                    "format": "uuid",
                    "description": "The ID of the tenant's parent, if this is a subtenant",
                    "type": "string"
                },
                "addedAt": {
                    "format": "date-time",
                    "description": "When the tenant was added into the organization",
                    "type": "string"
                },
                "addedBy": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "subtenants": {
                    "description": "Any subtenants that belong to the tenant",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TenantMinimalAPI"
                    }
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The ID of the user to invite, if the user already exists",
                    "type": "string"
                },
                "email": {
                    "description": "The email address of the user to invite, if the user already exists, or if a new user needs to be invited.",
                    "type": "string"
                },
                "role": {
                    "description": "The role the user should have in the tenant",
                    "type": "string"
                }
            }
        },
        "OrganizationTenantCreationRequest": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The desired name of the tenant to create",
                    "type": "string"
                },
                "users": {
                    "description": "The users to add as members of the tenant",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/User"
                    }
                }
            }
        },
        "OrganizationUser": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The ID of the user",
                    "type": "string"
                },
                "email": {
                    "description": "The name of the user",
                    "type": "string"
                },
                "firstName": {
                    "description": "The first name of the user",
                    "type": "string"
                },
                "lastName": {
                    "description": "The last name of the user",
                    "type": "string"
                },
                "role": {
                    "description": "The user's role in the organization",
                    "type": "string"
                },
                "addedAt": {
                    "format": "date-time",
                    "description": "When the user was added into the organization",
                    "type": "string"
                },
                "addedBy": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "AppUser": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "AuditEventFlowResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "version": {
                    "format": "uuid",
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                }
            }
        },
        "AuditEvent": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "occurredAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "userId": {
                    "format": "uuid",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/AppUser"
                },
                "tenantId": {
                    "format": "uuid",
                    "type": "string"
                },
                "stateId": {
                    "format": "uuid",
                    "type": "string"
                },
                "flow": {
                    "$ref": "#/definitions/AuditEventFlowResponse"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                }
            }
        },
        "AuditEventItemCollectionResponse": {
            "type": "object",
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuditEvent"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user",
                        "nullable": true
                    }
                }
            }
        },
        "AssetAPI": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "modifiedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "publicUrl": {
                    "type": "string"
                },
                "size": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "AssetMoveRequestAPI": {
            "type": "object",
            "properties": {
                "oldKey": {
                    "description": "The key of the asset to move",
                    "type": "string"
                },
                "newKey": {
                    "description": "The key to move the asset to",
                    "type": "string"
                }
            }
        },
        "DependencyAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                },
                "developerSummary": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "friendlyType": {
                    "type": "string"
                },
                "dependsOnElementId": {
                    "format": "uuid",
                    "type": "string"
                },
                "dependsOnElementType": {
                    "type": "string"
                },
                "dependsOnElementDeveloperName": {
                    "type": "string"
                },
                "dependsOnElementDeveloperSummary": {
                    "type": "string"
                }
            }
        },
        "DependencyAPIItemCollectionResponse": {
            "type": "object",
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DependencyAPI"
                    },
                    "readOnly": true
                }
            }
        },
        "GroupAuthorizationGroupAPI": {
            "type": "object",
            "properties": {
                "authenticationId": {
                    "description": "The unique identifier to match the correct group. This is an external unique identifier based on the directory implementation of the Service.",
                    "type": "string"
                },
                "attribute": {
                    "description": "The unique attribute to match the correct group attribute. This enumeration is based on the directory implementation of the Service.",
                    "type": "string"
                },
                "attributeLabel": {
                    "type": "string"
                },
                "friendlyName": {
                    "type": "string"
                },
                "developerSummary": {
                    "type": "string"
                },
                "serviceElementId": {
                    "type": "string"
                }
            }
        },
        "GroupAuthorizationUserAPI": {
            "type": "object",
            "properties": {
                "authenticationId": {
                    "description": "The unique identifier to match the correct user. This is an external unique identifier based on the directory implementation of the Service.",
                    "type": "string"
                },
                "attribute": {
                    "description": "The unique attribute to match the correct user attribute. This enumeration is based on the directory implementation of the Service.",
                    "type": "string"
                },
                "runningUser": {
                    "type": "boolean"
                },
                "attributeLabel": {
                    "type": "string"
                },
                "friendlyName": {
                    "type": "string"
                },
                "developerSummary": {
                    "type": "string"
                },
                "serviceElementId": {
                    "type": "string"
                }
            }
        },
        "ValueElementIdAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the Value to be referenced with this identifier.",
                    "type": "string"
                },
                "typeElementPropertyId": {
                    "description": "The unique identifier for a property in the Value to be referenced with this identifier. This only applies for Values of type ContentObject.",
                    "type": "string"
                },
                "command": {
                    "description": "The command to execute as part of the Value reference. For certain objects, the command exposes additional properties that can be referenced.",
                    "type": "string"
                }
            }
        },
        "GroupAuthorizationLocationAPI": {
            "type": "object",
            "properties": {
                "developerName": {
                    "type": "string"
                },
                "developerSummary": {
                    "type": "string"
                },
                "valueElementToReferenceId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "attribute": {
                    "type": "string"
                }
            }
        },
        "GroupAuthorizationAPI": {
            "type": "object",
            "properties": {
                "serviceElementId": {
                    "description": "The unique identifier for the Service that this authorization configuration is associated. The Service must support identity.",
                    "type": "string"
                },
                "globalAuthenticationType": {
                    "description": "The global authentication type for this Flow.",
                    "type": "string"
                },
                "streamBehaviourType": {
                    "description": "The stream behaviour type for this Flow.",
                    "type": "string"
                },
                "showPagesAsReadOnly": {
                    "description": "Whether to display page fields as read only",
                    "type": "boolean"
                },
                "groups": {
                    "description": "The list of groups that are associated with this authorization configuration.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupAuthorizationGroupAPI"
                    }
                },
                "users": {
                    "description": "The list of users that are associated with this authorization configuration.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupAuthorizationUserAPI"
                    }
                },
                "locations": {
                    "description": "The list of locations that are associated with this authorization configuration.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupAuthorizationLocationAPI"
                    }
                }
            }
        },
        "FlowIdentityProviderAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "allowedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "FlowRequestAPI": {
            "type": "object",
            "properties": {
                "editingToken": {
                    "format": "uuid",
                    "description": "A unique token for this particular editing session",
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/FlowIdAPI"
                },
                "developerName": {
                    "description": "The developer name for the flow. When referencing flows by name, this is the name you should use in your referencing.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the Flow.",
                    "type": "string"
                },
                "startMapElementId": {
                    "description": "The unique identifier for the first element in the flow. This element is always of the `START` map element type.",
                    "type": "string"
                },
                "allowJumping": {
                    "description": "Indicates that the builder of the flow will allow users to jump to any position in the Flow regardless of outcomes and/or navigation.",
                    "type": "boolean"
                },
                "enableHistoricalNavigation": {
                    "description": "Indicates that the builder of the flow wants to enable/disable both the UI and api for historical navigation.",
                    "type": "boolean"
                },
                "stateExpirationLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "idleStateExpirationLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "authorization": {
                    "$ref": "#/definitions/GroupAuthorizationAPI"
                },
                "identityProvider": {
                    "$ref": "#/definitions/FlowIdentityProviderAPI"
                }
            }
        },
        "FlowResponseAPI": {
            "type": "object",
            "properties": {
                "dateCreated": {
                    "format": "date-time",
                    "description": "The date and time the flow was created at",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "description": "The date and time of the last modification to the flow",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "alertEmail": {
                    "description": "The email of the builder who activated the flow",
                    "type": "string"
                },
                "isActive": {
                    "description": "Indicates if this flow version is the active version.",
                    "type": "boolean"
                },
                "isDefault": {
                    "description": "Indicates if this flow version is the default version.",
                    "type": "boolean"
                },
                "comment": {
                    "description": "The activation comment provided by the builder, if given",
                    "type": "string"
                },
                "editingToken": {
                    "format": "uuid",
                    "description": "A unique token for this particular editing session",
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/FlowIdAPI"
                },
                "developerName": {
                    "description": "The developer name for the flow. When referencing flows by name, this is the name you should use in your referencing.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the Flow.",
                    "type": "string"
                },
                "startMapElementId": {
                    "description": "The unique identifier for the first element in the flow. This element is always of the `START` map element type.",
                    "type": "string"
                },
                "allowJumping": {
                    "description": "Indicates that the builder of the flow will allow users to jump to any position in the Flow regardless of outcomes and/or navigation.",
                    "type": "boolean"
                },
                "enableHistoricalNavigation": {
                    "description": "Indicates that the builder of the flow wants to enable/disable both the UI and api for historical navigation.",
                    "type": "boolean"
                },
                "stateExpirationLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "idleStateExpirationLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "authorization": {
                    "$ref": "#/definitions/GroupAuthorizationAPI"
                },
                "identityProvider": {
                    "$ref": "#/definitions/FlowIdentityProviderAPI"
                }
            }
        },
        "ElementAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "RuleAPI": {
            "type": "object",
            "properties": {
                "leftValueElementToReferenceId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "criteriaType": {
                    "description": "The criteria that should be used when evaluating this rule: e.g. EQUAL",
                    "type": "string"
                },
                "rightValueElementToReferenceId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "leftValueElementToReferenceDeveloperName": {
                    "type": "string"
                },
                "rightValueElementToReferenceDeveloperName": {
                    "type": "string"
                },
                "criteriaTypeFriendly": {
                    "type": "string"
                }
            }
        },
        "ComparisonAPI": {
            "type": "object",
            "properties": {
                "comparisonType": {
                    "description": "The comparison to use when evaluating the immediate child rules associated with this comparison object.",
                    "type": "string"
                },
                "rules": {
                    "description": "The list of rules that need to be evaluated for this outcome to be selected.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RuleAPI"
                    }
                },
                "comparisons": {
                    "description": "The list of child comparisons that need to be evaluated for this outcome to be selected. The comparison\r\nobject is recursive allowing rules to be nested: e.g. ({a} > {b} OR {c} <= {d}) AND {b} == {f}",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ComparisonAPI"
                    }
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which the comparison should be evaluated with respect to its peers. The lowest number is evaluated first.",
                    "type": "integer"
                }
            }
        },
        "FlowOutAPI": {
            "type": "object",
            "properties": {
                "valueElementStateId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "valueElementFlowId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "flowId": {
                    "$ref": "#/definitions/FlowIdAPI"
                },
                "valueElementExternalIdentifierId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                }
            }
        },
        "ControlPointAPI": {
            "type": "object",
            "properties": {
                "x": {
                    "format": "int32",
                    "type": "integer"
                },
                "y": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "OutcomeAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the outcome. This property is created by the service.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name to help identify this outcome in tooling and APIs.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the outcome.",
                    "type": "string"
                },
                "label": {
                    "description": "The label that should appear with the outcome. For UI situations, this is typically the text that will\r\nappear on the button.",
                    "type": "string"
                },
                "nextMapElementId": {
                    "description": "The unique identifier for the next map element in the flow that should be executed if this outcome is\r\nselected.",
                    "type": "string"
                },
                "pageActionType": {
                    "description": "Determines if the data collected in this map element should be saved, and the type of validation that should\r\nbe applied when saving.",
                    "type": "string"
                },
                "isBulkAction": {
                    "description": "Indicates that this outcome should be treated as a “bulk” operation.",
                    "type": "boolean"
                },
                "pageActionBindingType": {
                    "description": "An arbitrary string value that indicates the type of button the outcome represents. This indicates to UX\r\ndesigners how they should render the button to running users.",
                    "type": "string"
                },
                "pageObjectBindingId": {
                    "description": "The unique identifier for the page container or component this outcome should be bound to. If you bind an\r\noutcome to a container or component, it can also indicate additional functionality: e.g.\r\n<code>isBulkAction</code>, etc. It also helps player designers layout the page.",
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which the outcomes should be rendered relative to its peers. The lowest number is rendered first.",
                    "type": "integer"
                },
                "comparison": {
                    "$ref": "#/definitions/ComparisonAPI"
                },
                "flowOut": {
                    "$ref": "#/definitions/FlowOutAPI"
                },
                "controlPoints": {
                    "description": "The array of control points (or “kinks”) in the outcome arrow as it appears in the flow diagram. If there\r\nare no control points, it is assumed the arrow for the outcome points directly from this map element to the\r\nnext map element.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ControlPointAPI"
                    }
                },
                "nextMapElementDeveloperName": {
                    "type": "string"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "className": {
                    "description": "A space separated string of CSS classes to be applied to the outcome when rendering.",
                    "type": "string"
                }
            }
        },
        "ValueElementInSubflowIdAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The unique identifier for the Value to be referenced with this identifier.",
                    "type": "string"
                }
            }
        },
        "SubflowArgumentAPI": {
            "type": "object",
            "properties": {
                "valueElementInSubflowId": {
                    "$ref": "#/definitions/ValueElementInSubflowIdAPI"
                },
                "valueElementToApplyId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                }
            }
        },
        "SubflowAPI": {
            "type": "object",
            "properties": {
                "flowId": {
                    "$ref": "#/definitions/FlowIdAPI"
                },
                "arguments": {
                    "description": "The list of arguments passed in a subflow call",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubflowArgumentAPI"
                    }
                },
                "restoreValuesOnJump": {
                    "description": "Indicates if on jumping specified by the selectedMapElementPath property (so called \"long jump\"), the Engine should restore value elements from the archived frame\r\nwhen invoking this Subflow map element for the second (or more) time",
                    "type": "boolean"
                },
                "returnValuesOnJump": {
                    "description": "Indicates if on jumping specified by the selectedMapElementPath property (so called \"long jump\"), the Engine should return value elements to the parent",
                    "type": "boolean"
                },
                "flowDeveloperName": {
                    "description": "The developer name of the flow that is called as subflow",
                    "type": "string"
                }
            }
        },
        "WaitAPI": {
            "type": "object",
            "properties": {
                "days": {
                    "format": "int32",
                    "description": "The number of days this wait is configured to wait for before proceeding.",
                    "type": "integer"
                },
                "hours": {
                    "format": "int32",
                    "description": "The number of hours this wait is configured to wait for before proceeding.",
                    "type": "integer"
                },
                "minutes": {
                    "format": "int32",
                    "description": "The number of minutes this wait is configured to wait for before proceeding.",
                    "type": "integer"
                },
                "seconds": {
                    "format": "int32",
                    "description": "The number of seconds this wait is configured to wait for before proceeding.",
                    "type": "integer"
                },
                "relative": {
                    "description": "The time to wait expressed as a phrase relative to the current time at execution. Such as \"In 2 days\"",
                    "type": "string"
                },
                "absoluteDate": {
                    "format": "date-time",
                    "description": "A fixed date and time whereafter the wait will be deemed complete.",
                    "type": "string"
                }
            }
        },
        "MapElementAPI": {
            "type": "object",
            "properties": {
                "groupElementId": {
                    "description": "The unique identifier for the Group that contains this Map Element. If a Map Element is inside a Group, it inherits certain behaviors of the parent Group. For example, a Swimlane Group wraps all child Map Elements in a security context.",
                    "type": "string"
                },
                "x": {
                    "format": "int32",
                    "description": "The x location of the Map Element on the Flow diagram.",
                    "type": "integer"
                },
                "y": {
                    "format": "int32",
                    "description": "The y location of the Map Element on the Flow diagram.",
                    "type": "integer"
                },
                "pageElementId": {
                    "type": "string"
                },
                "pageElementDeveloperName": {
                    "type": "string"
                },
                "outcomes": {
                    "description": "The list of outcomes that are available for this Map Element. An Outcome is used to connect the flow of execution from one Map Element in the Flow to another. An Outcome can take the form of a Page button, but also define system steps such as rules.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutcomeAPI"
                    }
                },
                "subflow": {
                    "$ref": "#/definitions/SubflowAPI"
                },
                "wait": {
                    "$ref": "#/definitions/WaitAPI"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "GroupElementAPI": {
            "type": "object",
            "properties": {
                "groupElementId": {
                    "description": "The unique identifier for the group element that holds this group element.",
                    "type": "string"
                },
                "x": {
                    "format": "int32",
                    "description": "The x location of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "y": {
                    "format": "int32",
                    "description": "The y location of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "height": {
                    "format": "int32",
                    "description": "The height of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "width": {
                    "format": "int32",
                    "description": "The width of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "authorization": {
                    "$ref": "#/definitions/GroupAuthorizationAPI"
                },
                "isOpen": {
                    "description": "Is the Group open in the buildtime editor. default: true",
                    "type": "boolean"
                },
                "identityProvider": {
                    "$ref": "#/definitions/FlowIdentityProviderAPI"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "FlowGraphRequestAPI": {
            "type": "object",
            "properties": {
                "mapElements": {
                    "description": "An array of map elements that are part of the flow graph.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MapElementAPI"
                    }
                },
                "groupElements": {
                    "description": "An array of group elements that are part of the flow graph.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupElementAPI"
                    }
                },
                "editingToken": {
                    "format": "uuid",
                    "description": "A unique token for this particular editing session",
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/FlowIdAPI"
                },
                "developerName": {
                    "description": "The developer name for the flow. When referencing flows by name, this is the name you should use in your referencing.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the Flow.",
                    "type": "string"
                },
                "startMapElementId": {
                    "description": "The unique identifier for the first element in the flow. This element is always of the `START` map element type.",
                    "type": "string"
                },
                "allowJumping": {
                    "description": "Indicates that the builder of the flow will allow users to jump to any position in the Flow regardless of outcomes and/or navigation.",
                    "type": "boolean"
                },
                "enableHistoricalNavigation": {
                    "description": "Indicates that the builder of the flow wants to enable/disable both the UI and api for historical navigation.",
                    "type": "boolean"
                },
                "stateExpirationLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "idleStateExpirationLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "authorization": {
                    "$ref": "#/definitions/GroupAuthorizationAPI"
                },
                "identityProvider": {
                    "$ref": "#/definitions/FlowIdentityProviderAPI"
                }
            }
        },
        "FlowGraphResponseAPI": {
            "type": "object",
            "properties": {
                "tenantId": {
                    "description": "The unique identifier for the tenant holding the graph.",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "type": "string"
                },
                "mapElements": {
                    "description": "An array of map elements that are part of the flow graph.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MapElementAPI"
                    }
                },
                "groupElements": {
                    "description": "An array of group elements that are part of the flow graph.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupElementAPI"
                    }
                },
                "editingToken": {
                    "format": "uuid",
                    "description": "A unique token for this particular editing session",
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/FlowIdAPI"
                },
                "developerName": {
                    "description": "The developer name for the flow. When referencing flows by name, this is the name you should use in your referencing.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the Flow.",
                    "type": "string"
                },
                "startMapElementId": {
                    "description": "The unique identifier for the first element in the flow. This element is always of the `START` map element type.",
                    "type": "string"
                },
                "allowJumping": {
                    "description": "Indicates that the builder of the flow will allow users to jump to any position in the Flow regardless of outcomes and/or navigation.",
                    "type": "boolean"
                },
                "enableHistoricalNavigation": {
                    "description": "Indicates that the builder of the flow wants to enable/disable both the UI and api for historical navigation.",
                    "type": "boolean"
                },
                "stateExpirationLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "idleStateExpirationLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "authorization": {
                    "$ref": "#/definitions/GroupAuthorizationAPI"
                },
                "identityProvider": {
                    "$ref": "#/definitions/FlowIdentityProviderAPI"
                }
            }
        },
        "FlowGraphElementIDRequestAPI": {
            "type": "object",
            "properties": {
                "mapElementIds": {
                    "description": "An array of map elements ids that exist in the flow graph.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupElementIds": {
                    "description": "An array of group elements ids that exist in the flow graph.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DoubleValueElementIdAPIOneOf": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "object",
                    "readOnly": true
                },
                "index": {
                    "format": "int32",
                    "type": "integer",
                    "readOnly": true
                },
                "isT0": {
                    "type": "boolean",
                    "readOnly": true
                },
                "isT1": {
                    "type": "boolean",
                    "readOnly": true
                },
                "asT0": {
                    "format": "double",
                    "type": "number",
                    "readOnly": true
                },
                "asT1": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                }
            }
        },
        "OperationAPI": {
            "type": "object",
            "properties": {
                "valueElementToApplyId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "valueElementToReferenceId": {
                    "$ref": "#/definitions/DoubleValueElementIdAPIOneOf"
                },
                "macroElementToExecuteId": {
                    "description": "The macro that should be executed for this operation.",
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which the operations should be executed. The lowest number is executed first.",
                    "type": "integer"
                },
                "disabled": {
                    "description": "Whether the operation is disabled or not",
                    "type": "boolean"
                },
                "macroElementToExecuteDeveloperName": {
                    "type": "string"
                },
                "valueElementToApplyDeveloperName": {
                    "type": "string"
                },
                "valueElementToApplyPropertyDeveloperName": {
                    "type": "string"
                },
                "valueElementToReferenceDeveloperName": {
                    "type": "string"
                },
                "valueElementToReferencePropertyDeveloperName": {
                    "type": "string"
                },
                "valueElementToApplyCommand": {
                    "type": "string"
                },
                "valueElementToReferenceCommand": {
                    "type": "string"
                },
                "valueElementToApplyCommandFriendly": {
                    "type": "string"
                },
                "valueElementToReferenceCommandFriendly": {
                    "type": "string"
                },
                "valueElementToApplyContentType": {
                    "type": "string"
                },
                "valueElementToApplyPropertyContentType": {
                    "type": "string"
                },
                "valueElementToApplyTypeElementId": {
                    "type": "string"
                },
                "valueElementToReferenceContentType": {
                    "type": "string"
                },
                "valueElementToReferencePropertyContentType": {
                    "type": "string"
                },
                "valueElementToReferenceTypeElementId": {
                    "type": "string"
                },
                "valueElementToApplySortById": {
                    "type": "string"
                },
                "valueElementToApplySortByDeveloperName": {
                    "type": "string"
                },
                "valueElementToApplySortDirection": {
                    "type": "string"
                }
            }
        },
        "ListenerAPI": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "A name for the Listener. This is useful for keeping track of the Listener in the tooling and API.",
                    "type": "string"
                },
                "serviceElementId": {
                    "description": "The ID of the service that this listener is associated with. The service must support listening to the\r\nobject you've selected to listen to.",
                    "type": "string"
                },
                "listenerType": {
                    "description": "The type of events being listened for. The value depends on the service implementation. Builders should\r\nrefer to the documentation of the service being used.",
                    "type": "string"
                },
                "valueElementToReferenceForListeningId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "attributes": {
                    "description": "Arbitrary key value pairs that may help the service execute the listener.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "MessageInputAPI": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The developer name for the input defined by the Service definition of this message action. This name will be used by the Service Implementation to match which value is being assigned.",
                    "type": "string"
                },
                "contentType": {
                    "description": "The content type for the message input as specified by the Service.",
                    "type": "string"
                },
                "typeElementId": {
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which this input should appear to an person building Flows.",
                    "type": "integer"
                },
                "valueElementToReferenceDeveloperName": {
                    "type": "string"
                },
                "typeElementDeveloperName": {
                    "type": "string"
                },
                "valueElementToReferenceId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                }
            }
        },
        "MessageOutputAPI": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The developer name for the output defined by the Service definition of this message action. This name will be used by the Service Implementation to match which value is being sent back.",
                    "type": "string"
                },
                "contentType": {
                    "description": "The content type for this output as provided by the Service.",
                    "type": "string"
                },
                "typeElementId": {
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which this output should appear to Flow builders.",
                    "type": "integer"
                },
                "valueElementToReferenceDeveloperName": {
                    "type": "string"
                },
                "typeElementDeveloperName": {
                    "type": "string"
                },
                "valueElementToApplyId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                }
            }
        },
        "MessageActionAPI": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The developer name to help identify this message action in tooling and APIs.",
                    "type": "string"
                },
                "serviceElementId": {
                    "description": "The ID of the service that this message action will be executed against. The service also defines the list\r\ninputs/outputs that need to be configured for this message action.",
                    "type": "string"
                },
                "serviceElementDeveloperName": {
                    "description": "The name of the service that this message action will be executed against.",
                    "type": "string"
                },
                "uriPart": {
                    "description": "The unique URI part that should be used when invoking the service. The URI part will inform the service\r\nimplementation which message action you are executing against.",
                    "type": "string"
                },
                "inputs": {
                    "description": "The list of message inputs that should be sent to the service when this action is invoked. The list of\r\ninputs is defined by the service.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MessageInputAPI"
                    }
                },
                "outputs": {
                    "description": "The list of message outputs that should be sent back from the service and applied to values in the executing\r\nflow state. The list of outputs is defined by the service.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MessageOutputAPI"
                    }
                },
                "attributes": {
                    "description": "Arbitrary key value pairs that may help the service execute the message action.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which the message action should be performed in relation to other message actions. If message\r\nactions have the same order, they will be performed in parallel to improve flow performance.",
                    "type": "integer"
                },
                "serviceActionName": {
                    "type": "string"
                },
                "disabled": {
                    "description": "Whether the message action is disabled or not",
                    "type": "boolean"
                },
                "selectedOutcomeId": {
                    "type": "string"
                }
            }
        },
        "ListFilterOrderByConfigAPI": {
            "type": "object",
            "properties": {
                "orderByTypeElementPropertyId": {
                    "description": "The unique identifier for the property in the Type (associated with this filter) that should be used for ordering the results.",
                    "type": "string"
                },
                "orderByDirectionType": {
                    "description": "The direction in which to order the results.",
                    "type": "string"
                }
            }
        },
        "ListFilterSearchCriteriaConfigAPI": {
            "type": "object",
            "properties": {
                "columnTypeElementPropertyId": {
                    "description": "The unique identifier for the column in the bound component data to filter by.",
                    "type": "string"
                }
            }
        },
        "ListFilterPropertyConfigAPI": {
            "type": "object",
            "properties": {
                "typeElementPropertyId": {
                    "format": "uuid",
                    "description": "The ID of the property on the type element",
                    "type": "string"
                }
            }
        },
        "ListFilterWhereConfigAPI": {
            "type": "object",
            "properties": {
                "columnTypeElementPropertyId": {
                    "description": "The unique identifier for the column in the bound component data to filter by.",
                    "type": "string"
                },
                "criteriaType": {
                    "description": "The criteria to filter the list data by.",
                    "type": "string"
                },
                "criteriaTypeFriendly": {
                    "type": "string"
                },
                "valueElementToReferenceId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "columnTypeElementPropertyDeveloperName": {
                    "type": "string"
                },
                "valueElementToReferenceDeveloperName": {
                    "type": "string"
                }
            }
        },
        "ListFilterMinimalConfigAPI": {
            "type": "object",
            "properties": {
                "comparisonType": {
                    "description": "The comparison when evaluating the 'where' entries.  This is either \"AND\" or \"OR\" and we do not support nesting (just yet anyway).",
                    "type": "string"
                },
                "where": {
                    "description": "The filter criteria that should be applied during the lookup.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ListFilterWhereConfigAPI"
                    }
                },
                "listFilters": {
                    "description": "A list of nested minimal ListFilters that can be used for grouped ordering and comparisons",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ListFilterMinimalConfigAPI"
                    }
                }
            }
        },
        "ListFilterConfigAPI": {
            "type": "object",
            "properties": {
                "filterId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "orderByTypeElementPropertyId": {
                    "description": "The unique identifier for the property in the Type (associated with this filter) that should be used for ordering the results.",
                    "type": "string"
                },
                "orderByDirectionType": {
                    "description": "The direction in which to order the results.",
                    "type": "string"
                },
                "orderBy": {
                    "description": "The ordering clauses for the result set",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ListFilterOrderByConfigAPI"
                    }
                },
                "limit": {
                    "format": "int32",
                    "description": "The maximum number of results to return from the request.",
                    "type": "integer"
                },
                "filterByProvidedObjects": {
                    "description": "Use the list of provided objects as the filter for the lookup.  This allows us to refresh data that can be transient in the remote system.",
                    "type": "boolean"
                },
                "searchCriteria": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ListFilterSearchCriteriaConfigAPI"
                    }
                },
                "properties": {
                    "description": "A list of properties to select. Useful when it's not desirable to load the entire object, for performance\r\nand efficiency.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ListFilterPropertyConfigAPI"
                    }
                },
                "comparisonType": {
                    "description": "The comparison when evaluating the 'where' entries.  This is either \"AND\" or \"OR\" and we do not support nesting (just yet anyway).",
                    "type": "string"
                },
                "where": {
                    "description": "The filter criteria that should be applied during the lookup.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ListFilterWhereConfigAPI"
                    }
                },
                "listFilters": {
                    "description": "A list of nested minimal ListFilters that can be used for grouped ordering and comparisons",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ListFilterMinimalConfigAPI"
                    }
                }
            }
        },
        "CommandAPI": {
            "type": "object",
            "properties": {
                "commandType": {
                    "description": "The type of command to be executed.",
                    "type": "string"
                },
                "properties": {
                    "description": "Additional key value pairs that may help the Command execute.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "ObjectDataRequestConfigAPI": {
            "description": "This object stores the configuration information we need to make object data requests as part of a map element request or\r\nas part of a form field.",
            "type": "object",
            "properties": {
                "typeElementBindingId": {
                    "description": "The unique identifier for the binding that should be used on the provided Type.",
                    "type": "string"
                },
                "typeElementId": {
                    "description": "The unique identifier for the Type that will define the structure of the data returned by this request.",
                    "type": "string"
                },
                "listFilter": {
                    "$ref": "#/definitions/ListFilterConfigAPI"
                },
                "command": {
                    "$ref": "#/definitions/CommandAPI"
                },
                "typeElementDeveloperName": {
                    "type": "string"
                }
            }
        },
        "DataActionAPI": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The developer name to help identify this data action in tooling and APIs.",
                    "type": "string"
                },
                "crudOperationType": {
                    "description": "The operation (<code>SAVE</code>, <code>LOAD</code> or <code>DELETE</code>) that should be performed on the\r\nobjects provided in this data action.",
                    "type": "string"
                },
                "isSmartSave": {
                    "description": "Indicates if the data should saved using tracked changes in the data. Smart save must be supported in the\r\nunderlying service as the platform will only send changed data back to the service rather than the complete\r\nobject or list.",
                    "type": "boolean"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which the data action should be performed in relation to other data actions. The order must be\r\ngreater than or equal to zero. If data actions have the same order, they will be performed in parallel to\r\nimprove flow performance.",
                    "type": "integer"
                },
                "disabled": {
                    "description": "Whether the data action is disabled or not",
                    "type": "boolean"
                },
                "valueElementToReferenceId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "valueElementToApplyId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "objectDataRequest": {
                    "$ref": "#/definitions/ObjectDataRequestConfigAPI"
                }
            }
        },
        "NavigationOverrideAPI": {
            "type": "object",
            "properties": {
                "navigationElementId": {
                    "description": "The unique identifier for the navigation this override is referencing.",
                    "type": "string"
                },
                "navigationItemId": {
                    "description": "The unique identifier for the specific navigation item in the navigation being referenced.",
                    "type": "string"
                },
                "isEnabled": {
                    "description": "Indicates if the navigation item being referenced should be enabled. If the navigation item has\r\n<code>isEnabled</code> set to <code>false</code>, the user will see the navigation item, but it will not\r\nfunction.",
                    "type": "boolean"
                },
                "isVisible": {
                    "description": "Indicates if the navigation item being referenced should be visible. If the navigation item has\r\n<code>isVisible</code> set to <code>false</code>, it will no longer appear to the user in the navigation.\r\nThis will include child navigation items.",
                    "type": "boolean"
                },
                "locationMapElementId": {
                    "description": "The map element that the navigation item should point to based on this override.",
                    "type": "string"
                },
                "locationMapElementDeveloperName": {
                    "description": "The name of the map element that the navigation item should point to based on this override.",
                    "type": "string"
                },
                "navigationElementDeveloperName": {
                    "description": "The name of the navigation being referenced.",
                    "type": "string"
                },
                "navigationItemDeveloperName": {
                    "description": "The name of the navigation item in the navigation being referenced.",
                    "type": "string"
                }
            }
        },
        "VoteAPI": {
            "type": "object",
            "properties": {
                "voteType": {
                    "description": "The type of Vote this metadata represents. The <code>voteType</code> is determined by the service.",
                    "type": "string"
                },
                "minimumCount": {
                    "format": "int32",
                    "description": "The minimum number of users that need to click on an outcome before the flow will proceed to the next step.",
                    "type": "integer"
                },
                "minimumPercent": {
                    "format": "int32",
                    "description": "The minimum percentage of users that need to click on an outcome before the flow will proceed to the next\r\nstep. The percentage is determined based on the authorization context of either the flow or the group\r\nswimlane (if the map element is contained in a swimlane).",
                    "type": "integer"
                },
                "attributes": {
                    "description": "Arbitrary key value pairs that may help the service execute the vote. Use attributes to extend the vote\r\nmetadata with implementation specific settings.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "MapElementResponseAPI": {
            "type": "object",
            "properties": {
                "dateCreated": {
                    "format": "date-time",
                    "description": "The date the Map Element was first created.",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "description": "The date the last modification was made to the Map Element.",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "operations": {
                    "description": "The list of operations that should be performed when this Map Element executes. Operations are used to change the value of Values in the executing Flow (State).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OperationAPI"
                    }
                },
                "listeners": {
                    "description": "The list of listeners that should be registered when this Map Element executes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ListenerAPI"
                    }
                },
                "viewMessageAction": {
                    "$ref": "#/definitions/MessageActionAPI"
                },
                "messageActions": {
                    "description": "The list of message actions that should be executed when this Map Element executes. The message action objects define the interface of inputs/outputs for calling against each Service message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MessageActionAPI"
                    }
                },
                "dataActions": {
                    "description": "The list of data actions that should be executed when this map element executes. The data action objects\r\ndefine the values and bindings that should be used to perform CRUD operations against each service and value.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataActionAPI"
                    }
                },
                "navigationOverrides": {
                    "description": "The list of navigation overrides that should be applied when this Map Element executes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NavigationOverrideAPI"
                    }
                },
                "vote": {
                    "$ref": "#/definitions/VoteAPI"
                },
                "clearNavigationOverrides": {
                    "type": "boolean"
                },
                "postUpdateToStream": {
                    "description": "Indicates if this Map Element should post an update to the collaboration stream.",
                    "type": "boolean"
                },
                "userContent": {
                    "description": "The content that should be shown to the user at this step in the Flow. This property should only be used for very simple Flows and informational UI. For anything more than simple messaging, use the Page and associate it with this Map Element using the pageElementId property.",
                    "type": "string"
                },
                "userContentDateModified": {
                    "format": "date-time",
                    "description": "The date the Map Elements usercontent was modified.",
                    "type": "string"
                },
                "statusMessage": {
                    "description": "The content that should be shown to the user while waiting for a system step to complete.",
                    "type": "string"
                },
                "postUpdateMessage": {
                    "description": "The content of the message that should be posted to the collaboration stream.",
                    "type": "string"
                },
                "notAuthorizedMessage": {
                    "description": "The content that should be shown to the user if they are not authorized to take action on this Map Element.",
                    "type": "string"
                },
                "postUpdateWhenType": {
                    "description": "The point at which the post should be made to the collaboration stream.",
                    "type": "string"
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a Type with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements.",
                    "type": "boolean"
                },
                "groupElementId": {
                    "description": "The unique identifier for the Group that contains this Map Element. If a Map Element is inside a Group, it inherits certain behaviors of the parent Group. For example, a Swimlane Group wraps all child Map Elements in a security context.",
                    "type": "string"
                },
                "x": {
                    "format": "int32",
                    "description": "The x location of the Map Element on the Flow diagram.",
                    "type": "integer"
                },
                "y": {
                    "format": "int32",
                    "description": "The y location of the Map Element on the Flow diagram.",
                    "type": "integer"
                },
                "pageElementId": {
                    "type": "string"
                },
                "pageElementDeveloperName": {
                    "type": "string"
                },
                "outcomes": {
                    "description": "The list of outcomes that are available for this Map Element. An Outcome is used to connect the flow of execution from one Map Element in the Flow to another. An Outcome can take the form of a Page button, but also define system steps such as rules.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutcomeAPI"
                    }
                },
                "subflow": {
                    "$ref": "#/definitions/SubflowAPI"
                },
                "wait": {
                    "$ref": "#/definitions/WaitAPI"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                }
            }
        },
        "GroupElementResponseAPI": {
            "type": "object",
            "properties": {
                "dateCreated": {
                    "format": "date-time",
                    "description": "The date the Group was first created.",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "description": "The date the last modification was made to the Group.",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a group with the same developer name as the one provided\r\nand match them up by name as opposed to by ID.",
                    "type": "boolean"
                },
                "groupElementId": {
                    "description": "The unique identifier for the group element that holds this group element.",
                    "type": "string"
                },
                "x": {
                    "format": "int32",
                    "description": "The x location of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "y": {
                    "format": "int32",
                    "description": "The y location of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "height": {
                    "format": "int32",
                    "description": "The height of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "width": {
                    "format": "int32",
                    "description": "The width of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "authorization": {
                    "$ref": "#/definitions/GroupAuthorizationAPI"
                },
                "isOpen": {
                    "description": "Is the Group open in the buildtime editor. default: true",
                    "type": "boolean"
                },
                "identityProvider": {
                    "$ref": "#/definitions/FlowIdentityProviderAPI"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                }
            }
        },
        "FlowGraphElementResponseAPI": {
            "type": "object",
            "properties": {
                "mapElements": {
                    "description": "An array of map elements that are part of the flow graph.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MapElementResponseAPI"
                    }
                },
                "groupElements": {
                    "description": "An array of group elements that are part of the flow graph.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupElementResponseAPI"
                    }
                }
            }
        },
        "MapElementRequestAPI": {
            "type": "object",
            "properties": {
                "operations": {
                    "description": "The list of operations that should be performed when this Map Element executes. Operations are used to change the value of Values in the executing Flow (State).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OperationAPI"
                    }
                },
                "listeners": {
                    "description": "The list of listeners that should be registered when this Map Element executes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ListenerAPI"
                    }
                },
                "viewMessageAction": {
                    "$ref": "#/definitions/MessageActionAPI"
                },
                "messageActions": {
                    "description": "The list of message actions that should be executed when this Map Element executes. The message action objects define the interface of inputs/outputs for calling against each Service message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MessageActionAPI"
                    }
                },
                "dataActions": {
                    "description": "The list of data actions that should be executed when this map element executes. The data action objects\r\ndefine the values and bindings that should be used to perform CRUD operations against each service and value.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataActionAPI"
                    }
                },
                "navigationOverrides": {
                    "description": "The list of navigation overrides that should be applied when this Map Element executes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NavigationOverrideAPI"
                    }
                },
                "vote": {
                    "$ref": "#/definitions/VoteAPI"
                },
                "clearNavigationOverrides": {
                    "type": "boolean"
                },
                "postUpdateToStream": {
                    "description": "Indicates if this Map Element should post an update to the collaboration stream.",
                    "type": "boolean"
                },
                "userContent": {
                    "description": "The content that should be shown to the user at this step in the Flow. This property should only be used for very simple Flows and informational UI. For anything more than simple messaging, use the Page and associate it with this Map Element using the pageElementId property.",
                    "type": "string"
                },
                "userContentDateModified": {
                    "format": "date-time",
                    "description": "The date the Map Elements usercontent was modified.",
                    "type": "string"
                },
                "statusMessage": {
                    "description": "The content that should be shown to the user while waiting for a system step to complete.",
                    "type": "string"
                },
                "postUpdateMessage": {
                    "description": "The content of the message that should be posted to the collaboration stream.",
                    "type": "string"
                },
                "notAuthorizedMessage": {
                    "description": "The content that should be shown to the user if they are not authorized to take action on this Map Element.",
                    "type": "string"
                },
                "postUpdateWhenType": {
                    "description": "The point at which the post should be made to the collaboration stream.",
                    "type": "string"
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a Type with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements.",
                    "type": "boolean"
                },
                "groupElementId": {
                    "description": "The unique identifier for the Group that contains this Map Element. If a Map Element is inside a Group, it inherits certain behaviors of the parent Group. For example, a Swimlane Group wraps all child Map Elements in a security context.",
                    "type": "string"
                },
                "x": {
                    "format": "int32",
                    "description": "The x location of the Map Element on the Flow diagram.",
                    "type": "integer"
                },
                "y": {
                    "format": "int32",
                    "description": "The y location of the Map Element on the Flow diagram.",
                    "type": "integer"
                },
                "pageElementId": {
                    "type": "string"
                },
                "pageElementDeveloperName": {
                    "type": "string"
                },
                "outcomes": {
                    "description": "The list of outcomes that are available for this Map Element. An Outcome is used to connect the flow of execution from one Map Element in the Flow to another. An Outcome can take the form of a Page button, but also define system steps such as rules.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutcomeAPI"
                    }
                },
                "subflow": {
                    "$ref": "#/definitions/SubflowAPI"
                },
                "wait": {
                    "$ref": "#/definitions/WaitAPI"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "GroupElementRequestAPI": {
            "type": "object",
            "properties": {
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a group with the same developer name as the one provided\r\nand match them up by name as opposed to by ID.",
                    "type": "boolean"
                },
                "groupElementId": {
                    "description": "The unique identifier for the group element that holds this group element.",
                    "type": "string"
                },
                "x": {
                    "format": "int32",
                    "description": "The x location of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "y": {
                    "format": "int32",
                    "description": "The y location of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "height": {
                    "format": "int32",
                    "description": "The height of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "width": {
                    "format": "int32",
                    "description": "The width of the Group on the Flow diagram.",
                    "type": "integer"
                },
                "authorization": {
                    "$ref": "#/definitions/GroupAuthorizationAPI"
                },
                "isOpen": {
                    "description": "Is the Group open in the buildtime editor. default: true",
                    "type": "boolean"
                },
                "identityProvider": {
                    "$ref": "#/definitions/FlowIdentityProviderAPI"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "FlowGraphElementRequestAPI": {
            "type": "object",
            "properties": {
                "mapElements": {
                    "description": "An array of map elements that are part of the flow graph.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MapElementRequestAPI"
                    }
                },
                "groupElements": {
                    "description": "An array of group elements that are part of the flow graph.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupElementRequestAPI"
                    }
                }
            }
        },
        "PageTagAPI": {
            "type": "object",
            "properties": {
                "valueElementToReferenceId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "tagElementId": {
                    "description": "The unique identifier for the Tag that this tag is associated. This Tag will be used to provide the Tag name at runtime and also ensure Tag content and object type references are maintained.",
                    "type": "string"
                }
            }
        },
        "ValueToResetAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The reference to the Value that should be reset.",
                    "type": "string"
                },
                "resetType": {
                    "description": "The mode for resetting the value e.g CLEAR or DEFAULT_VALUE",
                    "type": "string"
                }
            }
        },
        "NavigationItemAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the NavigationItem. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests. This property is created by the service.",
                    "type": "string"
                },
                "locationMapElementId": {
                    "description": "The unique identifier for the Map Element that this NavigationItem \"points\" to.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the Navigation. This is useful for keeping track of the Navigation in the modeling tool and API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the Navigation.",
                    "type": "string"
                },
                "label": {
                    "description": "The label to display the user.",
                    "type": "string"
                },
                "navigationItems": {
                    "description": "The navigation items that are available for this NavigationItem. The navigation items are the \"links\" the user can use to navigate around your Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NavigationItemAPI"
                    }
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which this NavigationItem should appear in relation to other sibling NavigationItems.",
                    "type": "integer"
                },
                "tags": {
                    "description": "The list of tags that are associated with this NavigationItem.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageTagAPI"
                    }
                },
                "valuesToReset": {
                    "description": "The list of values to reset that are associated with this navigation.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ValueToResetAPI"
                    }
                }
            }
        },
        "NavigationElementResponseAPI": {
            "type": "object",
            "properties": {
                "dateCreated": {
                    "format": "date-time",
                    "description": "The date the Navigation was first created.",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "description": "The date the last modification was made to the Navigation.",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "label": {
                    "description": "The label to display to the user.",
                    "type": "string"
                },
                "navigationItems": {
                    "description": "The navigation items that are available for this navigation. The navigation items are the \"links\" the user\r\ncan use to navigate around your flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NavigationItemAPI"
                    }
                },
                "tags": {
                    "description": "The list of tags that are associated with this navigation.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageTagAPI"
                    }
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a navigation with the same developer name as the one\r\nprovided and match them up by name as opposed to by ID. This is useful when creating scripts to create\r\nflows, as you can use the <code>developerName</code> property as the reference as opposed to needing to know\r\nthe IDs of all created elements.",
                    "type": "boolean"
                },
                "persistState": {
                    "description": "Indicates if the platform should save state when navigating between elements",
                    "type": "boolean"
                },
                "persistValues": {
                    "description": "Indicates if the platform should save values when navigating between elements",
                    "type": "boolean"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                }
            }
        },
        "PageContainerAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the page container. This property is created by the service.",
                    "type": "string"
                },
                "containerType": {
                    "description": "The type of container to render.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the page container. This will be used to identify the container in your layout, and\r\nthis can be used to ease the creation of the page metadata. Developers should ensure that the developer name\r\nis unique for the page.",
                    "type": "string"
                },
                "label": {
                    "description": "The label for this particular container. This will appear as a title heading to the running user(s).",
                    "type": "string"
                },
                "pageContainers": {
                    "description": "The tree hierarchy of page containers that are children of this page container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageContainerAPI"
                    }
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which the page container should be rendered relative to its peers. The lowest number is\r\nrendered first.",
                    "type": "integer"
                },
                "attributes": {
                    "description": "Arbitrary key value pairs that may help the container render/execute. Use attributes to extend the page\r\ncontainer metadata with implementation specific settings.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tags": {
                    "description": "The list of page tags that allow additional metadata to be applied to the page container. Conceptually tags\r\ncan be used to mimic HTML and CSS but can also be used to provide data to enrich functionality of the page\r\ncontainer.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageTagAPI"
                    }
                }
            }
        },
        "FileDataRequestConfigAPI": {
            "type": "object",
            "properties": {
                "serviceElementId": {
                    "description": "The Id for the service element associated with this file data.  The service element will give us the connection settings\r\nand allow us to validate various bits of info.",
                    "type": "string"
                },
                "resourcePath": {
                    "description": "The reference for the folder - this can be an identifier or a path - whatever the service implementation needs.",
                    "type": "string"
                },
                "resourceFile": {
                    "description": "The reference for the file - this can be an identifier or a file name - whatever the service implementation needs.",
                    "type": "string"
                }
            }
        },
        "PageComponentColumnAPI": {
            "type": "object",
            "properties": {
                "typeElementPropertyId": {
                    "description": "The unique identifier for the property in that should be displayed in this column. This pertains to the Type for the bound data or the object data request - not the underlying value binding.",
                    "type": "string"
                },
                "isBound": {
                    "description": "Indicates that this specific column is bound to the underlying value binding. This can only be true if the content type of this property is the same as the content type of the bound value. It is also not valid for this to be true for multiselect data components.",
                    "type": "boolean"
                },
                "boundTypeElementPropertyId": {
                    "description": "The unique identifier for the property in the value binding that should be used to store the selected value. This pertains to the Type for the value binding, not the Type for the bound data or the object data request.",
                    "type": "string"
                },
                "label": {
                    "description": "The label that should be used for this column. Often the label is displayed as the column header, but for mobile applications, this may be used inline with the object entry data.",
                    "type": "string"
                },
                "isDisplayValue": {
                    "description": "Indicates that this value should be shown in the UI to the end user.",
                    "type": "boolean"
                },
                "isEditable": {
                    "description": "Indicates that this value is editable inline in this component.",
                    "type": "boolean"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which the page component column should be rendered relative to its peers. The lowest number is rendered first.",
                    "type": "integer"
                },
                "typeElementPropertyToDisplayId": {
                    "type": "string"
                },
                "componentType": {
                    "type": "string"
                },
                "typeElementPropertyDeveloperName": {
                    "type": "string"
                }
            }
        },
        "PageComponentValidationType": {
            "format": "int32",
            "enum": [
                0,
                1,
                2
            ],
            "type": "integer"
        },
        "DoubleStringValueElementIdAPIOneOf": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "object",
                    "readOnly": true
                },
                "index": {
                    "format": "int32",
                    "type": "integer",
                    "readOnly": true
                },
                "isT0": {
                    "type": "boolean",
                    "readOnly": true
                },
                "isT1": {
                    "type": "boolean",
                    "readOnly": true
                },
                "isT2": {
                    "type": "boolean",
                    "readOnly": true
                },
                "asT0": {
                    "format": "double",
                    "type": "number",
                    "readOnly": true
                },
                "asT1": {
                    "type": "string",
                    "readOnly": true
                },
                "asT2": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                }
            }
        },
        "PageComponentValidationAPI": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/PageComponentValidationType"
                },
                "message": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/DoubleStringValueElementIdAPIOneOf"
                }
            }
        },
        "PageComponentAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the page component. This property is created by the service.",
                    "type": "string"
                },
                "isEditable": {
                    "description": "Indicates if the user is able to edit the information associated with this component. The editable status\r\ncan be altered by page conditions.",
                    "type": "boolean"
                },
                "valueElementValueBindingReferenceId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "valueElementDataBindingReferenceId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "objectDataRequest": {
                    "$ref": "#/definitions/ObjectDataRequestConfigAPI"
                },
                "fileDataRequest": {
                    "$ref": "#/definitions/FileDataRequestConfigAPI"
                },
                "imageUri": {
                    "description": "The URI of the image that should be presented to the running user(s) as part of this page component. This\r\nproperty will be parsed if value references are used in the URI.",
                    "type": "string"
                },
                "pageContainerId": {
                    "description": "The unique identifier for the page container this component should be rendered in.",
                    "type": "string"
                },
                "pageContainerDeveloperName": {
                    "description": "The unique developer name for the page container this component should be rendered in.",
                    "type": "string"
                },
                "developerName": {
                    "description": "We have a developer name field solely for external services, so they can match fields appropriately with\r\nrespect to form layouts for types.",
                    "type": "string"
                },
                "componentType": {
                    "description": "The type of component to render. Developers can define their own component types, but will need to make sure\r\nthese are then supported in the player.",
                    "type": "string"
                },
                "content": {
                    "description": "The content that should be presented to the running user(s) as part of this page component. This property\r\nwill be parsed if value references are used in the content.",
                    "type": "string"
                },
                "label": {
                    "description": "The label for this particular component. This will appear as a title heading to the running user(s).",
                    "type": "string"
                },
                "columns": {
                    "description": "The list of columns to show when rendering the data from an <code>objectDataRequest</code> or\r\n<code>valueElementDataBindingReferenceId</code> lookup.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageComponentColumnAPI"
                    }
                },
                "size": {
                    "format": "int32",
                    "description": "The number of characters that should be displayed for the page component.",
                    "type": "integer"
                },
                "maxSize": {
                    "format": "int32",
                    "description": "The maximum number of characters that can be entered by the running user(s) for this page component.",
                    "type": "integer"
                },
                "height": {
                    "format": "int32",
                    "description": "The height of this component. For form controls, this is the number of rows of characters to show. For image\r\ncomponents, this is the height in pixels of the image.",
                    "type": "integer"
                },
                "width": {
                    "format": "int32",
                    "description": "The width of this component. For form controls, this is the number of columns of characters to show. For\r\nimage components, this is the width in pixels of the image.",
                    "type": "integer"
                },
                "isRequired": {
                    "description": "Indicates if the user is required to complete the information associated with this component. The required\r\nstatus can be altered by page conditions.",
                    "type": "boolean"
                },
                "isMultiSelect": {
                    "description": "Indicates if the user can select more than one data object associated with this component. If the component\r\nsupports multiselection, then the bound value element must have a content type of <code>ContentList</code>.",
                    "type": "boolean"
                },
                "isSearchable": {
                    "description": "Indicates if the user is able to search using this component.",
                    "type": "boolean"
                },
                "hintValue": {
                    "description": "Specifies information that can be given to the user to help them complete the information associated with\r\nthis component. For form controls, this is typically text that's displayed inside the input that disappears\r\nwhen the user focuses on the component.",
                    "type": "string"
                },
                "helpInfo": {
                    "description": "Specifies information that can be given to the user to help them complete the information associated with\r\nthis component. For form controls, this is typically shown to the user when they hover over the component\r\nor click a help link beside the component.",
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which the page component should be rendered relative to its peers. The lowest number is\r\nrendered first.",
                    "type": "integer"
                },
                "attributes": {
                    "description": "Arbitrary key value pairs that may help the component render/execute. Use attributes to extend the page\r\ncomponent metadata with implementation specific settings.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tags": {
                    "description": "The list of page tags that allow additional metadata to be applied to the page component. Conceptually,\r\ntags can be used to mimic HTML and CSS but can also be used to provide data to enrich functionality of the\r\npage component.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageTagAPI"
                    }
                },
                "validations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageComponentValidationAPI"
                    }
                },
                "className": {
                    "description": "A space separated string of CSS classes to be applied to the component when rendering.",
                    "type": "string"
                },
                "row": {
                    "format": "int32",
                    "description": "Row position of a grid item (component).",
                    "type": "integer"
                },
                "column": {
                    "format": "int32",
                    "description": "Column position of a grid item (component).",
                    "type": "integer"
                },
                "rowSpan": {
                    "format": "int32",
                    "description": "Size of a grid item (component) measured in rows.",
                    "type": "integer"
                },
                "colSpan": {
                    "format": "int32",
                    "description": "Size of a grid item (component) measured in columns.",
                    "type": "integer"
                }
            }
        },
        "PageObjectReferenceAPI": {
            "type": "object",
            "properties": {
                "pageObjectReferenceId": {
                    "description": "The identifier for the field post save - this is used in place of the field reference.",
                    "type": "string"
                },
                "typeElementPropertyId": {
                    "description": "The identifier for any inner reference value references.  The Id in the form is not the shared element id but rather\r\nthe form element id.  However, for inner references, we can use the type element id as this is not specific to the shared\r\nelement binding - but rather the object or list type generically.",
                    "type": "string"
                },
                "pageObjectReferenceDeveloperName": {
                    "description": "The temporary field reference from the client application - pre-save.  The notation for this should be the fully qualified\r\npath from the root form: e.g. [Section Name].[Column Name].[Cell Name].[Field Name]",
                    "type": "string"
                },
                "valueElementToReferenceId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "metadataType": {
                    "description": "The meta-data to reference on the field:\r\nValue - the actual value of the field\r\nMetaData.Visible - indicates if the form element should be visible or not\r\nMetaData.Required - the required status of the input\r\nMetaData.Enabled - the enabled/disabled status of the input\r\nMetaData.Filter - only for lists - basically only show the entries that match a particular category (this will allow simply dynamic lists)\r\nMetaData.Validation - dynamically bind a validation rule to the input",
                    "type": "string"
                }
            }
        },
        "PageRuleAPI": {
            "type": "object",
            "properties": {
                "left": {
                    "$ref": "#/definitions/PageObjectReferenceAPI"
                },
                "criteriaType": {
                    "description": "The criteria that should be used when evaluating this rule: e.g. EQUAL",
                    "type": "string"
                },
                "right": {
                    "$ref": "#/definitions/PageObjectReferenceAPI"
                },
                "generatedSummary": {
                    "type": "string"
                }
            }
        },
        "PageOperationAssignmentAPI": {
            "type": "object",
            "properties": {
                "assignee": {
                    "$ref": "#/definitions/PageObjectReferenceAPI"
                },
                "assignor": {
                    "$ref": "#/definitions/PageObjectReferenceAPI"
                }
            }
        },
        "PageOperationFilterAPI": {
            "type": "object",
            "properties": {
                "pageComponentId": {
                    "description": "This is the reference field to apply the filter information contained in this action.",
                    "type": "string"
                },
                "pageComponentDeveloperName": {
                    "description": "A temporary reference to the field on which to apply this filter configuration.",
                    "type": "string"
                },
                "columnTypeElementPropertyId": {
                    "description": "The unique identifier for the column in the bound component data to filter by. This property should only be used when filtering components that are bound to lists stored in the engine state. For filtering asynchronous data, use the objectDataRequest property.",
                    "type": "string"
                },
                "criteriaType": {
                    "description": "The criteria to filter the list data by.",
                    "type": "string"
                },
                "filterValue": {
                    "$ref": "#/definitions/PageObjectReferenceAPI"
                },
                "objectDataRequest": {
                    "$ref": "#/definitions/ObjectDataRequestConfigAPI"
                }
            }
        },
        "PageOperationAPI": {
            "type": "object",
            "properties": {
                "assignment": {
                    "$ref": "#/definitions/PageOperationAssignmentAPI"
                },
                "filter": {
                    "$ref": "#/definitions/PageOperationFilterAPI"
                },
                "generatedSummary": {
                    "type": "string"
                }
            }
        },
        "PageConditionAPI": {
            "type": "object",
            "properties": {
                "pageRules": {
                    "description": "The list of page rules that should be evaluated for this condition. If the page rules evaluate to\r\n<code>true</code>, the condition will execute the associated page operations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageRuleAPI"
                    }
                },
                "comparisonType": {
                    "description": "The comparison to use when evaluating the page rules associated with this page condition.",
                    "type": "string"
                },
                "pageOperations": {
                    "description": "These are the actions to be performed based on the above rules evaluating to true.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageOperationAPI"
                    }
                },
                "generatedSummary": {
                    "type": "string"
                }
            }
        },
        "PageElementResponseAPI": {
            "type": "object",
            "properties": {
                "dateCreated": {
                    "format": "date-time",
                    "description": "The date the Page Element was first created.",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "description": "The date the last modificiation was made to the Page Element.",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "label": {
                    "description": "The label for the page element. This is usually used as the title of the page.",
                    "type": "string"
                },
                "pageContainers": {
                    "description": "The tree hierarchy of page containers that define the scaffolding of the page layout. Conceptually, page\r\ncontainers are similar to HTML5 <code>div</code> tags. If no page containers are provided, it is assumed\r\nthat all components will be oriented in a vertical flow layout.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageContainerAPI"
                    }
                },
                "pageComponents": {
                    "description": "The list of components to be embedded on the page. Each component is associated with a page container for\r\nrelative positioning information. Conceptually, page containers are similar to HTML5 <code>form</code>\r\ncontrols and/or specific layout blocks containing images or content.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageComponentAPI"
                    }
                },
                "pageConditions": {
                    "description": "The list of page conditions that set out the rules that should be evaluated and the actions that should be\r\ntaken if those rules evaluate to <code>true</code>. Page conditions make it possible to define complex UI\r\nevent models.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageConditionAPI"
                    }
                },
                "stopConditionsOnFirstTrue": {
                    "description": "Indicates if the engine should continue to execute rules and actions on the page if a condition evaluates\r\nto <code>true</code>. This makes it possible to deal with page rules that may conflict if all run for all\r\nevents on the page.",
                    "type": "boolean"
                },
                "saveHiddenInputs": {
                    "description": "Indicates if page components that are not visible should still save their input to state",
                    "type": "boolean"
                },
                "attributes": {
                    "description": "Key value pairs that provide additional information for the page layout to be rendered. Builders should\r\nrefer to the documentation of the UI code being used.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tags": {
                    "description": "The list of page tags that allow additional metadata to be applied to various page objects: components,\r\ncontrols and the overall page. Conceptually tags can be used to mimic HTML and CSS but can also be used to\r\nprovide data to enrich functionality on the page.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageTagAPI"
                    }
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a page element with the same developer name as the one\r\nprovided and match them up by name as opposed to by ID. This is useful when creating scripts to create\r\nflows, as you can use the <code>developerName</code> property as the reference as opposed to needing to\r\nknow the IDs of all created elements.",
                    "type": "boolean"
                },
                "modernPageLayout": {
                    "description": "Indicates if the page is using the modern layout based on the CSS grid.",
                    "type": "boolean"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                }
            }
        },
        "ValueElementResponseAPI": {
            "type": "object",
            "properties": {
                "dateCreated": {
                    "format": "date-time",
                    "description": "The date the Value was first created.",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "description": "The date the last modification was made to the Value.",
                    "type": "string"
                },
                "isFixed": {
                    "description": "Indicates if the value of the Value can be changed by operations in the Flow or from outside systems. If this property is set to 'true', the Value will act like a 'constant' - i.e. it can't be changed by anyone except the Flow author at design time.",
                    "type": "boolean"
                },
                "isEncrypted": {
                    "type": "boolean"
                },
                "isVersionless": {
                    "type": "boolean"
                },
                "access": {
                    "description": "Sets the level of access this Value has to change. In many situations, Values can only be changed by the operations defined in your Flow and the value is not exposed outside of the Flow. Alternatively, you may wish to allow the value of the Value to be assigned at initialization.",
                    "type": "string"
                },
                "contentType": {
                    "description": "The type of content the Value holds.",
                    "type": "string"
                },
                "contentFormat": {
                    "type": "string"
                },
                "defaultContentValue": {
                    "description": "The default content value for the Value before any operations have been performed. This is for primitive Values.",
                    "type": "string"
                },
                "defaultObjectData": {
                    "description": "The default object data for the Value before any operations have been performed. This is for Object and List Values.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectAPI"
                    }
                },
                "initializationOperations": {
                    "description": "The operations that should be performed when the object is initialized. Initialization operations are only appropriate for Values of content type ContentObject.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OperationAPI"
                    }
                },
                "typeElementId": {
                    "description": "The unique identifier for the Type and object or list data must adhere to in structure (the Type basically defines the 'interface' that all objects and lists stored in this Value must implement). This property is only applicable for ContentObject and ContentList content types.",
                    "type": "string"
                },
                "typeElementDeveloperName": {
                    "type": "string"
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a Value with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements.",
                    "type": "boolean"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "MacroElementResponseAPI": {
            "type": "object",
            "properties": {
                "dateCreated": {
                    "format": "date-time",
                    "description": "The date the Macro was first created.",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "description": "The date the last modification was made to the Macro.",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "code": {
                    "description": "The JavaScript code for the Macro.",
                    "type": "string"
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a Macro with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements.",
                    "type": "boolean"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                }
            }
        },
        "ServiceValueRequestAPI": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The developer name for the service value. This needs to match up with the developerName of the configuration value sent back from the Service description.",
                    "type": "string"
                },
                "valueElementToReferenceId": {
                    "$ref": "#/definitions/ValueElementIdAPI"
                },
                "valueElementToReferenceDeveloperName": {
                    "description": "This is a temporary property so we have the name of the shared element and type element entry tagged against the value (useful in listings)",
                    "type": "string"
                },
                "typeElementDeveloperName": {
                    "type": "string"
                },
                "typeElementId": {
                    "type": "string"
                },
                "contentType": {
                    "description": "The type of content the component holds.",
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which this Value should appear to builder users.",
                    "type": "integer"
                }
            }
        },
        "ServiceActionOutcomeAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                },
                "developerSummary": {
                    "type": "string"
                }
            }
        },
        "ServiceActionRequestAPI": {
            "type": "object",
            "properties": {
                "uriPart": {
                    "description": "The uri part that will be used in addition to the base uri provided for the Service. This needs to match up with the uriPart of the actions sent back from the Service description.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the service action. This does not need to match with the service description as the matching to action is done based on uri part above.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the service action.",
                    "type": "string"
                },
                "isViewMessageAction": {
                    "description": "This property is not yet supported. Indicates if this particular service action will return a View as opposed to being a system-to-system API reference. If this is a View message action, then it can be used in 'Remote Page' map elements.",
                    "type": "boolean"
                },
                "serviceActionOutcomes": {
                    "description": "This property is not yet supported. Provides the outcomes that the View exposes for the Author to use as outcomes in their Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceActionOutcomeAPI"
                    }
                },
                "serviceInputs": {
                    "description": "The list of input values that are available for this particular action. The only supported properties on the service value request object are: id, developerName and ContentType as the Value references are defined by the actions in each 'Message' map element.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceValueRequestAPI"
                    }
                },
                "serviceOutputs": {
                    "description": "The list of output values that are available for this particular action. The only supported properties on the service value request object are: id, developerName and ContentType as the Value references are defined by the actions in each 'Message' map element.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceValueRequestAPI"
                    }
                }
            }
        },
        "TypeElementPropertyAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the type element property value. This property is created by the service.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the type element property. This will be used to identify the property in API calls that use values of this Type.",
                    "type": "string"
                },
                "contentType": {
                    "description": "The type of content the type element property holds.",
                    "type": "string"
                },
                "contentFormat": {
                    "type": "string"
                },
                "typeElementId": {
                    "description": "The unique identifier for the Type held in this type element property. This property should only be assigned if this type element property is a ContentType of ContentObject or ContentList. The unique identifier should be for the object or list of objects that will be stored.",
                    "type": "string"
                },
                "typeElementDeveloperName": {
                    "description": "This property is used to specify the developer name rather than the identifier of the associated Type (see typeElementId). This property is only used as part of the Service install. Do not use this property if you are creating a Type through the API manually - you must use the typeElementId.",
                    "type": "string"
                }
            }
        },
        "TypeElementPropertyBindingAPI": {
            "type": "object",
            "properties": {
                "databaseFieldName": {
                    "description": "The name of the database field in the table that this binding should be applied. If no underlying table is used, this should represent a unique name that will allow the Service implementation to identify how to store the object property.",
                    "type": "string"
                },
                "typeElementPropertyId": {
                    "description": "The unique identifier for the type element property that this binding relates to.",
                    "type": "string"
                },
                "typeElementPropertyDeveloperName": {
                    "description": "The developer name for the type element property that this binding relates to. This property is only used in the Service installation and is not supported as part of a manual Type creation.",
                    "type": "string"
                },
                "databaseContentType": {
                    "description": "The content type of the database field in the table that this binding should be applied. For example, the content type in ManyWho may be ContentNumber, but in the underlying database, the actual field type is Decimal. This is an optional property that depends on the Service implementation.",
                    "type": "string"
                }
            }
        },
        "TypeElementBindingAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the type element binding.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the type element binding.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the type element binding.",
                    "type": "string"
                },
                "databaseTableName": {
                    "description": "The name of the database table that this binding should be applied. If no underlying table is used or the binding involves multiple backend tables, this should represent a unique name that will allow the Service implementation to identify how to store the object.",
                    "type": "string"
                },
                "serviceElementId": {
                    "description": "The unique identifier for the Service that implements the mapping code to save objects and lists of this Type back to the data store.",
                    "type": "string"
                },
                "propertyBindings": {
                    "description": "The list of type element property bindings. These are the individual mappings of type element properties to fields in the underlying data store implemented by the Service.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TypeElementPropertyBindingAPI"
                    }
                },
                "typeElementId": {
                    "format": "uuid",
                    "type": "string"
                }
            }
        },
        "TypeElementRequestAPI": {
            "type": "object",
            "properties": {
                "serviceElementDeveloperName": {
                    "type": "string"
                },
                "properties": {
                    "description": "The list of properties for this Type. A property is very similar to a field in a table - it represents the structure of the data that will be stored in Values that use this Type.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TypeElementPropertyAPI"
                    }
                },
                "bindings": {
                    "description": "The list of bindings for the Type. A binding holds the mapping of properties to tables and fields in an underlying Service. A binding is not required for a Type if there is no plan to save the data in an external data store. When creating a binding, you will need to have saved the initial Type first so you have the identifiers for the various properties in the Type that need to be bound.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TypeElementBindingAPI"
                    }
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a Type with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements.",
                    "type": "boolean"
                },
                "serviceElementId": {
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "ServiceInstallRequestAPI": {
            "type": "object",
            "properties": {
                "typeElements": {
                    "description": "The list of Types can will be installed as part of this Service creation. Once the Service saves, the install object is no longer used as it will create all the Types as part of the single save operation.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TypeElementRequestAPI"
                    }
                }
            }
        },
        "ServiceElementResponseAPI": {
            "type": "object",
            "properties": {
                "dateCreated": {
                    "format": "date-time",
                    "description": "The date the Service was first created.",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "description": "The date the last modification was made to the Service.",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "uri": {
                    "description": "The location of the Service implementation for the platform to callout against.",
                    "type": "string"
                },
                "format": {
                    "description": "The REST messaging format to use to communicate with this service. Currently the only valid value for this property is: JSON",
                    "type": "string"
                },
                "configurationValues": {
                    "description": "The list of configuration value mappings the service needs to function. Each entry provides a reference to a Value in the Flow that contains the configuration value needed by the service plugin.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceValueRequestAPI"
                    }
                },
                "providesLogic": {
                    "description": "Indicates if the Service provides functionality for 'logic'. Logic allows authors to make API calls as part of elements that support messaging: 'Message', 'Page', and 'Remote Page' currently. Messaging is used for asynchronous and synchronous use-cases.",
                    "type": "boolean"
                },
                "providesViews": {
                    "description": "Indicates if the Service provides functionality for 'views'. A View allows authors to build Flows that include 'Remote Page' elements - e.g. the UI of the page is not actually hosted on the ManyWho platform, but rather the UI is provided by the external service.",
                    "type": "boolean"
                },
                "providesFiles": {
                    "description": "Indicates if the Service provides functionality for 'files'. Files allows the author to reference files and content from the service as dynamic references - meaning that the files and content can be managed outside of ManyWho, but embedded in your Flows.",
                    "type": "boolean"
                },
                "providesDatabase": {
                    "description": "Indicates if the Service provides functionality for 'database'. Database functionality allows the author to map their Typed Objects and Lists back to this service for storage. The service then acts as the persistence implementation to store and retrieve the data as neede by the Flow.",
                    "type": "boolean"
                },
                "providesIdentity": {
                    "description": "Indicates if the Service provides functionality for 'identity'. Identity functionality allows the author to manage permissions to their Flows and sections of their Flows (via Swimlanes) using this service as the directory. This also allows users to login to the Flows using the information stored in this service directory.",
                    "type": "boolean"
                },
                "providesSocial": {
                    "description": "Indicates if the Service provides functionality for 'social'. Social allows the author to add features for feed, file and user collaboration to their Flows using this service as the underlying social network.",
                    "type": "boolean"
                },
                "providesLocation": {
                    "description": "Indicates if the Service provides functionality for 'location'. ManyWho optionally collects location information about the user when running a Flow. This information can be used to make decisions about permissions and also data filtering - though it is up to the service to implement this functionality.",
                    "type": "boolean"
                },
                "providesAutoBinding": {
                    "type": "boolean"
                },
                "actions": {
                    "description": "The list of 'logic' operations that are available for the service. If the underlying service 'providesLogic', this is where the 'interface' for those logic operations should be stored. This allows the author to know what inputs and outputs are provided by the actions provided by this Service.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceActionRequestAPI"
                    }
                },
                "install": {
                    "$ref": "#/definitions/ServiceInstallRequestAPI"
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a Service with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created elements.",
                    "type": "boolean"
                },
                "sendDecryptedValues": {
                    "type": "boolean"
                },
                "httpAuthenticationUsername": {
                    "type": "string"
                },
                "httpAuthenticationPassword": {
                    "type": "string"
                },
                "httpAuthenticationClientCertificateReference": {
                    "type": "string"
                },
                "httpAuthenticationClientCertificatePasswordReference": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                }
            }
        },
        "TypeElementResponseAPI": {
            "type": "object",
            "properties": {
                "dateCreated": {
                    "format": "date-time",
                    "description": "The date the Type was first created.",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "description": "The date the last modification was made to the Type.",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "serviceElementDeveloperName": {
                    "type": "string"
                },
                "properties": {
                    "description": "The list of properties for this Type. A property is very similar to a field in a table - it represents the structure of the data that will be stored in Values that use this Type.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TypeElementPropertyAPI"
                    }
                },
                "bindings": {
                    "description": "The list of bindings for the Type. A binding holds the mapping of properties to tables and fields in an underlying Service. A binding is not required for a Type if there is no plan to save the data in an external data store. When creating a binding, you will need to have saved the initial Type first so you have the identifiers for the various properties in the Type that need to be bound.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TypeElementBindingAPI"
                    }
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a Type with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements.",
                    "type": "boolean"
                },
                "serviceElementId": {
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                }
            }
        },
        "TagElementResponseAPI": {
            "type": "object",
            "properties": {
                "dateCreated": {
                    "format": "date-time",
                    "description": "The date the Tag was first created.",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "description": "The date the last modification was made to the Tag.",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "contentType": {
                    "description": "The type of Value the Tag holds. As part of the Page layout creation, the Tag will be associated with a Value. The Value bound to this Tag must be of the same content type.",
                    "type": "string"
                },
                "typeElementId": {
                    "description": "The unique identifier for the Type and object or list data must adhere to in structure (the Type basically defines the 'interface' that all objects and lists stored in this Value must implement). This property is only applicable for ContentObject and ContentList content types. As part of the Page layout creation, the Tag will be associated with a Value. The Value bound to this Tag must be of the same Type.",
                    "type": "string"
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a Tag with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements.",
                    "type": "boolean"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                }
            }
        },
        "FlowImageResponseAPI": {
            "type": "object",
            "properties": {
                "navigationElements": {
                    "description": "The complete object metadata for all Navigations in your Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NavigationElementResponseAPI"
                    }
                },
                "mapElements": {
                    "description": "The complete object metadata for all Map Elements in your Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MapElementResponseAPI"
                    }
                },
                "groupElements": {
                    "description": "The complete object metadata for all Groups in your Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupElementResponseAPI"
                    }
                },
                "pageElements": {
                    "description": "The complete object metadata for all Pages in your Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageElementResponseAPI"
                    }
                },
                "valueElements": {
                    "description": "The complete object metadata for all Values in your Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ValueElementResponseAPI"
                    }
                },
                "macroElements": {
                    "description": "The complete object metadata for all Macros in your Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MacroElementResponseAPI"
                    }
                },
                "serviceElements": {
                    "description": "The complete object metadata for all Services in your Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceElementResponseAPI"
                    }
                },
                "typeElements": {
                    "description": "The complete object metadata for all Types in your Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TypeElementResponseAPI"
                    }
                },
                "tagElements": {
                    "description": "The complete object metadata for all Tags in your Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TagElementResponseAPI"
                    }
                },
                "dateCreated": {
                    "format": "date-time",
                    "description": "The date and time the flow was created at",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "description": "The date and time of the last modification to the flow",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "alertEmail": {
                    "description": "The email of the builder who activated the flow",
                    "type": "string"
                },
                "isActive": {
                    "description": "Indicates if this flow version is the active version.",
                    "type": "boolean"
                },
                "isDefault": {
                    "description": "Indicates if this flow version is the default version.",
                    "type": "boolean"
                },
                "comment": {
                    "description": "The activation comment provided by the builder, if given",
                    "type": "string"
                },
                "editingToken": {
                    "format": "uuid",
                    "description": "A unique token for this particular editing session",
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/FlowIdAPI"
                },
                "developerName": {
                    "description": "The developer name for the flow. When referencing flows by name, this is the name you should use in your referencing.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the Flow.",
                    "type": "string"
                },
                "startMapElementId": {
                    "description": "The unique identifier for the first element in the flow. This element is always of the `START` map element type.",
                    "type": "string"
                },
                "allowJumping": {
                    "description": "Indicates that the builder of the flow will allow users to jump to any position in the Flow regardless of outcomes and/or navigation.",
                    "type": "boolean"
                },
                "enableHistoricalNavigation": {
                    "description": "Indicates that the builder of the flow wants to enable/disable both the UI and api for historical navigation.",
                    "type": "boolean"
                },
                "stateExpirationLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "idleStateExpirationLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "authorization": {
                    "$ref": "#/definitions/GroupAuthorizationAPI"
                },
                "identityProvider": {
                    "$ref": "#/definitions/FlowIdentityProviderAPI"
                }
            }
        },
        "IdentityProviderType": {
            "format": "int32",
            "enum": [
                0,
                1,
                2
            ],
            "type": "integer"
        },
        "IdentityProviderAPI": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/IdentityProviderType"
                },
                "dateCreated": {
                    "format": "date-time",
                    "type": "string"
                },
                "dateModified": {
                    "format": "date-time",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "IdentityProviderAPIItemCollectionResponse": {
            "type": "object",
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IdentityProviderAPI"
                    },
                    "readOnly": true
                }
            }
        },
        "MacroElementRequestAPI": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "The JavaScript code for the Macro.",
                    "type": "string"
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a Macro with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements.",
                    "type": "boolean"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "NavigationElementRequestAPI": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "The label to display to the user.",
                    "type": "string"
                },
                "navigationItems": {
                    "description": "The navigation items that are available for this navigation. The navigation items are the \"links\" the user\r\ncan use to navigate around your flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NavigationItemAPI"
                    }
                },
                "tags": {
                    "description": "The list of tags that are associated with this navigation.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageTagAPI"
                    }
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a navigation with the same developer name as the one\r\nprovided and match them up by name as opposed to by ID. This is useful when creating scripts to create\r\nflows, as you can use the <code>developerName</code> property as the reference as opposed to needing to know\r\nthe IDs of all created elements.",
                    "type": "boolean"
                },
                "persistState": {
                    "description": "Indicates if the platform should save state when navigating between elements",
                    "type": "boolean"
                },
                "persistValues": {
                    "description": "Indicates if the platform should save values when navigating between elements",
                    "type": "boolean"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "PageElementRequestAPI": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "The label for the page element. This is usually used as the title of the page.",
                    "type": "string"
                },
                "pageContainers": {
                    "description": "The tree hierarchy of page containers that define the scaffolding of the page layout. Conceptually, page\r\ncontainers are similar to HTML5 <code>div</code> tags. If no page containers are provided, it is assumed\r\nthat all components will be oriented in a vertical flow layout.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageContainerAPI"
                    }
                },
                "pageComponents": {
                    "description": "The list of components to be embedded on the page. Each component is associated with a page container for\r\nrelative positioning information. Conceptually, page containers are similar to HTML5 <code>form</code>\r\ncontrols and/or specific layout blocks containing images or content.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageComponentAPI"
                    }
                },
                "pageConditions": {
                    "description": "The list of page conditions that set out the rules that should be evaluated and the actions that should be\r\ntaken if those rules evaluate to <code>true</code>. Page conditions make it possible to define complex UI\r\nevent models.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageConditionAPI"
                    }
                },
                "stopConditionsOnFirstTrue": {
                    "description": "Indicates if the engine should continue to execute rules and actions on the page if a condition evaluates\r\nto <code>true</code>. This makes it possible to deal with page rules that may conflict if all run for all\r\nevents on the page.",
                    "type": "boolean"
                },
                "saveHiddenInputs": {
                    "description": "Indicates if page components that are not visible should still save their input to state",
                    "type": "boolean"
                },
                "attributes": {
                    "description": "Key value pairs that provide additional information for the page layout to be rendered. Builders should\r\nrefer to the documentation of the UI code being used.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tags": {
                    "description": "The list of page tags that allow additional metadata to be applied to various page objects: components,\r\ncontrols and the overall page. Conceptually tags can be used to mimic HTML and CSS but can also be used to\r\nprovide data to enrich functionality on the page.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageTagAPI"
                    }
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a page element with the same developer name as the one\r\nprovided and match them up by name as opposed to by ID. This is useful when creating scripts to create\r\nflows, as you can use the <code>developerName</code> property as the reference as opposed to needing to\r\nknow the IDs of all created elements.",
                    "type": "boolean"
                },
                "modernPageLayout": {
                    "description": "Indicates if the page is using the modern layout based on the CSS grid.",
                    "type": "boolean"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "CultureAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The id for the culture.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the culture.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary for the culture.",
                    "type": "string"
                },
                "brand": {
                    "description": "The brand for the culture.",
                    "type": "string"
                },
                "language": {
                    "description": "The language for the culture.",
                    "type": "string"
                },
                "country": {
                    "description": "The country for the culture.",
                    "type": "string"
                },
                "variant": {
                    "description": "The variant for the culture.",
                    "type": "string"
                }
            }
        },
        "EngineValueAPI": {
            "type": "object",
            "properties": {
                "valueElementId": {
                    "description": "The unique identifier for the value in the flow being assigned. Using the id to reference the value ensures that your player is guaranteed to be assigning the correct value. If you reference a value by developerName, it is possible for the author to break integration points simply by changing the name of the value. You must provide an 'id' or a 'developerName'.",
                    "type": "string"
                },
                "typeElementId": {
                    "description": "The unique identifier for the object type of the value in the flow being assigned. Using the typeElementId ensures that your player is guaranteed to be referencing the correct object type. If you use the typeElementDeveloperName property, a change in the type name can break the integration. We ask that you specify the type as we may in future support type casting and we therefore want to know the type you're passing in so we can validate it is correct before mapping to the super type.",
                    "type": "string"
                },
                "typeElementPropertyId": {
                    "description": "The unique identifier for the object property of the value in the flow being assigned. Typed objects all have properties. Using the typeElementPropertyId allows you to assign a property in an object value as opposed to the whole value. As with the other identifier references, using the typeElementPropertyId ensures that your player is guaranteed to be assigning the correct value. Using the typeElementPropertyDeveloperName makes it possible to break the integration if the author changes the developerName of a property in the type.",
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                },
                "typeElementDeveloperName": {
                    "description": "The developer name for the object type of the value in the flow being assigned.",
                    "type": "string"
                },
                "typeElementPropertyDeveloperName": {
                    "description": "The developer name for the object property of the value in the flow being assigned.",
                    "type": "string"
                },
                "contentValue": {
                    "description": "The actual content value being assigned to the value in the flow. This property should be used for all \"primitive\", non-typed values in your flow. For example, if you are referencing a value called \"First Name\", this would be the value you actually want to assign to it: e.g. \"Steve\".",
                    "type": "string"
                },
                "contentType": {
                    "description": "The content type of the value you are passing into the flow. The content types are specified by the ContentType enumeration.",
                    "type": "string"
                },
                "objectData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectAPI"
                    }
                }
            }
        },
        "DescribeServiceRequestAPI": {
            "type": "object",
            "properties": {
                "culture": {
                    "$ref": "#/definitions/CultureAPI"
                },
                "uri": {
                    "description": "The Uri for the service to describe.",
                    "type": "string"
                },
                "uriTrimmed": {
                    "type": "string",
                    "readOnly": true
                },
                "httpAuthenticationUsername": {
                    "type": "string"
                },
                "httpAuthenticationPassword": {
                    "type": "string"
                },
                "httpAuthenticationClientCertificate": {
                    "type": "string"
                },
                "httpAuthenticationClientCertificatePassword": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "configurationValues": {
                    "description": "Configuration values provided by the end user to help the describe.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                }
            }
        },
        "DescribeValueAPI": {
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "The developer name for the value.",
                    "type": "string"
                },
                "contentValue": {
                    "description": "The content for this value.",
                    "type": "string"
                },
                "isRequired": {
                    "description": "Indicates if the value is required.",
                    "type": "boolean"
                },
                "contentType": {
                    "description": "The content type for the value.",
                    "type": "string"
                },
                "typeElementDeveloperName": {
                    "description": "This allows the describe value to reference supported types.",
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "description": "The position in the UI where the value will be displayed",
                    "type": "integer"
                }
            }
        },
        "DescribeServiceResponseBaseAPI": {
            "type": "object",
            "properties": {
                "configurationValues": {
                    "description": "Configuration information that's required to set up the service.  These are values that are typically not associated with\r\ninput/output or moment in time information - this is stuff that is required for the service to function correctly.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DescribeValueAPI"
                    }
                },
                "providesLogic": {
                    "description": "Tells the system whether or not the service exposes logic actions.",
                    "type": "boolean"
                },
                "providesViews": {
                    "description": "Tells the system whether or not the service exposes views.",
                    "type": "boolean"
                },
                "providesDatabase": {
                    "description": "Indicates if this service provides object data support for the provided types.",
                    "type": "boolean"
                },
                "providesIdentity": {
                    "description": "Indicates if this service provides identity information for authentication and authorization calls.",
                    "type": "boolean"
                },
                "providesSocial": {
                    "description": "Indicates if this service provides social networking capabilities to the flow.",
                    "type": "boolean"
                },
                "providesFiles": {
                    "description": "Indicates if this service provides files for download and upload. This is logically separate from the social networking where it is\r\nassumed the feed supports basic file attachments.",
                    "type": "boolean"
                },
                "providesAutoBinding": {
                    "type": "boolean"
                }
            }
        },
        "DescribeUIServiceActionOutcomeAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                },
                "developerSummary": {
                    "type": "string"
                }
            }
        },
        "DescribeServiceActionResponseAPI": {
            "type": "object",
            "properties": {
                "uriPart": {
                    "description": "The part of the Uri that will allow us to call this action as part of the service.  For example,\r\nif you specify \"myaction\", the full Uri for the service would be \"https://myservice.com/myservice/myaction\".",
                    "type": "string"
                },
                "developerName": {
                    "description": "The label for this action.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary for the service operation.",
                    "type": "string"
                },
                "serviceActionOutcomes": {
                    "description": "For UI actions, this property provides the bindable outcomes so the author can wire buttons to steps in the flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DescribeUIServiceActionOutcomeAPI"
                    }
                },
                "serviceInputs": {
                    "description": "The service inputs that need to be provided.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DescribeValueAPI"
                    }
                },
                "serviceOutputs": {
                    "description": "The service outputs that will be provided back.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DescribeValueAPI"
                    }
                },
                "isViewMessageAction": {
                    "description": "Indicates if this message action is for views rather than logic.",
                    "type": "boolean"
                }
            }
        },
        "DescribeInstallResponseAPI": {
            "type": "object",
            "properties": {
                "actions": {
                    "description": "The actions available for this service.  The actions are basically a proxy for methods.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DescribeServiceActionResponseAPI"
                    }
                },
                "types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TypeElementRequestAPI"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "ServiceElementRequestAPI": {
            "type": "object",
            "properties": {
                "uri": {
                    "description": "The location of the Service implementation for the platform to callout against.",
                    "type": "string"
                },
                "format": {
                    "description": "The REST messaging format to use to communicate with this service. Currently the only valid value for this property is: JSON",
                    "type": "string"
                },
                "configurationValues": {
                    "description": "The list of configuration value mappings the service needs to function. Each entry provides a reference to a Value in the Flow that contains the configuration value needed by the service plugin.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceValueRequestAPI"
                    }
                },
                "providesLogic": {
                    "description": "Indicates if the Service provides functionality for 'logic'. Logic allows authors to make API calls as part of elements that support messaging: 'Message', 'Page', and 'Remote Page' currently. Messaging is used for asynchronous and synchronous use-cases.",
                    "type": "boolean"
                },
                "providesViews": {
                    "description": "Indicates if the Service provides functionality for 'views'. A View allows authors to build Flows that include 'Remote Page' elements - e.g. the UI of the page is not actually hosted on the ManyWho platform, but rather the UI is provided by the external service.",
                    "type": "boolean"
                },
                "providesFiles": {
                    "description": "Indicates if the Service provides functionality for 'files'. Files allows the author to reference files and content from the service as dynamic references - meaning that the files and content can be managed outside of ManyWho, but embedded in your Flows.",
                    "type": "boolean"
                },
                "providesDatabase": {
                    "description": "Indicates if the Service provides functionality for 'database'. Database functionality allows the author to map their Typed Objects and Lists back to this service for storage. The service then acts as the persistence implementation to store and retrieve the data as neede by the Flow.",
                    "type": "boolean"
                },
                "providesIdentity": {
                    "description": "Indicates if the Service provides functionality for 'identity'. Identity functionality allows the author to manage permissions to their Flows and sections of their Flows (via Swimlanes) using this service as the directory. This also allows users to login to the Flows using the information stored in this service directory.",
                    "type": "boolean"
                },
                "providesSocial": {
                    "description": "Indicates if the Service provides functionality for 'social'. Social allows the author to add features for feed, file and user collaboration to their Flows using this service as the underlying social network.",
                    "type": "boolean"
                },
                "providesLocation": {
                    "description": "Indicates if the Service provides functionality for 'location'. ManyWho optionally collects location information about the user when running a Flow. This information can be used to make decisions about permissions and also data filtering - though it is up to the service to implement this functionality.",
                    "type": "boolean"
                },
                "providesAutoBinding": {
                    "type": "boolean"
                },
                "actions": {
                    "description": "The list of 'logic' operations that are available for the service. If the underlying service 'providesLogic', this is where the 'interface' for those logic operations should be stored. This allows the author to know what inputs and outputs are provided by the actions provided by this Service.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceActionRequestAPI"
                    }
                },
                "install": {
                    "$ref": "#/definitions/ServiceInstallRequestAPI"
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a Service with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created elements.",
                    "type": "boolean"
                },
                "sendDecryptedValues": {
                    "type": "boolean"
                },
                "httpAuthenticationUsername": {
                    "type": "string"
                },
                "httpAuthenticationPassword": {
                    "type": "string"
                },
                "httpAuthenticationClientCertificateReference": {
                    "type": "string"
                },
                "httpAuthenticationClientCertificatePasswordReference": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "ServiceElementResponseAPIItemCollectionResponse": {
            "type": "object",
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceElementResponseAPI"
                    },
                    "readOnly": true
                }
            }
        },
        "TagElementRequestAPI": {
            "type": "object",
            "properties": {
                "contentType": {
                    "description": "The type of Value the Tag holds. As part of the Page layout creation, the Tag will be associated with a Value. The Value bound to this Tag must be of the same content type.",
                    "type": "string"
                },
                "typeElementId": {
                    "description": "The unique identifier for the Type and object or list data must adhere to in structure (the Type basically defines the 'interface' that all objects and lists stored in this Value must implement). This property is only applicable for ContentObject and ContentList content types. As part of the Page layout creation, the Tag will be associated with a Value. The Value bound to this Tag must be of the same Type.",
                    "type": "string"
                },
                "updateByName": {
                    "description": "Indicates if the platform should attempt to find a Tag with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements.",
                    "type": "boolean"
                },
                "id": {
                    "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                    "type": "string"
                },
                "elementType": {
                    "description": "The type of element this metadata represents.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                    "type": "string"
                },
                "developerSummary": {
                    "description": "The developer summary the author provided to give more information about the element",
                    "type": "string"
                },
                "whoCreated": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoModified": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                },
                "whoOwner": {
                    "$ref": "#/definitions/BuilderWhoAPI"
                }
            }
        },
        "TypeElementResponseAPIItemCollectionResponse": {
            "type": "object",
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TypeElementResponseAPI"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "A human-readable name for the runtime",
                        "nullable": true
                    },
                    "numberOfHealthyNodes": {
                        "type": "integer",
                        "description": "The number of healthy nodes currently part of the runtime. This count is determined from the number of nodes\r\nthat have reported a status in the last few minutes.",
                        "format": "int32"
                    },
                    "readOnly": true
                }
            }
        },
        "EnvironmentClassificationType": {
            "format": "int32",
            "enum": [
                0,
                1,
                2
            ],
            "type": "integer"
        },
        "EnvironmentAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "classificationType": {
                    "$ref": "#/definitions/EnvironmentClassificationType"
                },
                "requiresBuildUser": {
                    "type": "boolean"
                },
                "nextEnvironmentId": {
                    "format": "uuid",
                    "type": "string"
                },
                "tenantId": {
                    "format": "uuid",
                    "type": "string"
                },
                "createdAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "createdBy": {
                    "format": "uuid",
                    "type": "string"
                },
                "updatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "updatedBy": {
                    "format": "uuid",
                    "type": "string"
                }
            }
        },
        "TenantFeatureUpdateRequest": {
            "type": "object",
            "properties": {
                "featureFlagId": {
                    "format": "uuid",
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "NotificationAPI": {
            "type": "object",
            "properties": {
                "tenant": {
                    "$ref": "#/definitions/TenantMinimalAPI"
                },
                "userId": {
                    "format": "uuid",
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "createdAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "isRead": {
                    "type": "boolean"
                }
            }
        },
        "UriMapping": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "PackageElement": {
            "description": "A summary of an element from a packaging operation.",
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "description": "The ID of the element",
                    "type": "string"
                },
                "developerName": {
                    "description": "The name of the element",
                    "type": "string"
                }
            }
        },
        "PackageElements": {
            "type": "object",
            "properties": {
                "flows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackageElement"
                    }
                },
                "groupElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackageElement"
                    }
                },
                "macroElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackageElement"
                    }
                },
                "mapElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackageElement"
                    }
                },
                "navigationElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackageElement"
                    }
                },
                "pageElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackageElement"
                    }
                },
                "serviceElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackageElement"
                    }
                },
                "tagElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackageElement"
                    }
                },
                "typeElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackageElement"
                    }
                },
                "valueElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackageElement"
                    }
                },
                "identityProviderElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackageElement"
                    }
                }
            }
        },
        "PackageConflictResponse": {
            "description": "A response that details the conflicts that arose from a packaging operation.",
            "type": "object",
            "properties": {
                "existingElements": {
                    "$ref": "#/definitions/PackageElements"
                }
            }
        },
        "SharedPackageRequestAPI": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "SharedPackageResponseAPI": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "ReleaseFlowAPI": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "releaseId": {
                    "format": "uuid",
                    "type": "string"
                },
                "flowId": {
                    "format": "uuid",
                    "type": "string"
                },
                "versionId": {
                    "format": "uuid",
                    "type": "string"
                },
                "tenantId": {
                    "format": "uuid",
                    "type": "string"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "createdBy": {
                    "format": "uuid",
                    "type": "string"
                },
                "updatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "updatedBy": {
                    "format": "uuid",
                    "type": "string"
                }
            }
        },
        "ReleaseAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "uuid",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tenantId": {
                    "format": "uuid",
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "flows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReleaseFlowAPI"
                    }
                },
                "createdAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "createdBy": {
                    "format": "uuid",
                    "type": "string"
                },
                "updatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "updatedBy": {
                    "format": "uuid",
                    "type": "string"
                }
            }
        },
        "AuthorizationUserAPI": {
            "type": "object",
            "properties": {
                "authenticationId": {
                    "description": "A unique identifier provided by the Service for the AuthorizationUser. The AuthorizationUser can represent any object in the underlying Service identity management system, but typically it is an actual user identity.",
                    "type": "string"
                },
                "attribute": {
                    "description": "The attribute associated with the authentication identifier. The attributes are defined by the Service, but typically they're things like: MANAGER, USER, DELEGATES, COLLEAGUES, etc.",
                    "type": "string"
                },
                "runningUser": {
                    "description": "Indicates that the authorization should be based on the running user, not on a pre-configured user authentication identifier.",
                    "type": "boolean"
                }
            }
        },
        "AuthorizationGroupAPI": {
            "type": "object",
            "properties": {
                "authenticationId": {
                    "description": "A unique identifier provided by the Service for the AuthorizationGroup. The AuthorizationGroup can represent any object in the underlying Service identity management system.",
                    "type": "string"
                },
                "attribute": {
                    "description": "The attribute associated with the authentication identifier. The attributes are defined by the Service, but typically they're things like: MEMBER, OWNER, etc.",
                    "type": "string"
                }
            }
        },
        "AuthorizationAPI": {
            "type": "object",
            "properties": {
                "users": {
                    "description": "An array containing the list of Users that are authorized to access this part of the Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthorizationUserAPI"
                    }
                },
                "groups": {
                    "description": "An array containing the list of Groups that are authorized to access this part of the Flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthorizationGroupAPI"
                    }
                },
                "runningAuthenticationId": {
                    "description": "The unique identifier of the assigned \"running user\". This is not necessarily the user currently accessing the Flow, but rather the reference user identifier that should be used for relationships such as \"Manager\" or \"Colleague\" when moving from one authentication context to another.",
                    "type": "string"
                },
                "globalAuthenticationType": {
                    "description": "The overall authentication type that should be used when authorizing users.",
                    "type": "string"
                }
            }
        },
        "CommandRequestAPI": {
            "type": "object",
            "properties": {
                "commandType": {
                    "description": "The type of command being executed on the remote service. The command type is up to the author and service.",
                    "type": "string"
                },
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the tenant",
                        "format": "uuid"
                    }
                }
            },
            "RuntimeCreateRequest": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The name to use for the created runtime",
                        "nullable": true
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RuntimeCreateRequestTenant"
                        },
                        "description": "Any tenants to associate with the runtime",
                        "nullable": true
                    }
                }
            },
            "BuilderWhoAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the builder on ManyWho. This identifier is the same across all tenants for which the builder has permissions.",
                        "format": "uuid"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The first name of the builder",
                        "nullable": true
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The last name of the builder",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the builder",
                        "nullable": true
                    }
                }
            },
            "RuntimeTenant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the tenant",
                        "format": "uuid"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The name of the tenant",
                        "nullable": true
                    },
                    "associatedAt": {
                        "type": "string",
                        "description": "The timestamp of when the tenant was first associated with the runtime",
                        "format": "date-time"
                    }
                }
            },
            "RuntimeCreateResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "A unique identifier for the runtime",
                        "format": "uuid"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the runtime was created",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "A human-readable name for the runtime",
                        "nullable": true
                    },
                    "installationToken": {
                        "type": "string",
                        "description": "A one-time token that the runtime must be configured with for installation",
                        "nullable": true
                    },
                    "status": {
                        "$ref": "#/components/schemas/RuntimeStatus"
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RuntimeTenant"
                        },
                        "description": "A list of all the tenants currently associated with this runtime",
                        "nullable": true
                    }
                }
            },
            "AddressFamily": {
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    6,
                    7,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    28,
                    29,
                    65536,
                    65537,
                    -1
                ],
                "type": "integer",
                "format": "int32"
            },
            "IPAddress": {
                "type": "object",
                "properties": {
                    "addressFamily": {
                        "$ref": "#/components/schemas/AddressFamily"
                    },
                    "scopeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "isIPv6Multicast": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isIPv6LinkLocal": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isIPv6SiteLocal": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isIPv6Teredo": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isIPv6UniqueLocal": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isIPv4MappedToIPv6": {
                        "type": "boolean",
                        "readOnly": true
                    }
                }
            },
            "RuntimeNode": {
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The hostname for the node",
                        "nullable": true
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPAddress"
                        },
                        "description": "A list of the IP addresses currently associated with the node",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp of when the node was first created",
                        "format": "date-time"
                    },
                    "reportedAt": {
                        "type": "string",
                        "description": "Timestamp of the last report received from this node",
                        "format": "date-time"
                    },
                    "status": {
                        "$ref": "#/components/schemas/RuntimeStatus"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the runtime the node is currently running",
                        "nullable": true
                    }
                }
            },
            "RuntimeResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "A unique identifier for the runtime",
                        "format": "uuid"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the runtime was created",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "A human-readable name for the runtime",
                        "nullable": true
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RuntimeNode"
                        },
                        "description": "A list of all the nodes that are currently part of the runtime",
                        "nullable": true
                    },
                    "reportedAt": {
                        "type": "string",
                        "description": "The timestamp of the latest report received from the node",
                        "format": "date-time",
                        "nullable": true
                    },
                    "status": {
                        "$ref": "#/components/schemas/RuntimeStatus"
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RuntimeTenant"
                        },
                        "description": "A list of all the tenants currently associated with this runtime",
                        "nullable": true
                    },
                    "uri": {
                        "type": "string",
                        "description": "The URI used to access the runtime. This could be an internal, private or public URI.",
                        "nullable": true
                    }
                }
            },
            "RuntimeUpdateRequestTenant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the tenant",
                        "format": "uuid"
                    }
                }
            },
            "RuntimeUpdateRequest": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The new name to use for the runtime",
                        "nullable": true
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RuntimeUpdateRequestTenant"
                        },
                        "description": "Any tenants to associate with the runtime",
                        "nullable": true
                    }
                }
            },
            "RuntimeFailure": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the failure",
                        "format": "uuid"
                    },
                    "failure": {
                        "type": "string",
                        "description": "The actual failure content; usually an exception message",
                        "nullable": true
                    },
                    "messageType": {
                        "type": "string",
                        "nullable": true
                    },
                    "occurredAt": {
                        "type": "string",
                        "description": "When the failure happened",
                        "format": "date-time"
                    }
                }
            },
            "RuntimeFailureItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RuntimeFailure"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "FlowIdAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the flow. This identifier does not change for the lifetime of the flow and is generated when the flow is first created.",
                        "nullable": true
                    },
                    "versionId": {
                        "type": "string",
                        "description": "The unique identifier for a specific version of a flow. This identifier changes any time a change is made to the flow - in structure or content.",
                        "nullable": true
                    }
                },
                "description": "A composite unique identifier assigned by the platform, which should not be included for new flows."
            },
            "PropertyAPI": {
                "type": "object",
                "properties": {
                    "typeElementPropertyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentValue": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentFormat": {
                        "type": "string",
                        "nullable": true
                    },
                    "objectData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectAPI"
                        },
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ObjectAPI": {
                "type": "object",
                "properties": {
                    "internalId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PropertyAPI"
                        },
                        "nullable": true
                    },
                    "typeElementBindingDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "isSelected": {
                        "type": "boolean"
                    }
                }
            },
            "StateValueAPI": {
                "type": "object",
                "properties": {
                    "valueElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "objectData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectAPI"
                        },
                        "nullable": true
                    },
                    "contentValue": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "UserInteractionAPI": {
                "type": "object",
                "properties": {
                    "manywhoUserId": {
                        "type": "string",
                        "nullable": true
                    },
                    "latitude": {
                        "type": "number",
                        "description": "The latitude coordinate of the user's location.",
                        "format": "double"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "The longitude coordinate of the user's location.",
                        "format": "double"
                    },
                    "accuracy": {
                        "type": "number",
                        "description": "The accuracy of the location data that has been collected.",
                        "format": "double"
                    },
                    "altitude": {
                        "type": "number",
                        "description": "The altitude of the user above mean sea level.",
                        "format": "double"
                    },
                    "altitudeAccuracy": {
                        "type": "number",
                        "description": "The accuracy of the altitude data that has been collected.",
                        "format": "double"
                    },
                    "heading": {
                        "type": "number",
                        "description": "The heading of the user as degrees clockwise from North.",
                        "format": "double"
                    },
                    "speed": {
                        "type": "number",
                        "description": "The speed of the user in meters per second.",
                        "format": "double"
                    },
                    "time": {
                        "type": "string",
                        "description": "The timestamp of the data that has been collected",
                        "format": "date-time"
                    }
                }
            },
            "UserVoteAPI": {
                "type": "object",
                "properties": {
                    "selectedOutcomeId": {
                        "type": "string",
                        "nullable": true
                    },
                    "directoryUserId": {
                        "type": "string",
                        "nullable": true
                    },
                    "manywhoUserId": {
                        "type": "string",
                        "nullable": true
                    },
                    "latitude": {
                        "type": "number",
                        "description": "The latitude coordinate of the user's location.",
                        "format": "double"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "The longitude coordinate of the user's location.",
                        "format": "double"
                    },
                    "accuracy": {
                        "type": "number",
                        "description": "The accuracy of the location data that has been collected.",
                        "format": "double"
                    },
                    "altitude": {
                        "type": "number",
                        "description": "The altitude of the user above mean sea level.",
                        "format": "double"
                    },
                    "altitudeAccuracy": {
                        "type": "number",
                        "description": "The accuracy of the altitude data that has been collected.",
                        "format": "double"
                    },
                    "heading": {
                        "type": "number",
                        "description": "The heading of the user as degrees clockwise from North.",
                        "format": "double"
                    },
                    "speed": {
                        "type": "number",
                        "description": "The speed of the user in meters per second.",
                        "format": "double"
                    },
                    "time": {
                        "type": "string",
                        "description": "The timestamp of the data that has been collected",
                        "format": "date-time"
                    }
                }
            },
            "StackFrameInfoAPI": {
                "type": "object",
                "properties": {
                    "flowId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "mapElementId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    }
                }
            },
            "StateEntryAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "flowId": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "flowDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "mapElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "mapElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "nextMapElementId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "authenticatingServiceElementId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "dateCommitted": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "chosenOutcomeId": {
                        "type": "string",
                        "nullable": true
                    },
                    "chosenOutcomeDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StateValueAPI"
                        },
                        "nullable": true
                    },
                    "userInteractions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserInteractionAPI"
                        },
                        "nullable": true
                    },
                    "userVotes": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/UserVoteAPI"
                        },
                        "nullable": true
                    },
                    "frames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StackFrameInfoAPI"
                        },
                        "description": "It contains info about the list of stack frames valid for this state entry\r\nThe last stack frame has MapElementId == null (to avoid redundancy) as this data can be taken from MapElementId",
                        "nullable": true
                    }
                }
            },
            "LoggingLevel": {
                "enum": [
                    1,
                    257
                ],
                "type": "integer",
                "format": "int64"
            },
            "LogEntryAPI": {
                "type": "object",
                "properties": {
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "data": {
                        "type": "string",
                        "nullable": true
                    },
                    "level": {
                        "$ref": "#/components/schemas/LoggingLevel"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "LogAPI": {
                "type": "object",
                "properties": {
                    "stateId": {
                        "type": "string",
                        "nullable": true
                    },
                    "flowId": {
                        "type": "string",
                        "nullable": true
                    },
                    "flowDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "entries": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/LogEntryAPI"
                        },
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "FlowStackFrameAPI": {
                "type": "object",
                "properties": {
                    "flowId": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "mapElementId": {
                        "type": "string",
                        "description": "If this frame is the current frame, this property contains the id of the current map element.\r\nIf this frame refers to one of the parent frames, this property contains the id of a Subflow map element that was the entry point to the next frame.",
                        "format": "uuid",
                        "nullable": true
                    },
                    "mapElementDeveloperName": {
                        "type": "string",
                        "description": "If this frame is the current frame, this property contains the developer name of the current map element.\r\nIf this frame refers to one of the parent frames, this property contains the id of a Subflow map element that was the entry point to the next frame.",
                        "nullable": true
                    },
                    "runningUserId": {
                        "type": "string",
                        "description": "This is our reference running user.  By default, the running user is the person who initializes the flow.  From then on,\r\nthe running user can be re-assigned as needed - but it is always a single user identity that is tagged as the running user.",
                        "nullable": true
                    },
                    "precommitStateEntry": {
                        "$ref": "#/components/schemas/StateEntryAPI"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StateValueAPI"
                        },
                        "description": "The list of value elements that are associated with this frame",
                        "nullable": true
                    }
                }
            },
            "RuntimePathElementAPI": {
                "type": "object",
                "properties": {
                    "flowId": {
                        "type": "string",
                        "description": "The ID of the Flow",
                        "format": "uuid"
                    },
                    "mapElementId": {
                        "type": "string",
                        "description": "The ID of the Map Element",
                        "format": "uuid"
                    }
                }
            },
            "ArchivedStackFrameAPI": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RuntimePathElementAPI"
                        },
                        "description": "The runtime path of the Subflow map element that is associated with this Archived Stack Frame",
                        "nullable": true
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StateValueAPI"
                        },
                        "description": "Archived values of value elements",
                        "nullable": true
                    }
                }
            },
            "StateAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "parentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "dateCreated": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "expiresAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "currentFlowId": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "currentFlowDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "currentMapElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "currentMapElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "entryOutcomeId": {
                        "type": "string",
                        "nullable": true
                    },
                    "entryOutcomeDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "currentStreamId": {
                        "type": "string",
                        "nullable": true
                    },
                    "currentRunningUserId": {
                        "type": "string",
                        "nullable": true
                    },
                    "currentRunningUserEmail": {
                        "type": "string",
                        "nullable": true
                    },
                    "currentRunningUserExternalId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalIdentifier": {
                        "type": "string",
                        "nullable": true
                    },
                    "manywhoTenantId": {
                        "type": "string",
                        "nullable": true
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "stateEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StateEntryAPI"
                        },
                        "nullable": true
                    },
                    "precommitStateEntry": {
                        "$ref": "#/components/schemas/StateEntryAPI"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StateValueAPI"
                        },
                        "nullable": true
                    },
                    "authorizationHeader": {
                        "type": "string",
                        "nullable": true
                    },
                    "isDone": {
                        "type": "boolean"
                    },
                    "isExpired": {
                        "type": "boolean"
                    },
                    "log": {
                        "$ref": "#/components/schemas/LogAPI"
                    },
                    "joinUri": {
                        "type": "string",
                        "nullable": true
                    },
                    "rootFaults": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "hasRootFaults": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "storeId": {
                        "type": "string",
                        "nullable": true
                    },
                    "frames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FlowStackFrameAPI"
                        },
                        "nullable": true
                    },
                    "archivedFrames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArchivedStackFrameAPI"
                        },
                        "nullable": true
                    },
                    "waitExpiresAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "StateAPIItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StateAPI"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "StateFlowResponseAPI": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "StateFlowResponseAPIItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StateFlowResponseAPI"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "OrganizationMinimal": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the organization",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of the organization",
                        "nullable": true
                    }
                }
            },
            "IPRangeAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The name for this IP range restriction, and typically a helpful one to remind builders of the purpose",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "Any additional summary information about this IP range restriction that will help explain the purpose",
                        "nullable": true
                    },
                    "startIPAddress": {
                        "type": "string",
                        "description": "The lower end of the IP range in IPv4 format (dotted decimal)",
                        "nullable": true
                    },
                    "endIPAddress": {
                        "type": "string",
                        "description": "The upper end of the IP range in IPv4 format (dotted decimal)",
                        "nullable": true
                    }
                }
            }
        },
        "PageComponentColumnResponseAPI": {
            "description": "This acts as the column descriptor for rendering the table content stored in the content property (as part of the parent\r\nfield definition).",
            "type": "object",
            "properties": {
                "developerName": {
                    "description": "This is the developer name of the type element entry.",
                    "type": "string"
                },
                "typeElementPropertyId": {
                    "type": "string"
                },
                "contentFormat": {
                    "type": "string"
                },
                "contentType": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "isDisplayValue": {
                    "type": "boolean"
                },
                "isEditable": {
                    "type": "boolean"
                },
                "order": {
                    "format": "int32",
                    "type": "integer"
                },
                "typeElementPropertyToDisplayId": {
                    "type": "string"
                },
                "componentType": {
                    "type": "string"
                }
            }
        },
        "PageComponentResponseAPI": {
            "type": "object",
            "properties": {
                "pageContainerDeveloperName": {
                    "description": "The developer name for the page container this component should be placed into. When rendering a UI, it's best to reference the pageContainerId as this developer name is not guaranteed to be unique.",
                    "type": "string"
                },
                "pageContainerId": {
                    "description": "The unique identifier for the page container this component should be placed into. When rendering a UI, this is the best reference to use as the developer names are not guaranteed to be unique.",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifer for this page component.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The name the author has given for this component.",
                    "type": "string"
                },
                "componentType": {
                    "description": "The type of component that should be used. The platform currently supports the standard components such as \"INPUT\", \"SELECT\", etc as would be familiar with HTML UI. If you want to provide additional UI componentry, we recommend using \"tags\" to inform the player that you want to adapt the component based on the data in the tag. For example, you may want to change a particular number input to a \"slider\" or you might bind this page component to a widget - again, based on the data in the tag.",
                    "type": "string"
                },
                "contentType": {
                    "description": "The type of content the component holds.",
                    "type": "string"
                },
                "label": {
                    "description": "The label for the component. This is often the label for a form field.",
                    "type": "string"
                },
                "columns": {
                    "description": "The columns associated with this page component. This property is only used for \"TABLE\"/\"SELECT\" components and details out the columns that should be displayed to the user. This property is not currently fully documented until we release the page composition tool.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageComponentColumnResponseAPI"
                    }
                },
                "size": {
                    "format": "int32",
                    "description": "The size of the component. For \"INPUT\" components, this is typically the number of characters wide to display the input box.",
                    "type": "integer"
                },
                "maxSize": {
                    "format": "int32",
                    "description": "The maximum size of characters the component can hold. For \"INPUT\" and \"TEXTAREA\" components, this is the amount of content these inputs can hold.",
                    "type": "integer"
                },
                "height": {
                    "format": "int32",
                    "description": "The height of the component. For \"TEXTAREA\" components, this is typically the number of characters high to display the text box. For \"IMAGE\" components, this is the height in pixels of the image.",
                    "type": "integer"
                },
                "width": {
                    "format": "int32",
                    "description": "The width of the component. For \"TEXTAREA\" components, this is typically the number of characters wide to display the text box. For \"IMAGE\" components, this is the width in pixels of the image.",
                    "type": "integer"
                },
                "hintValue": {
                    "description": "The information that should be shown to the user to help them understand what they need to enter. For \"INPUT\" components, this if often the text you see in the input box (e.g. Enter Name) that disappears once you enter something into the input.",
                    "type": "string"
                },
                "helpInfo": {
                    "description": "The help information to assist the user in completing this page component. The help information is often something the user sees if they click on a \"help\" button beside the component or hover over a \"help\" icon.",
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which this component should be placed with respect to other components in the same page container.",
                    "type": "integer"
                },
                "isMultiSelect": {
                    "description": "This property indicates if the component supports selection of more than one value. This is only applicable for \"TABLE\"/\"SELECT\" components.",
                    "type": "boolean"
                },
                "isSearchable": {
                    "type": "boolean"
                },
                "hasEvents": {
                    "description": "Indicates if changes to this component should result in a \"SYNC\" invoke type with the service. If the component has events, it's likely that the page state needs to change based on business rules. If the component does not have events, there is no need to update the service of changes made to the value of the component.",
                    "type": "boolean"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "className": {
                    "description": "A space separated string of CSS classes to be applied to the component when rendering.",
                    "type": "string"
                },
                "row": {
                    "format": "int32",
                    "description": "Row position of a grid item (component).",
                    "type": "integer"
                },
                "column": {
                    "format": "int32",
                    "description": "Column position of a grid item (component).",
                    "type": "integer"
                },
                "rowSpan": {
                    "format": "int32",
                    "description": "Size of a grid item (component) measured in rows.",
                    "type": "integer"
                },
                "colSpan": {
                    "format": "int32",
                    "description": "Size of a grid item (component) measured in columns.",
                    "type": "integer"
                }
            }
        },
        "PageComponentDataResponseAPI": {
            "type": "object",
            "properties": {
                "pageComponentId": {
                    "description": "The unique identifier for the page component that this data pertains to.",
                    "type": "string"
                },
                "isEnabled": {
                    "description": "Indicates if the page component should be enabled.",
                    "type": "boolean"
                },
                "isEditable": {
                    "description": "Indicates if the page component should be editable.",
                    "type": "boolean"
                },
                "isRequired": {
                    "description": "Indicates if the page component should be required.",
                    "type": "boolean"
                },
                "isVisible": {
                    "description": "Indicates if the page component should be visible.",
                    "type": "boolean"
                },
                "objectData": {
                    "description": "The up-to-date object data for the component. For page components that use asynchronous object data requests, this list contains the selected objects. If not, the object data is flagged with \"isSelected\" for all objects in the list that should be rendered to the user as selected. This object will be further documented when we release the page composition tool.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectAPI"
                    }
                },
                "objectDataRequest": {
                    "$ref": "#/definitions/ObjectDataRequestAPI"
                },
                "fileDataRequest": {
                    "$ref": "#/definitions/FileDataRequestAPI"
                },
                "contentValue": {
                    "description": "The value of the page component. For \"INPUT\" and \"TEXTAREA\" components, this is typically the value the user entered.",
                    "type": "string"
                },
                "content": {
                    "description": "Any formatted content that may be associated with this component. For \"PRESENTATION\" components, this is the content that should be displayed on the page.",
                    "type": "string"
                },
                "imageUri": {
                    "type": "string"
                },
                "isValid": {
                    "description": "Indicates if the value provided in the field is valid. The validation is only performed when the user selects an outcome. Validation is not done on values as the result of an invokeType of \"SYNC\".",
                    "type": "boolean"
                },
                "validationMessage": {
                    "description": "Any message from the system that explains why the value is not valid. This message can result from a straight page component validation or as the result of the value not being accepted by a subsequent element in the flow (in which case the author of the flow indicated the user should be taken back to this screen to correct the issue).",
                    "type": "string"
                },
                "tags": {
                    "description": "The page tag provides additional metadata that the author of the flow has defined for this component. Tags are a very powerful way of providing additional information to player developers to ensure the app is providing exactly the user experience you expect. This object will be further documented when we release the page composition tool.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                }
            }
        },
        "PageContainerDataResponseAPI": {
            "type": "object",
            "properties": {
                "pageContainerId": {
                    "description": "The unique identifier for the page container that this data pertains to.",
                    "type": "string"
                },
                "isEnabled": {
                    "description": "Indicates if the page container should be enabled. If the page container is disabled, the default behavior is that all child components and containers are also disabled.",
                    "type": "boolean"
                },
                "isEditable": {
                    "description": "Indicates if the page container should be editable. If the page container is not editable, the default behavior is that all child components and containers are also not editable.",
                    "type": "boolean"
                },
                "isVisible": {
                    "description": "Indicates if the page container should be visible. If the page container is not visible, the default behavior is that all child components and containers are also not visible.",
                    "type": "boolean"
                },
                "tags": {
                    "description": "The page tag provides additional metadata that the author of the flow has defined for this container. Tags are a very powerful way of providing additional information to player developers to ensure the app is providing exactly the user experience you expect. This object will be further documented when we release the page composition tool.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                }
            }
        },
        "PageResponseAPI": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "The label for the page. This is often used as a title for the page.",
                    "type": "string"
                },
                "pageContainerResponses": {
                    "description": "The scaffolding for the page UI containers. The page containers are nested objects that give the complete heirarchy of containers that make up the layour of the UI. The engine will only return this array of objects for a \"JOIN\" or \"FORWARD\" invokeType. For all other types, we assume the player has the UI layout and therefore is only needing metadata and content/data updates. The engine will always provide the complete page scaffolding and then rely on the data responses to hide, display, disable, etc.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageContainerResponseAPI"
                    }
                },
                "pageComponentResponses": {
                    "description": "The UI component base structures. The data contained in this object will not change based on events. As with the page container response objects, this data is only provided when the engine is called with an invokeType of \"JOIN\" or \"FORWARD\".",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageComponentResponseAPI"
                    }
                },
                "pageComponentDataResponses": {
                    "description": "The meta data and data for the page components. The metadata tells the player if the component is visible, enabled, etc, and also tells the player the content of the component. This information is subject to change based on events performed by the UI and this array of objects will always be returned by the engine regardless of invokeType (assuming the user is authenticated and the element has UI).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageComponentDataResponseAPI"
                    }
                },
                "pageContainerDataResponses": {
                    "description": "The meta data for the page containers. The metadata tells the player if the container is visible, enabled, etc. This information is subject to change based on events performed by the UI and this array of objects will always be returned by the engine regardless of invokeType (assuming the user is authenticated and the element has UI).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageContainerDataResponseAPI"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which this page element should appear. The order will always be zero for the page element as it is the root container.",
                    "type": "integer"
                }
            }
        },
        "OutcomeResponseAPI": {
            "type": "object",
            "properties": {
                "pageActionBindingType": {
                    "description": "The page action binding type as specified by the builder user.",
                    "type": "string"
                },
                "pageActionType": {
                    "description": "The page action type as specified by the builder user. This helps inform the UI of the \"type\" of outcome - e.g. selecting it will perform a \"DELETE\" operation or a \"SAVE\" operation.",
                    "type": "string"
                },
                "isBulkAction": {
                    "description": "Indicates if the outcome is a \"bulk\" action. If an outcome is bound to a component such as a TABLE, this indicates that the outcome applies to all records, not individual records.",
                    "type": "boolean"
                },
                "pageObjectBindingId": {
                    "description": "The unique identifier for the page object (PageComponent or PageContainer) that this outcome should be bound to.",
                    "type": "string"
                },
                "isOut": {
                    "description": "Indicates if this outcome should invoke the \"out\" API to initialize and invoke a child Flow or join child Flow.",
                    "type": "boolean"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "className": {
                    "description": "A space separated string of CSS classes to be applied to the outcome when rendering.",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier for the outcome.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name provided by the builder user to help identify the outcome.",
                    "type": "string"
                },
                "label": {
                    "description": "The label provided by the builder user to help Flow users select the correct outcome.",
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which this outcome should appear with respect to sibling outcomes.",
                    "type": "integer"
                }
            }
        },
        "MapElementInvokeResponseAPI": {
            "type": "object",
            "properties": {
                "mapElementId": {
                    "description": "The unique identifier for the map element this response pertains to.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The developer name for the map element this response pertains to.",
                    "type": "string"
                },
                "label": {
                    "description": "The translatable label for the map element this response pertains to.",
                    "type": "string"
                },
                "pageResponse": {
                    "$ref": "#/definitions/PageResponseAPI"
                },
                "outcomeResponses": {
                    "description": "The outcome response objects are the actions that can be performed by the user to navigate the flow from element to element. Outcome responses can be bound to page components to add additional context to the action (e.g. the button should appear beside a field input, above a table of records, etc)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutcomeResponseAPI"
                    }
                },
                "rootFaults": {
                    "description": "Key value pairs taking the form of {\"errorCode\":\"errorMessage\"}. The root faults are populated if a fault has occurred that is not attributed to a specific value on the page. A root fault is often due to an element in the flow experiencing a fault and the author of the flow has determined that the user should be navigated to this page to rectify the problem. If an error is attributed to a value in the state, it will be bound to the page component as a validation error message.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "VoteResponseAPI": {
            "type": "object",
            "properties": {
                "isComplete": {
                    "type": "boolean"
                },
                "configurationValues": {
                    "description": "The configuration information needed for the service to function.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                },
                "authorization": {
                    "$ref": "#/definitions/AuthorizationAPI"
                },
                "userVotes": {
                    "description": "The current list of votes that have been cast by end users.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserVoteAPI"
                    }
                },
                "voteType": {
                    "type": "string"
                },
                "minimumCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "minimumPercent": {
                    "format": "int32",
                    "type": "integer"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "selectedOutcomeId": {
                    "description": "The outcome the user has selected when then submitted the vote.",
                    "type": "string"
                }
            }
        },
        "GeoLocationAPI": {
            "type": "object",
            "properties": {
                "latitude": {
                    "format": "double",
                    "description": "The latitude coordinate of the user's location.",
                    "type": "number"
                },
                "longitude": {
                    "format": "double",
                    "description": "The longitude coordinate of the user's location.",
                    "type": "number"
                },
                "accuracy": {
                    "format": "double",
                    "description": "The accuracy of the location data that has been collected.",
                    "type": "number"
                },
                "altitude": {
                    "format": "double",
                    "description": "The altitude of the user above mean sea level.",
                    "type": "number"
                },
                "altitudeAccuracy": {
                    "format": "double",
                    "description": "The accuracy of the altitude data that has been collected.",
                    "type": "number"
                },
                "heading": {
                    "format": "double",
                    "description": "The heading of the user as degrees clockwise from North.",
                    "type": "number"
                },
                "speed": {
                    "format": "double",
                    "description": "The speed of the user in meters per second.",
                    "type": "number"
                },
                "time": {
                    "format": "date-time",
                    "description": "The timestamp of the data that has been collected",
                    "type": "string"
                }
            }
        },
        "PageComponentInputResponseRequestAPI": {
            "type": "object",
            "properties": {
                "pageComponentId": {
                    "type": "string"
                },
                "contentValue": {
                    "type": "string"
                },
                "objectData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectAPI"
                    }
                }
            }
        },
        "PageRequestAPI": {
            "type": "object",
            "properties": {
                "pageComponentInputResponses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageComponentInputResponseRequestAPI"
                    }
                }
            }
        },
        "MapElementInvokeRequestAPI": {
            "type": "object",
            "properties": {
                "selectedOutcomeId": {
                    "description": "The unique identifier for the outcome the user is taking action on. The outcomes are provided in the MapElementInvokeResponse as part of the outcomeResponses property.",
                    "type": "string"
                },
                "pageRequest": {
                    "$ref": "#/definitions/PageRequestAPI"
                },
                "messageActionRequest": {
                    "$ref": "#/definitions/MessageActionAPI"
                }
            }
        },
        "EngineInvokeRequestAPI": {
            "type": "object",
            "properties": {
                "culture": {
                    "$ref": "#/definitions/CultureAPI"
                },
                "stateId": {
                    "description": "The unique identifier for the initialized flow state. The state identifier is needed throughout the execution of the flow as it is the pointer that points the engine to the correct running instance of a flow.",
                    "type": "string"
                },
                "stateToken": {
                    "description": "The unique identifier for the token response from the state. The state token identifier changes with every cycle of request/response. The token is needed as it tells the engine how in-sync your request is with the current service side state.",
                    "type": "string"
                },
                "currentMapElementId": {
                    "description": "The unique identifier for the map element the user is currently executing against.",
                    "type": "string"
                },
                "navigationElementId": {
                    "description": "The unique identifier for the navigation element that's being used to drive the navigation scheme.",
                    "type": "string"
                },
                "selectedNavigationItemId": {
                    "description": "When executing using an InvokeType of 'NAVIGATE', this is the selected navigation item the user wishes to move to in the Flow.",
                    "type": "string"
                },
                "selectedMapElementId": {
                    "description": "When executing a Flow that has the allowJumping property set to 'true', the user can move to any Map Element in the Flow regardless of navigation or outcomes. This is the unique identifier of the Map Element the user wishes to navigate to and must be used with an InvokeType of 'NAVIGATE'.",
                    "type": "string"
                },
                "selectedStateEntryId": {
                    "description": "When executing a Flow that has the allowJumping property set to 'true', the user can move to any Map Element regardless of navigation or outcomes.\r\nThis is the Id of the State Entry that the user wishes to navigate to and must be used with an InvokeType of 'NAVIGATE'.\r\nThe engine will calculate the Map Element from the previous State Entry and execute a jump to it.\r\nThis is an alternative to using 'selectedMapElementId' jumping, with this method offering an added capability to navigate between different flows.",
                    "type": "string"
                },
                "invokeType": {
                    "description": "The way you want to invoke the engine as part of this request. The user may be navigating forward, or you may be wanting to perform a sync operation to update the UI due to another user making a change.",
                    "type": "string"
                },
                "annotations": {
                    "description": "Key value pairs you wish to annotate to the flow. Annotations take the form of {\"mykey\":\"myvalue\"}. Any annotations added to the state will be persisted for the duration of the flow. Annotations are passed to the executing player and also through to plugin services. Annotations can be changed at any time through the execution of the flow.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "geoLocation": {
                    "$ref": "#/definitions/GeoLocationAPI"
                },
                "mapElementInvokeRequest": {
                    "$ref": "#/definitions/MapElementInvokeRequestAPI"
                },
                "mode": {
                    "description": "The mode you wish to run the flow in. The mode is mainly useful for debugging purposes as you can step through the flow and also view state information to check everything is working as expected.",
                    "type": "string"
                }
            }
        },
        "StateLogEntryInvokePairAPI": {
            "type": "object",
            "properties": {
                "engineInvokeRequest": {
                    "$ref": "#/definitions/EngineInvokeRequestAPI"
                },
                "engineInvokeResponse": {
                    "$ref": "#/definitions/EngineInvokeResponseAPI"
                },
                "order": {
                    "type": "string"
                }
            }
        },
        "StateLogEntryAPI": {
            "type": "object",
            "properties": {
                "engineInvokeRequest": {
                    "$ref": "#/definitions/EngineInvokeRequestAPI"
                },
                "engineInvokeResponse": {
                    "$ref": "#/definitions/EngineInvokeResponseAPI"
                },
                "stateLogEntryInvokePairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateLogEntryInvokePairAPI"
                    }
                },
                "timeStamp": {
                    "type": "string"
                },
                "isActive": {
                    "type": "string"
                }
            }
        },
        "StateLogAPI": {
            "type": "object",
            "properties": {
                "stateLogEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateLogEntryAPI"
                    }
                }
            }
        },
        "EngineFrameAPI": {
            "type": "object",
            "properties": {
                "flowId": {
                    "format": "uuid",
                    "description": "The id of the flow associated with this stack frame",
                    "type": "string"
                },
                "mapElementId": {
                    "format": "uuid",
                    "description": "If this frame is the current frame, this property contains the id of the current map element.\r\nIf this frame refers to one of the parent frames, this property contains the id of a Subflow map element that was the entry point to the next frame.",
                    "type": "string"
                },
                "mapElementDeveloperName": {
                    "description": "If this frame is the current frame, this property contains the developer name of the current map element.\r\nIf this frame refers to one of the parent frames, this property contains the id of a Subflow map element that was the entry point to the next frame.",
                    "type": "string"
                }
            }
        },
        "EngineInvokeResponseAPI": {
            "type": "object",
            "properties": {
                "culture": {
                    "$ref": "#/definitions/CultureAPI"
                },
                "stateId": {
                    "description": "The unique identifier for the initialized flow state. The state identifier is needed throughout the execution of the flow as it is the pointer that points the engine to the correct running instance of a flow.",
                    "type": "string"
                },
                "parentStateId": {
                    "type": "string"
                },
                "stateToken": {
                    "description": "The unique identifier for the token response from the state. The state token identifier changes with every cycle of request/response. The token is needed as it tells the engine how in-sync your request is with the current service side state.",
                    "type": "string"
                },
                "alertEmail": {
                    "description": "The email address that should be used to notify of any Flow or player related faults. This email address is typically the email of the author of the Flow.",
                    "type": "string"
                },
                "waitMessage": {
                    "description": "The message that should be shown to the user if the engine returns an Invoke Type of 'WAIT'.",
                    "type": "string"
                },
                "notAuthorizedMessage": {
                    "description": "The message that should be shown to the user if the engine returns an Invoke Type of 'STATUS'. The engine will automatically handle UI permissions - so this user will not recieve Page metadata.",
                    "type": "string"
                },
                "flowId": {
                    "description": "The unique identifier for the flow the user is currently executing against.",
                    "type": "string"
                },
                "flowName": {
                    "description": "The name for the flow the user is currently executing against.",
                    "type": "string"
                },
                "flowVersion": {
                    "description": "The unique identifier for the flow version the user is currently executing against.",
                    "type": "string"
                },
                "currentMapElementId": {
                    "description": "The unique identifier for the map element the user is currently executing against.",
                    "type": "string"
                },
                "currentStreamId": {
                    "description": "The unique identifier for the collaboration stream the user is currently using to collaborate with colleagues. If the Flow is not leveraging collaboration streams, this property will be null or blank.",
                    "type": "string"
                },
                "invokeType": {
                    "description": "The way the engine responded to your initial invoke request.",
                    "type": "string"
                },
                "annotations": {
                    "description": "Key value pairs you wish to annotate to the flow. Annotations take the form of {\"mykey\":\"myvalue\"}. Any annotations added to the state will be persisted for the duration of the flow. Annotations are passed to the executing player and also through to plugin services. Annotations can be changed at any time through the execution of the flow.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mapElementInvokeResponses": {
                    "description": "The list of map element invoke responses generated by the executed element or elements in the flow. Currently the array contains only the one object, which is the object that is the current element being executed in the flow.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MapElementInvokeResponseAPI"
                    }
                },
                "voteResponse": {
                    "$ref": "#/definitions/VoteResponseAPI"
                },
                "stateLog": {
                    "$ref": "#/definitions/StateLogAPI"
                },
                "preCommitStateValues": {
                    "description": "The list of engine values that are currently in a pre-commit state. This is only populated when the engine is being run in \"DEBUG\" or \"DEBUG_STEPTHROUGH\" mode. Values are only committed to the state after the element has completed execution successfully (usually as a result of the user invoking the engine \"FORWARD\" and the page validating correctly).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                },
                "stateValues": {
                    "description": "The list of engine values that are currently committed in the state. This is only populated when the engine is being run in \"DEBUG\" or \"DEBUG_STEPTHROUGH\" mode.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                },
                "outputs": {
                    "description": "The list of engine values for all values in the flow that are set as OUTPUT or INPUT/OUTPUT. This property is only populated when the engine responds with an invokeType of \"DONE\".",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                },
                "frames": {
                    "description": "This property is populated is only in debug mode. It contains the list of current stack frames.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineFrameAPI"
                    }
                },
                "statusCode": {
                    "description": "The values mimic standard REST codes, but as a String. A \"200\" indicates the user is authenticated to execute the flow. A \"401\" indicates the user needs to login based on the authorization context information provided in the response.",
                    "type": "string"
                },
                "runFlowUri": {
                    "description": "The Url that should be used to run a new instance of this flow with this player. For cross-platform situations, the run Url should redirect to the appropriate player for the calling device.",
                    "type": "string"
                },
                "joinFlowUri": {
                    "description": "The Url that should be used to join this instance of this this flow with this player. For cross-platform situations, the join Url should redirect to the appropriate player for the calling device.",
                    "type": "string"
                },
                "authorizationContext": {
                    "$ref": "#/definitions/EngineAuthorizationContextAPI"
                },
                "navigationElementReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NavigationElementReferenceAPI"
                    }
                },
                "isHistoricalNavigationEnabled": {
                    "description": "Indicates whether both the UI and api for historical navigation has been enabled/disabled.",
                    "type": "boolean"
                },
                "waitExpiresAt": {
                    "format": "date-time",
                    "description": "A currently configured wait, after which execution of the flow can continue.",
                    "type": "string"
                }
            }
        },
        "ElementResponseAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the element",
                    "type": "string"
                },
                "pageContainerId": {
                    "description": "The unique identifier for the page container this element should be placed into. When rendering a UI, this is the best reference to use as the developer names are not guaranteed to be unique.",
                    "type": "string"
                },
                "type": {
                    "description": "The type tells the player the kind of element that needs to be rendered. This is usually to indicate if the container has particular layour properties such as vertical, horizontal or inline flow - or that the container is a group of tabs. The container type is not restricted to the enumeration provided here - however - all of the standard players provided by ManyWho are able to render the container types in the enum. If you wish to add more container types, be aware that you will need to update the player to support these.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The name the author has given for this element.",
                    "type": "string"
                },
                "label": {
                    "description": "The label for the element. This is often used as a title for the section of the page represented by this container.",
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which this element should appear on the page with respect to other page containers at the same level in the element hierarchy.",
                    "type": "integer"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "isEnabled": {
                    "description": "Indicates if the element should be enabled. If the element is disabled, the default behavior is that all child components and containers are also disabled.",
                    "type": "boolean"
                },
                "isEditable": {
                    "description": "Indicates if the element should be editable. If the element is not editable, the default behavior is that all child components and containers are also not editable.",
                    "type": "boolean"
                },
                "isVisible": {
                    "description": "Indicates if the element should be visible. If the element is not visible, the default behavior is that all child components and containers are also not visible.",
                    "type": "boolean"
                },
                "tags": {
                    "description": "The page tag provides additional metadata that the author of the flow has defined for this element. Tags are a very powerful way of providing additional information to player developers to ensure the app is providing exactly the user experience you expect. This object will be further documented when we release the page composition tool.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                },
                "outcomes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutcomeResponseAPI"
                    }
                }
            }
        },
        "PageContainerResponse2API": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ElementResponseAPI"
                    }
                },
                "id": {
                    "description": "The unique identifier for the element",
                    "type": "string"
                },
                "pageContainerId": {
                    "description": "The unique identifier for the page container this element should be placed into. When rendering a UI, this is the best reference to use as the developer names are not guaranteed to be unique.",
                    "type": "string"
                },
                "type": {
                    "description": "The type tells the player the kind of element that needs to be rendered. This is usually to indicate if the container has particular layour properties such as vertical, horizontal or inline flow - or that the container is a group of tabs. The container type is not restricted to the enumeration provided here - however - all of the standard players provided by ManyWho are able to render the container types in the enum. If you wish to add more container types, be aware that you will need to update the player to support these.",
                    "type": "string"
                },
                "developerName": {
                    "description": "The name the author has given for this element.",
                    "type": "string"
                },
                "label": {
                    "description": "The label for the element. This is often used as a title for the section of the page represented by this container.",
                    "type": "string"
                },
                "order": {
                    "format": "int32",
                    "description": "The order in which this element should appear on the page with respect to other page containers at the same level in the element hierarchy.",
                    "type": "integer"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "isEnabled": {
                    "description": "Indicates if the element should be enabled. If the element is disabled, the default behavior is that all child components and containers are also disabled.",
                    "type": "boolean"
                },
                "isEditable": {
                    "description": "Indicates if the element should be editable. If the element is not editable, the default behavior is that all child components and containers are also not editable.",
                    "type": "boolean"
                },
                "isVisible": {
                    "description": "Indicates if the element should be visible. If the element is not visible, the default behavior is that all child components and containers are also not visible.",
                    "type": "boolean"
                },
                "tags": {
                    "description": "The page tag provides additional metadata that the author of the flow has defined for this element. Tags are a very powerful way of providing additional information to player developers to ensure the app is providing exactly the user experience you expect. This object will be further documented when we release the page composition tool.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                },
                "outcomes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutcomeResponseAPI"
                    }
                }
            }
        },
        "NavigationItemResponse2API": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                },
                "developerSummary": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NavigationItemResponse2API"
                    }
                },
                "order": {
                    "format": "int32",
                    "type": "integer"
                },
                "isActive": {
                    "type": "boolean"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isEnabled": {
                    "type": "boolean"
                },
                "isVisible": {
                    "type": "boolean"
                },
                "locationMapElementId": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                }
            }
        },
        "EngineNavigationResponse2API": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "developerName": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NavigationItemResponse2API"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                },
                "isVisible": {
                    "type": "boolean"
                },
                "isEnabled": {
                    "type": "boolean"
                },
                "persistState": {
                    "description": "Indicates if the platform should save state when navigating between elements",
                    "type": "boolean"
                },
                "persistValues": {
                    "description": "Indicates if the platform should save values when navigating between elements",
                    "type": "boolean"
                }
            }
        },
        "EngineInvokeResponse2API": {
            "type": "object",
            "properties": {
                "tenantId": {
                    "format": "uuid",
                    "type": "string"
                },
                "rootElement": {
                    "$ref": "#/definitions/PageContainerResponse2API"
                },
                "navigations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineNavigationResponse2API"
                    }
                },
                "outcomes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutcomeResponseAPI"
                    }
                },
                "stateId": {
                    "description": "The unique identifier for the initialized flow state. The state identifier is needed throughout the execution of the flow as it is the pointer that points the engine to the correct running instance of a flow.",
                    "type": "string"
                },
                "stateToken": {
                    "description": "The unique identifier for the token response from the state. The state token identifier changes with every cycle of request/response. The token is needed as it tells the engine how in-sync your request is with the current service side state.",
                    "type": "string"
                },
                "waitMessage": {
                    "description": "The message that should be shown to the user if the engine returns an Invoke Type of 'WAIT'.",
                    "type": "string"
                },
                "notAuthorizedMessage": {
                    "description": "The message that should be shown to the user if the engine returns an Invoke Type of 'STATUS'. The engine will automatically handle UI permissions - so this user will not recieve Page metadata.",
                    "type": "string"
                },
                "flowId": {
                    "description": "The unique identifier for the flow the user is currently executing against.",
                    "type": "string"
                },
                "flowName": {
                    "description": "The name for the flow the user is currently executing against.",
                    "type": "string"
                },
                "flowVersion": {
                    "description": "The unique identifier for the flow version the user is currently executing against.",
                    "type": "string"
                },
                "currentMapElementId": {
                    "description": "The unique identifier for the map element the user is currently executing against.",
                    "type": "string"
                },
                "invokeType": {
                    "description": "The way the engine responded to your initial invoke request.",
                    "type": "string"
                },
                "statusCode": {
                    "description": "The values mimic standard REST codes, but as a String. A \"200\" indicates the user is authenticated to execute the flow. A \"401\" indicates the user needs to login based on the authorization context information provided in the response.",
                    "type": "string"
                },
                "joinFlowUri": {
                    "description": "The Url that should be used to join this instance of this this flow with this player. For cross-platform situations, the join Url should redirect to the appropriate player for the calling device.",
                    "type": "string"
                },
                "authorizationContext": {
                    "$ref": "#/definitions/EngineAuthorizationContextAPI"
                },
                "waitExpiresAt": {
                    "format": "date-time",
                    "description": "A currently configured wait, after which execution of the flow can continue.",
                    "type": "string"
                },
                "rootFaults": {
                    "description": "Key value pairs taking the form of {\"errorCode\":\"errorMessage\"}. The root faults are populated if a fault has occurred that is not attributed to a specific value on the page. A root fault is often due to an element in the flow experiencing a fault and the author of the flow has determined that the user should be navigated to this page to rectify the problem. If an error is attributed to a value in the state, it will be bound to the page component as a validation error message.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "pageComponentDataResponses": {
                    "description": "The meta data and data for the page components. The metadata tells the player if the component is visible, enabled, etc, and also tells the player the content of the component. This information is subject to change based on events performed by the UI and this array of objects will always be returned by the engine regardless of invokeType (assuming the user is authenticated and the element has UI).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageComponentDataResponseAPI"
                    }
                },
                "pageContainerDataResponses": {
                    "description": "The meta data for the page containers. The metadata tells the player if the container is visible, enabled, etc. This information is subject to change based on events performed by the UI and this array of objects will always be returned by the engine regardless of invokeType (assuming the user is authenticated and the element has UI).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PageContainerDataResponseAPI"
                    }
                }
            }
        },
        "ValueFaultAPI": {
            "type": "object",
            "properties": {
                "valueElementToReferenceId": {
                    "description": "The unique identifier of the Value that caused the fault in the Service. This allows ManyWho to match this fault with any Pages that display it to a user.",
                    "type": "string"
                },
                "valueElementTypeElementPropertyToReferenceId": {
                    "description": "The unique identifier of the Type Property that cause the fault in the Service. This is only applicable for ContentObject and ContentList Values.",
                    "type": "string"
                },
                "faultCode": {
                    "description": "An informative code from the Service to indicate the type of fault that occurred.",
                    "type": "string"
                },
                "faultMessage": {
                    "description": "A fault message that will help users understand how to fix the fault in their provided value.",
                    "type": "string"
                }
            }
        },
        "ServiceResponseAPI": {
            "type": "object",
            "properties": {
                "invokeType": {
                    "description": "Tells the engine what this service would like it to do.  At the moment, there are really only\r\ntwo possible commands: WAIT (to tell the engine to wait for a completed response) or DONE (to\r\ntell the engine that it has completed its work.",
                    "type": "string"
                },
                "waitMessage": {
                    "description": "The \"wait\" message that should be provided to users waiting for the Service to complete its tasks.",
                    "type": "string"
                },
                "outputs": {
                    "description": "The output values from the Service being sent back to the Flow State. Outputs will be applied to the Flow State even if the InvokeType is set to WAIT.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EngineValueAPI"
                    }
                },
                "selectedOutcomeId": {
                    "description": "The Outcome the Service would like the Flow to follow. If the Outcome has Rules, the Service request for this outcome will be ignored unless the Rules are also satisfied.",
                    "type": "string"
                },
                "rootFaults": {
                    "description": "Any faults that have happened in the Service that should be reported up to the Flow State.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "valueFaults": {
                    "description": "Any faults that are directly attributed to an input value provided in the ServiceRequest. If a ValueFault is specified, ManyWho will attempt to match this error with any input fields that are bound to that Value.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ValueFaultAPI"
                    }
                },
                "mode": {
                    "description": "The mode which the Service would like the Flow State to execute under.",
                    "type": "string"
                },
                "token": {
                    "description": "The execution token needed for any callback responses from the Service.",
                    "type": "string"
                },
                "tenantId": {
                    "description": "The unique identifier for the tenant that made the request to the Service.",
                    "type": "string"
                },
                "culture": {
                    "$ref": "#/definitions/CultureAPI"
                },
                "annotations": {
                    "description": "Any runtime annotations that were provided to the State plus any additional annotations the Service may be providing.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "ListenerServiceResponseAPI": {
            "type": "object",
            "properties": {
                "listeningEventValue": {
                    "$ref": "#/definitions/EngineValueAPI"
                },
                "token": {
                    "description": "The execution token needed for any callback responses from the Service.",
                    "type": "string"
                },
                "tenantId": {
                    "description": "The unique identifier for the tenant that made the request to the Service.",
                    "type": "string"
                },
                "culture": {
                    "$ref": "#/definitions/CultureAPI"
                },
                "annotations": {
                    "description": "Any runtime annotations that were provided to the State plus any additional annotations the Service may be providing.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "StateListenerRequestAPI": {
            "type": "object",
            "properties": {
                "listenType": {
                    "type": "string"
                },
                "stateId": {
                    "type": "string"
                },
                "callbackUri": {
                    "type": "string"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "StateListenerResponseAPI": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "listenType": {
                    "type": "string"
                },
                "stateId": {
                    "type": "string"
                },
                "callbackUri": {
                    "type": "string"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "StateHistoryEntryAPI": {
            "type": "object",
            "properties": {
                "flowId": {
                    "format": "uuid",
                    "type": "string"
                },
                "mapElementId": {
                    "format": "uuid",
                    "description": "The ID of the Map Element",
                    "type": "string"
                },
                "mapElementName": {
                    "description": "The name of the Map Element",
                    "type": "string"
                },
                "stateEntryId": {
                    "format": "uuid",
                    "description": "The id of the corresponding State Entry",
                    "type": "string"
                }
            }
        },
        "StateHistoryAPI": {
            "type": "object",
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateHistoryEntryAPI"
                    }
                }
            }
        },
        "ProblemKind": {
            "format": "int32",
            "enum": [
                0,
                1
            ],
            "type": "integer"
        },
        "ServiceProblem": {
            "type": "object",
            "properties": {
                "invokeType": {
                    "description": "The expected invoke type returned by the service",
                    "type": "string"
                },
                "action": {
                    "description": "The name of the action executed by the service",
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/ProblemKind"
                },
                "uri": {
                    "description": "The URI of the service endpoint the problem originated from",
                    "type": "string"
                },
                "statusCode": {
                    "format": "int32",
                    "description": "The status code returned by the service",
                    "type": "integer"
                },
                "responseBody": {
                    "description": "The body returned by the service",
                    "type": "string"
                },
                "message": {
                    "description": "A short summary of the error returned by the service",
                    "type": "string"
                },
                "responseHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                }
            },
            "ClaimsSettings": {
                "type": "object",
                "properties": {
                    "emailAddress": {
                        "type": "string",
                        "nullable": true
                    },
                    "firstName": {
                        "type": "string",
                        "nullable": true
                    },
                    "lastName": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "SamlSettings": {
                "type": "object",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "The public certificate used for validating the signature of any SAML objects.",
                        "nullable": true
                    },
                    "redirectUri": {
                        "type": "string",
                        "description": "The URI to redirect users to, in order for them to authenticate in the IdP.",
                        "nullable": true
                    },
                    "logoutUri": {
                        "type": "string",
                        "description": "The URI to redirect users to, in order for them to logout of the IdP.",
                        "nullable": true
                    },
                    "groupSettings": {
                        "$ref": "#/components/schemas/GroupSettings"
                    },
                    "claims": {
                        "$ref": "#/components/schemas/ClaimsSettings"
                    }
                }
            },
            "SecuritySettingsAPI": {
                "type": "object",
                "properties": {
                    "isAdminRestrictedByIPRange": {
                        "type": "boolean",
                        "description": "Indicates that the Admin APIs should be protected by the provided IP ranges in `authorizedAdminIPRanges`.\r\nSetting this to `false` will not remove the list of IP Range entries and will simply disable IP range \r\nrestrictions"
                    },
                    "isPackagingRestrictedByIPRange": {
                        "type": "boolean",
                        "description": "Indicates that the Packaging APIs should be protected by the provided IP ranges in \r\n`authorizedPackagingIPRanges`. Setting this to `false` will not remove the list of IP Range entries and will \r\nsimply disable IP range restrictions"
                    },
                    "isDrawRestrictedByIPRange": {
                        "type": "boolean",
                        "description": "Indicates that the Draw APIs should be protected by the provided IP ranges in `authorizedDrawIPRanges`. \r\nSetting this to `false` will not remove the list of IP Range entries and will simply disable IP range \r\nrestrictions"
                    },
                    "isRunRestrictedByIPRange": {
                        "type": "boolean",
                        "description": "Indicates that the Run APIs should be protected by the provided IP ranges in `authorizedRunIPRanges`. \r\nSetting this to `false` will not remove the list of IP Range entries and will simply disable IP range \r\nrestrictions"
                    },
                    "authorizedAdminIPRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPRangeAPI"
                        },
                        "description": "A list of IP ranges that requests to the Admin API must originate from to gain access",
                        "nullable": true
                    },
                    "authorizedPackagingIPRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPRangeAPI"
                        },
                        "description": "A list of IP ranges that requests to the Packaging API must originate from to be allowed access",
                        "nullable": true
                    },
                    "authorizedDrawIPRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPRangeAPI"
                        },
                        "description": "A list of IP ranges that requests to the Draw API must originate from to to be allowed access",
                        "nullable": true
                    },
                    "authorizedRunIPRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPRangeAPI"
                        },
                        "description": "A list of IP ranges that requests to the Run API must originate from to be allowed access",
                        "nullable": true
                    },
                    "isSamlEnabled": {
                        "type": "boolean"
                    },
                    "samlSettings": {
                        "$ref": "#/components/schemas/SamlSettings"
                    }
                },
                "description": "Specific security settings that should be applied to this tenant, beyond the defaults (excluding subtenants)"
            },
            "StateReportingAuthentication": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer",
                "format": "int32"
            },
            "StateSettingsAPI": {
                "type": "object",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The URI to send all state updates to, which must implement our Reporting API interface. More details \r\non that can be found [here](https://github.com/manywho/reporting)",
                        "nullable": true
                    },
                    "authentication": {
                        "$ref": "#/components/schemas/StateReportingAuthentication"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username or Client Id, if authentication is set to Basic or ClientCredentials",
                        "nullable": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Password or Client Secret, if authentication is set to Basic or ClientCredentials",
                        "nullable": true
                    },
                    "tokenEndpoint": {
                        "type": "string",
                        "description": "OAuth token endpoint for ClientCredentials based authentication",
                        "nullable": true
                    }
                },
                "description": "Settings used for state persistence and reporting"
            },
            "ObservabilitySettingsAPI": {
                "type": "object",
                "properties": {
                    "otlpEndpoint": {
                        "type": "string",
                        "description": "The URI to dispatch runtime OTLP data",
                        "nullable": true
                    },
                    "otlpHeaders": {
                        "type": "string",
                        "description": "A comma-separated string of headers to send with each dispatch",
                        "nullable": true
                    },
                    "otlpSensitiveDataLogging": {
                        "type": "integer",
                        "description": "When this is enabled more verbose and potentially sensitive information will be logged",
                        "format": "int32"
                    }
                },
                "description": "Settings used for runtime observabillity"
            },
            "ReleaseCycle": {
                "enum": [
                    0,
                    1
                ],
                "type": "integer",
                "format": "int32"
            },
            "TenantSettingsAPI": {
                "type": "object",
                "properties": {
                    "disableServiceInvokerLogging": {
                        "type": "boolean",
                        "description": "Whether to disable the logging of service invoker requests, reponses and failures. They are helpful when\r\ndebugging, and a requirement for a tenant's flows to be tested using Reflow, but having the platform store\r\nthem might be against a customer's compliance rules."
                    },
                    "releaseCycle": {
                        "$ref": "#/components/schemas/ReleaseCycle"
                    },
                    "formatValues": {
                        "type": "boolean"
                    },
                    "useRegionalRedirectUris": {
                        "type": "boolean"
                    }
                },
                "description": "Settings that are specific to features used in the tenant"
            },
            "ExternalStorageSettingsAPI": {
                "type": "object",
                "properties": {
                    "enableReplication": {
                        "type": "boolean",
                        "description": "Whether to enable saving data to both the platform and the store simultaneously. This functionality is\r\nintended to ease the process of a full migration to external-only storage."
                    },
                    "enableStates": {
                        "type": "boolean",
                        "description": "Whether to store states using the External Storage API or not"
                    },
                    "globalStoreId": {
                        "type": "string",
                        "description": "The ID of the store to use for all content in the tenant",
                        "format": "uuid",
                        "nullable": true
                    }
                }
            },
            "FeatureFlagAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "TenantResponseAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the tenant. The unique identifier is assigned by the platform.",
                        "nullable": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "A timestamp of when the tenant should expire",
                        "format": "date-time",
                        "nullable": true
                    },
                    "subTenants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TenantResponseAPI"
                        },
                        "description": "The list of sub tenants associated with this parent tenant.",
                        "nullable": true
                    },
                    "organization": {
                        "$ref": "#/components/schemas/OrganizationMinimal"
                    },
                    "parentTenant": {
                        "$ref": "#/components/schemas/TenantResponseAPI"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The unique developer name for the tenant. The developer name is related to the domain information provided in the builder username.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "A summary of the tenant. This is typically additional information that will help explain the purpose of the\r\ntenant",
                        "nullable": true
                    },
                    "securitySettings": {
                        "$ref": "#/components/schemas/SecuritySettingsAPI"
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "The requested subdomain to register for this tenant. If provided, the subdomain must be unique for the\r\nentire platform",
                        "nullable": true
                    },
                    "stateSettings": {
                        "$ref": "#/components/schemas/StateSettingsAPI"
                    },
                    "observabilitySettings": {
                        "$ref": "#/components/schemas/ObservabilitySettingsAPI"
                    },
                    "tenantSettings": {
                        "$ref": "#/components/schemas/TenantSettingsAPI"
                    },
                    "externalStorageSettings": {
                        "$ref": "#/components/schemas/ExternalStorageSettingsAPI"
                    },
                    "featureFlags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FeatureFlagAPI"
                        },
                        "description": "Feature Flags related to the tenant",
                        "nullable": true
                    }
                }
            },
            "TenantRequestAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The unique developer name for the tenant. The developer name is related to the domain information provided in the builder username.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "A summary of the tenant. This is typically additional information that will help explain the purpose of the\r\ntenant",
                        "nullable": true
                    },
                    "securitySettings": {
                        "$ref": "#/components/schemas/SecuritySettingsAPI"
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "The requested subdomain to register for this tenant. If provided, the subdomain must be unique for the\r\nentire platform",
                        "nullable": true
                    },
                    "stateSettings": {
                        "$ref": "#/components/schemas/StateSettingsAPI"
                    },
                    "observabilitySettings": {
                        "$ref": "#/components/schemas/ObservabilitySettingsAPI"
                    },
                    "tenantSettings": {
                        "$ref": "#/components/schemas/TenantSettingsAPI"
                    },
                    "externalStorageSettings": {
                        "$ref": "#/components/schemas/ExternalStorageSettingsAPI"
                    },
                    "featureFlags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FeatureFlagAPI"
                        },
                        "description": "Feature Flags related to the tenant",
                        "nullable": true
                    }
                }
            },
            "DeleteRequestAPI": {
                "type": "object",
                "properties": {
                    "cultures": {
                        "type": "boolean",
                        "description": "Indicates if all non-default cultures should be deleted"
                    },
                    "flows": {
                        "type": "boolean",
                        "description": "Indicates if all flows should be deleted"
                    },
                    "pages": {
                        "type": "boolean",
                        "description": "Indicates if all page elements should be deleted"
                    },
                    "values": {
                        "type": "boolean",
                        "description": "Indicates if all value elements should be deleted"
                    },
                    "types": {
                        "type": "boolean",
                        "description": "Indicates if all type elements should be deleted"
                    },
                    "services": {
                        "type": "boolean",
                        "description": "Indicates if all service elements should be deleted"
                    },
                    "tags": {
                        "type": "boolean",
                        "description": "Indicates if all tag elements should be deleted"
                    },
                    "snapshots": {
                        "type": "boolean",
                        "description": "Indicates if all flow snapshots should be deleted"
                    },
                    "states": {
                        "type": "boolean",
                        "description": "Indicates if all flow states should be deleted"
                    },
                    "macros": {
                        "type": "boolean",
                        "description": "Indicates if all macro elements should be deleted"
                    },
                    "identityProviders": {
                        "type": "boolean"
                    },
                    "openApiSchemas": {
                        "type": "boolean",
                        "description": "Indicates if all cached OpenAPI Schemas should be deleted"
                    }
                }
            },
            "SubtenantCreateRequest": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "TenantMinimalAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "TenantRuntimeListResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "A unique identifier for the runtime",
                        "format": "uuid"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "A human-readable name for the runtime",
                        "nullable": true
                    },
                    "latestVersion": {
                        "type": "string",
                        "description": "The latest version of the runtime the node is currently running.",
                        "nullable": true
                    }
                }
            },
            "Role": {
                "type": "object",
                "properties": {
                    "roleId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "friendlyName": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "UserTokenAPI": {
                "type": "object",
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "UserTenantSettingsNotificationsAPI": {
                "type": "object",
                "properties": {
                    "enableEmails": {
                        "type": "boolean"
                    }
                }
            },
            "UserTenantAPIKey": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "apiKey": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    }
                }
            },
            "UserTenantSettingsAPI": {
                "type": "object",
                "properties": {
                    "notifications": {
                        "$ref": "#/components/schemas/UserTenantSettingsNotificationsAPI"
                    },
                    "enabledSSO": {
                        "type": "boolean"
                    },
                    "apiKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserTenantAPIKey"
                        },
                        "nullable": true
                    }
                }
            },
            "UserTenantAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "isExpired": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "lastLoggedInAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "settings": {
                        "$ref": "#/components/schemas/UserTenantSettingsAPI"
                    },
                    "organization": {
                        "$ref": "#/components/schemas/OrganizationMinimal"
                    },
                    "roleId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "role": {
                        "type": "string",
                        "nullable": true
                    },
                    "isSso": {
                        "type": "boolean"
                    }
                }
            },
            "UserAPI": {
                "type": "object",
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/Role"
                    },
                    "isSso": {
                        "type": "boolean"
                    },
                    "tokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserTokenAPI"
                        },
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "firstName": {
                        "type": "string",
                        "nullable": true
                    },
                    "lastName": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "organizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganizationMinimal"
                        },
                        "nullable": true
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserTenantAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "UserAPIItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserAPI"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "UserMeAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "firstName": {
                        "type": "string",
                        "nullable": true
                    },
                    "lastName": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "organizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganizationMinimal"
                        },
                        "nullable": true
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserTenantAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "UserMeUpdateRequest": {
                "type": "object",
                "properties": {
                    "firstName": {
                        "type": "string",
                        "nullable": true
                    },
                    "lastName": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "CanvasSettings": {
                "type": "object",
                "properties": {
                    "lineThickness": {
                        "type": "number",
                        "format": "float"
                    },
                    "mapElementColorStyle": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "UserSettingsAPI": {
                "type": "object",
                "properties": {
                    "canvasSettings": {
                        "$ref": "#/components/schemas/CanvasSettings"
                    }
                }
            },
            "OrganizationInvite": {
                "type": "object",
                "properties": {
                    "organization": {
                        "$ref": "#/components/schemas/OrganizationMinimal"
                    },
                    "completedBy": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "completedAt": {
                        "type": "string",
                        "description": "When the invitation was either accepted or rejected",
                        "format": "date-time",
                        "nullable": true
                    },
                    "invitedBy": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "invitedAt": {
                        "type": "string",
                        "description": "When the invitation was sent",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the invitation. Can be one of \"invited\", \"accepted\", \"rejected\", \"canceled\", or \"acknowledged\".",
                        "nullable": true
                    },
                    "tenant": {
                        "$ref": "#/components/schemas/TenantMinimalAPI"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of invitation. Can be one of \"tenant\" or \"user\".",
                        "nullable": true
                    },
                    "user": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "OrganizationInviteTenantRequest": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The name of the tenant to send the invite to",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the tenant to send the invite to",
                        "format": "uuid"
                    }
                }
            },
            "OrganizationInviteUserRequest": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user to send the invite to",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the user to send the invite to",
                        "format": "uuid"
                    }
                }
            },
            "OrganizationTenant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the tenant",
                        "format": "uuid"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The name of the tenant",
                        "nullable": true
                    },
                    "parentId": {
                        "type": "string",
                        "description": "The ID of the tenant's parent, if this is a subtenant",
                        "format": "uuid",
                        "nullable": true
                    },
                    "addedAt": {
                        "type": "string",
                        "description": "When the tenant was added into the organization",
                        "format": "date-time",
                        "nullable": true
                    },
                    "addedBy": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "subtenants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TenantMinimalAPI"
                        },
                        "description": "Any subtenants that belong to the tenant",
                        "nullable": true
                    }
                }
            },
            "User": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the user to invite, if the user already exists",
                        "format": "uuid"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user to invite, if the user already exists, or if a new user needs to be invited.",
                        "nullable": true
                    },
                    "role": {
                        "type": "string",
                        "description": "The role the user should have in the tenant",
                        "nullable": true
                    }
                }
            },
            "OrganizationTenantCreationRequest": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The desired name of the tenant to create",
                        "nullable": true
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "description": "The users to add as members of the tenant",
                        "nullable": true
                    }
                }
            },
            "OrganizationUser": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the user",
                        "format": "uuid"
                    },
                    "email": {
                        "type": "string",
                        "description": "The name of the user",
                        "nullable": true
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The first name of the user",
                        "nullable": true
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The last name of the user",
                        "nullable": true
                    },
                    "role": {
                        "type": "string",
                        "description": "The user's role in the organization",
                        "nullable": true
                    },
                    "addedAt": {
                        "type": "string",
                        "description": "When the user was added into the organization",
                        "format": "date-time",
                        "nullable": true
                    },
                    "addedBy": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "AppUser": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "firstName": {
                        "type": "string",
                        "nullable": true
                    },
                    "lastName": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "AuditEventFlowResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "version": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "AuditEvent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "type": "string",
                        "nullable": true
                    },
                    "occurredAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "userId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "user": {
                        "$ref": "#/components/schemas/AppUser"
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "stateId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "flow": {
                        "$ref": "#/components/schemas/AuditEventFlowResponse"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    }
                }
            },
            "AuditEventItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuditEvent"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "DasboardLaunchesResponse": {
                "type": "object",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "nullable": true
                    },
                    "counter": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "DashboardFlowLaunchesResponse": {
                "type": "object",
                "properties": {
                    "flowId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "flowName": {
                        "type": "string",
                        "nullable": true
                    },
                    "flowLaunchTotal": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "flowLaunchData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DasboardLaunchesResponse"
                        },
                        "nullable": true
                    }
                }
            },
            "AssetAPI": {
                "type": "object",
                "properties": {
                    "contentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "key": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "publicUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "AssetMoveRequestAPI": {
                "type": "object",
                "properties": {
                    "oldKey": {
                        "type": "string",
                        "description": "The key of the asset to move",
                        "nullable": true
                    },
                    "newKey": {
                        "type": "string",
                        "description": "The key to move the asset to",
                        "nullable": true
                    }
                }
            },
            "DependencyAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "nullable": true
                    },
                    "friendlyType": {
                        "type": "string",
                        "nullable": true
                    },
                    "dependsOnElementId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "dependsOnElementType": {
                        "type": "string",
                        "nullable": true
                    },
                    "dependsOnElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "dependsOnElementDeveloperSummary": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "DependencyAPIItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DependencyAPI"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "GroupAuthorizationGroupAPI": {
                "type": "object",
                "properties": {
                    "authenticationId": {
                        "type": "string",
                        "description": "The unique identifier to match the correct group. This is an external unique identifier based on the directory implementation of the Service.",
                        "nullable": true
                    },
                    "attribute": {
                        "type": "string",
                        "description": "The unique attribute to match the correct group attribute. This enumeration is based on the directory implementation of the Service.",
                        "nullable": true
                    },
                    "attributeLabel": {
                        "type": "string",
                        "nullable": true
                    },
                    "friendlyName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "serviceElementId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "GroupAuthorizationUserAPI": {
                "type": "object",
                "properties": {
                    "authenticationId": {
                        "type": "string",
                        "description": "The unique identifier to match the correct user. This is an external unique identifier based on the directory implementation of the Service.",
                        "nullable": true
                    },
                    "attribute": {
                        "type": "string",
                        "description": "The unique attribute to match the correct user attribute. This enumeration is based on the directory implementation of the Service.",
                        "nullable": true
                    },
                    "runningUser": {
                        "type": "boolean"
                    },
                    "attributeLabel": {
                        "type": "string",
                        "nullable": true
                    },
                    "friendlyName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "serviceElementId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ValueElementIdAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the Value to be referenced with this identifier.",
                        "nullable": true
                    },
                    "typeElementPropertyId": {
                        "type": "string",
                        "description": "The unique identifier for a property in the Value to be referenced with this identifier. This only applies for Values of type ContentObject.",
                        "nullable": true
                    },
                    "command": {
                        "type": "string",
                        "description": "The command to execute as part of the Value reference. For certain objects, the command exposes additional properties that can be referenced.",
                        "nullable": true
                    }
                }
            },
            "GroupAuthorizationLocationAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToReferenceId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "attribute": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "GroupAuthorizationAPI": {
                "type": "object",
                "properties": {
                    "serviceElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Service that this authorization configuration is associated. The Service must support identity.",
                        "nullable": true
                    },
                    "globalAuthenticationType": {
                        "type": "string",
                        "description": "The global authentication type for this Flow.",
                        "nullable": true
                    },
                    "streamBehaviourType": {
                        "type": "string",
                        "description": "The stream behaviour type for this Flow.",
                        "nullable": true
                    },
                    "showPagesAsReadOnly": {
                        "type": "boolean",
                        "description": "Whether to display page fields as read only"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupAuthorizationGroupAPI"
                        },
                        "description": "The list of groups that are associated with this authorization configuration.",
                        "nullable": true
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupAuthorizationUserAPI"
                        },
                        "description": "The list of users that are associated with this authorization configuration.",
                        "nullable": true
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupAuthorizationLocationAPI"
                        },
                        "description": "The list of locations that are associated with this authorization configuration.",
                        "nullable": true
                    }
                }
            },
            "FlowIdentityProviderAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "allowedUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "allowedGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                }
            },
            "FlowRequestAPI": {
                "type": "object",
                "properties": {
                    "editingToken": {
                        "type": "string",
                        "description": "A unique token for this particular editing session",
                        "format": "uuid",
                        "nullable": true
                    },
                    "id": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the flow. When referencing flows by name, this is the name you should use in your referencing.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the Flow.",
                        "nullable": true
                    },
                    "startMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the first element in the flow. This element is always of the `START` map element type.",
                        "nullable": true
                    },
                    "allowJumping": {
                        "type": "boolean",
                        "description": "Indicates that the builder of the flow will allow users to jump to any position in the Flow regardless of outcomes and/or navigation."
                    },
                    "enableHistoricalNavigation": {
                        "type": "boolean",
                        "description": "Indicates that the builder of the flow wants to enable/disable both the UI and api for historical navigation."
                    },
                    "stateExpirationLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "idleStateExpirationLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "authorization": {
                        "$ref": "#/components/schemas/GroupAuthorizationAPI"
                    },
                    "identityProvider": {
                        "$ref": "#/components/schemas/FlowIdentityProviderAPI"
                    }
                }
            },
            "FlowResponseAPI": {
                "type": "object",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date and time the flow was created at",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date and time of the last modification to the flow",
                        "format": "date-time"
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "alertEmail": {
                        "type": "string",
                        "description": "The email of the builder who activated the flow",
                        "nullable": true
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Indicates if this flow version is the active version."
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Indicates if this flow version is the default version."
                    },
                    "comment": {
                        "type": "string",
                        "description": "The activation comment provided by the builder, if given",
                        "nullable": true
                    },
                    "editingToken": {
                        "type": "string",
                        "description": "A unique token for this particular editing session",
                        "format": "uuid",
                        "nullable": true
                    },
                    "id": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the flow. When referencing flows by name, this is the name you should use in your referencing.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the Flow.",
                        "nullable": true
                    },
                    "startMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the first element in the flow. This element is always of the `START` map element type.",
                        "nullable": true
                    },
                    "allowJumping": {
                        "type": "boolean",
                        "description": "Indicates that the builder of the flow will allow users to jump to any position in the Flow regardless of outcomes and/or navigation."
                    },
                    "enableHistoricalNavigation": {
                        "type": "boolean",
                        "description": "Indicates that the builder of the flow wants to enable/disable both the UI and api for historical navigation."
                    },
                    "stateExpirationLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "idleStateExpirationLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "authorization": {
                        "$ref": "#/components/schemas/GroupAuthorizationAPI"
                    },
                    "identityProvider": {
                        "$ref": "#/components/schemas/FlowIdentityProviderAPI"
                    }
                }
            },
            "ElementAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "RuleAPI": {
                "type": "object",
                "properties": {
                    "leftValueElementToReferenceId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "criteriaType": {
                        "type": "string",
                        "description": "The criteria that should be used when evaluating this rule: e.g. EQUAL",
                        "nullable": true
                    },
                    "rightValueElementToReferenceId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "leftValueElementToReferenceDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "rightValueElementToReferenceDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "criteriaTypeFriendly": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ComparisonAPI": {
                "type": "object",
                "properties": {
                    "comparisonType": {
                        "type": "string",
                        "description": "The comparison to use when evaluating the immediate child rules associated with this comparison object.",
                        "nullable": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RuleAPI"
                        },
                        "description": "The list of rules that need to be evaluated for this outcome to be selected.",
                        "nullable": true
                    },
                    "comparisons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ComparisonAPI"
                        },
                        "description": "The list of child comparisons that need to be evaluated for this outcome to be selected. The comparison\r\nobject is recursive allowing rules to be nested: e.g. ({a} > {b} OR {c} <= {d}) AND {b} == {f}",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which the comparison should be evaluated with respect to its peers. The lowest number is evaluated first.",
                        "format": "int32"
                    }
                }
            },
            "FlowOutAPI": {
                "type": "object",
                "properties": {
                    "valueElementStateId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "valueElementFlowId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "flowId": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "valueElementExternalIdentifierId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    }
                }
            },
            "ControlPointAPI": {
                "type": "object",
                "properties": {
                    "x": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "y": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "OutcomeAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the outcome. This property is created by the service.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name to help identify this outcome in tooling and APIs.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the outcome.",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label that should appear with the outcome. For UI situations, this is typically the text that will\r\nappear on the button.",
                        "nullable": true
                    },
                    "nextMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the next map element in the flow that should be executed if this outcome is\r\nselected.",
                        "nullable": true
                    },
                    "pageActionType": {
                        "type": "string",
                        "description": "Determines if the data collected in this map element should be saved, and the type of validation that should\r\nbe applied when saving.",
                        "nullable": true
                    },
                    "isBulkAction": {
                        "type": "boolean",
                        "description": "Indicates that this outcome should be treated as a “bulk” operation."
                    },
                    "pageActionBindingType": {
                        "type": "string",
                        "description": "An arbitrary string value that indicates the type of button the outcome represents. This indicates to UX\r\ndesigners how they should render the button to running users.",
                        "nullable": true
                    },
                    "pageObjectBindingId": {
                        "type": "string",
                        "description": "The unique identifier for the page container or component this outcome should be bound to. If you bind an\r\noutcome to a container or component, it can also indicate additional functionality: e.g.\r\n<code>isBulkAction</code>, etc. It also helps player designers layout the page.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which the outcomes should be rendered relative to its peers. The lowest number is rendered first.",
                        "format": "int32"
                    },
                    "comparison": {
                        "$ref": "#/components/schemas/ComparisonAPI"
                    },
                    "flowOut": {
                        "$ref": "#/components/schemas/FlowOutAPI"
                    },
                    "controlPoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ControlPointAPI"
                        },
                        "description": "The array of control points (or “kinks”) in the outcome arrow as it appears in the flow diagram. If there\r\nare no control points, it is assumed the arrow for the outcome points directly from this map element to the\r\nnext map element.",
                        "nullable": true
                    },
                    "nextMapElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "className": {
                        "type": "string",
                        "description": "A space separated string of CSS classes to be applied to the outcome when rendering.",
                        "nullable": true
                    }
                }
            },
            "ValueElementInSubflowIdAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the Value to be referenced with this identifier.",
                        "format": "uuid"
                    }
                }
            },
            "SubflowArgumentAPI": {
                "type": "object",
                "properties": {
                    "valueElementInSubflowId": {
                        "$ref": "#/components/schemas/ValueElementInSubflowIdAPI"
                    },
                    "valueElementToApplyId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    }
                }
            },
            "SubflowAPI": {
                "type": "object",
                "properties": {
                    "flowId": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SubflowArgumentAPI"
                        },
                        "description": "The list of arguments passed in a subflow call",
                        "nullable": true
                    },
                    "restoreValuesOnJump": {
                        "type": "boolean",
                        "description": "Indicates if on jumping specified by the selectedMapElementPath property (so called \"long jump\"), the Engine should restore value elements from the archived frame\r\nwhen invoking this Subflow map element for the second (or more) time",
                        "nullable": true
                    },
                    "returnValuesOnJump": {
                        "type": "boolean",
                        "description": "Indicates if on jumping specified by the selectedMapElementPath property (so called \"long jump\"), the Engine should return value elements to the parent",
                        "nullable": true
                    },
                    "flowDeveloperName": {
                        "type": "string",
                        "description": "The developer name of the flow that is called as subflow",
                        "nullable": true
                    }
                }
            },
            "WaitAPI": {
                "type": "object",
                "properties": {
                    "days": {
                        "type": "integer",
                        "description": "The number of days this wait is configured to wait for before proceeding.",
                        "format": "int32"
                    },
                    "hours": {
                        "type": "integer",
                        "description": "The number of hours this wait is configured to wait for before proceeding.",
                        "format": "int32"
                    },
                    "minutes": {
                        "type": "integer",
                        "description": "The number of minutes this wait is configured to wait for before proceeding.",
                        "format": "int32"
                    },
                    "seconds": {
                        "type": "integer",
                        "description": "The number of seconds this wait is configured to wait for before proceeding.",
                        "format": "int32"
                    },
                    "relative": {
                        "type": "string",
                        "description": "The time to wait expressed as a phrase relative to the current time at execution. Such as \"In 2 days\"",
                        "nullable": true
                    },
                    "absoluteDate": {
                        "type": "string",
                        "description": "A fixed date and time whereafter the wait will be deemed complete.",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "MapElementAPI": {
                "type": "object",
                "properties": {
                    "groupElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Group that contains this Map Element. If a Map Element is inside a Group, it inherits certain behaviors of the parent Group. For example, a Swimlane Group wraps all child Map Elements in a security context.",
                        "nullable": true
                    },
                    "x": {
                        "type": "integer",
                        "description": "The x location of the Map Element on the Flow diagram.",
                        "format": "int32"
                    },
                    "y": {
                        "type": "integer",
                        "description": "The y location of the Map Element on the Flow diagram.",
                        "format": "int32"
                    },
                    "pageElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "pageElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "outcomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OutcomeAPI"
                        },
                        "description": "The list of outcomes that are available for this Map Element. An Outcome is used to connect the flow of execution from one Map Element in the Flow to another. An Outcome can take the form of a Page button, but also define system steps such as rules.",
                        "nullable": true
                    },
                    "subflow": {
                        "$ref": "#/components/schemas/SubflowAPI"
                    },
                    "wait": {
                        "$ref": "#/components/schemas/WaitAPI"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "GroupElementAPI": {
                "type": "object",
                "properties": {
                    "groupElementId": {
                        "type": "string",
                        "description": "The unique identifier for the group element that holds this group element.",
                        "nullable": true
                    },
                    "x": {
                        "type": "integer",
                        "description": "The x location of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "y": {
                        "type": "integer",
                        "description": "The y location of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "height": {
                        "type": "integer",
                        "description": "The height of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "width": {
                        "type": "integer",
                        "description": "The width of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "authorization": {
                        "$ref": "#/components/schemas/GroupAuthorizationAPI"
                    },
                    "isOpen": {
                        "type": "boolean",
                        "description": "Is the Group open in the buildtime editor. default: true"
                    },
                    "identityProvider": {
                        "$ref": "#/components/schemas/FlowIdentityProviderAPI"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "FlowGraphRequestAPI": {
                "type": "object",
                "properties": {
                    "mapElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MapElementAPI"
                        },
                        "description": "An array of map elements that are part of the flow graph.",
                        "nullable": true
                    },
                    "groupElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupElementAPI"
                        },
                        "description": "An array of group elements that are part of the flow graph.",
                        "nullable": true
                    },
                    "editingToken": {
                        "type": "string",
                        "description": "A unique token for this particular editing session",
                        "format": "uuid",
                        "nullable": true
                    },
                    "id": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the flow. When referencing flows by name, this is the name you should use in your referencing.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the Flow.",
                        "nullable": true
                    },
                    "startMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the first element in the flow. This element is always of the `START` map element type.",
                        "nullable": true
                    },
                    "allowJumping": {
                        "type": "boolean",
                        "description": "Indicates that the builder of the flow will allow users to jump to any position in the Flow regardless of outcomes and/or navigation."
                    },
                    "enableHistoricalNavigation": {
                        "type": "boolean",
                        "description": "Indicates that the builder of the flow wants to enable/disable both the UI and api for historical navigation."
                    },
                    "stateExpirationLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "idleStateExpirationLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "authorization": {
                        "$ref": "#/components/schemas/GroupAuthorizationAPI"
                    },
                    "identityProvider": {
                        "$ref": "#/components/schemas/FlowIdentityProviderAPI"
                    }
                }
            },
            "FlowGraphResponseAPI": {
                "type": "object",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The unique identifier for the tenant holding the graph.",
                        "nullable": true
                    },
                    "dateModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "mapElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MapElementAPI"
                        },
                        "description": "An array of map elements that are part of the flow graph.",
                        "nullable": true
                    },
                    "groupElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupElementAPI"
                        },
                        "description": "An array of group elements that are part of the flow graph.",
                        "nullable": true
                    },
                    "editingToken": {
                        "type": "string",
                        "description": "A unique token for this particular editing session",
                        "format": "uuid",
                        "nullable": true
                    },
                    "id": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the flow. When referencing flows by name, this is the name you should use in your referencing.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the Flow.",
                        "nullable": true
                    },
                    "startMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the first element in the flow. This element is always of the `START` map element type.",
                        "nullable": true
                    },
                    "allowJumping": {
                        "type": "boolean",
                        "description": "Indicates that the builder of the flow will allow users to jump to any position in the Flow regardless of outcomes and/or navigation."
                    },
                    "enableHistoricalNavigation": {
                        "type": "boolean",
                        "description": "Indicates that the builder of the flow wants to enable/disable both the UI and api for historical navigation."
                    },
                    "stateExpirationLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "idleStateExpirationLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "authorization": {
                        "$ref": "#/components/schemas/GroupAuthorizationAPI"
                    },
                    "identityProvider": {
                        "$ref": "#/components/schemas/FlowIdentityProviderAPI"
                    }
                }
            },
            "FlowGraphElementIDRequestAPI": {
                "type": "object",
                "properties": {
                    "mapElementIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of map elements ids that exist in the flow graph.",
                        "nullable": true
                    },
                    "groupElementIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of group elements ids that exist in the flow graph.",
                        "nullable": true
                    }
                }
            },
            "DoubleValueElementIdAPIOneOf": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "object",
                        "nullable": true,
                        "readOnly": true
                    },
                    "index": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "isT0": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isT1": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "asT0": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "asT1": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    }
                }
            },
            "OperationAPI": {
                "type": "object",
                "properties": {
                    "valueElementToApplyId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "valueElementToReferenceId": {
                        "$ref": "#/components/schemas/DoubleValueElementIdAPIOneOf"
                    },
                    "macroElementToExecuteId": {
                        "type": "string",
                        "description": "The macro that should be executed for this operation.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which the operations should be executed. The lowest number is executed first.",
                        "format": "int32"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Whether the operation is disabled or not"
                    },
                    "macroElementToExecuteDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToApplyDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToApplyPropertyDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToReferenceDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToReferencePropertyDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToApplyCommand": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToReferenceCommand": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToApplyCommandFriendly": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToReferenceCommandFriendly": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToApplyContentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToApplyPropertyContentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToApplyTypeElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToReferenceContentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToReferencePropertyContentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToReferenceTypeElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToApplySortById": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToApplySortByDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToApplySortDirection": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ListenerAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "A name for the Listener. This is useful for keeping track of the Listener in the tooling and API.",
                        "nullable": true
                    },
                    "serviceElementId": {
                        "type": "string",
                        "description": "The ID of the service that this listener is associated with. The service must support listening to the\r\nobject you've selected to listen to.",
                        "nullable": true
                    },
                    "listenerType": {
                        "type": "string",
                        "description": "The type of events being listened for. The value depends on the service implementation. Builders should\r\nrefer to the documentation of the service being used.",
                        "nullable": true
                    },
                    "valueElementToReferenceForListeningId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Arbitrary key value pairs that may help the service execute the listener.",
                        "nullable": true
                    }
                }
            },
            "MessageInputAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the input defined by the Service definition of this message action. This name will be used by the Service Implementation to match which value is being assigned.",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content type for the message input as specified by the Service.",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which this input should appear to an person building Flows.",
                        "format": "int32"
                    },
                    "valueElementToReferenceDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "typeElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToReferenceId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    }
                }
            },
            "MessageOutputAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the output defined by the Service definition of this message action. This name will be used by the Service Implementation to match which value is being sent back.",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content type for this output as provided by the Service.",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which this output should appear to Flow builders.",
                        "format": "int32"
                    },
                    "valueElementToReferenceDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "typeElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToApplyId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    }
                }
            },
            "MessageActionAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The developer name to help identify this message action in tooling and APIs.",
                        "nullable": true
                    },
                    "serviceElementId": {
                        "type": "string",
                        "description": "The ID of the service that this message action will be executed against. The service also defines the list\r\ninputs/outputs that need to be configured for this message action.",
                        "nullable": true
                    },
                    "serviceElementDeveloperName": {
                        "type": "string",
                        "description": "The name of the service that this message action will be executed against.",
                        "nullable": true
                    },
                    "uriPart": {
                        "type": "string",
                        "description": "The unique URI part that should be used when invoking the service. The URI part will inform the service\r\nimplementation which message action you are executing against.",
                        "nullable": true
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageInputAPI"
                        },
                        "description": "The list of message inputs that should be sent to the service when this action is invoked. The list of\r\ninputs is defined by the service.",
                        "nullable": true
                    },
                    "outputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageOutputAPI"
                        },
                        "description": "The list of message outputs that should be sent back from the service and applied to values in the executing\r\nflow state. The list of outputs is defined by the service.",
                        "nullable": true
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Arbitrary key value pairs that may help the service execute the message action.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which the message action should be performed in relation to other message actions. If message\r\nactions have the same order, they will be performed in parallel to improve flow performance.",
                        "format": "int32"
                    },
                    "serviceActionName": {
                        "type": "string",
                        "nullable": true
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Whether the message action is disabled or not"
                    },
                    "selectedOutcomeId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ListFilterOrderByConfigAPI": {
                "type": "object",
                "properties": {
                    "orderByTypeElementPropertyId": {
                        "type": "string",
                        "description": "The unique identifier for the property in the Type (associated with this filter) that should be used for ordering the results.",
                        "nullable": true
                    },
                    "orderByDirectionType": {
                        "type": "string",
                        "description": "The direction in which to order the results.",
                        "nullable": true
                    }
                }
            },
            "ListFilterSearchCriteriaConfigAPI": {
                "type": "object",
                "properties": {
                    "columnTypeElementPropertyId": {
                        "type": "string",
                        "description": "The unique identifier for the column in the bound component data to filter by.",
                        "nullable": true
                    }
                }
            },
            "ListFilterPropertyConfigAPI": {
                "type": "object",
                "properties": {
                    "typeElementPropertyId": {
                        "type": "string",
                        "description": "The ID of the property on the type element",
                        "format": "uuid"
                    }
                }
            },
            "ListFilterWhereConfigAPI": {
                "type": "object",
                "properties": {
                    "columnTypeElementPropertyId": {
                        "type": "string",
                        "description": "The unique identifier for the column in the bound component data to filter by.",
                        "nullable": true
                    },
                    "criteriaType": {
                        "type": "string",
                        "description": "The criteria to filter the list data by.",
                        "nullable": true
                    },
                    "criteriaTypeFriendly": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToReferenceId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "columnTypeElementPropertyDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "valueElementToReferenceDeveloperName": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ListFilterMinimalConfigAPI": {
                "type": "object",
                "properties": {
                    "comparisonType": {
                        "type": "string",
                        "description": "The comparison when evaluating the 'where' entries.  This is either \"AND\" or \"OR\" and we do not support nesting (just yet anyway).",
                        "nullable": true
                    },
                    "where": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterWhereConfigAPI"
                        },
                        "description": "The filter criteria that should be applied during the lookup.",
                        "nullable": true
                    },
                    "listFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterMinimalConfigAPI"
                        },
                        "description": "A list of nested minimal ListFilters that can be used for grouped ordering and comparisons",
                        "nullable": true
                    }
                }
            },
            "ListFilterConfigAPI": {
                "type": "object",
                "properties": {
                    "filterId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "orderByTypeElementPropertyId": {
                        "type": "string",
                        "description": "The unique identifier for the property in the Type (associated with this filter) that should be used for ordering the results.",
                        "nullable": true
                    },
                    "orderByDirectionType": {
                        "type": "string",
                        "description": "The direction in which to order the results.",
                        "nullable": true
                    },
                    "orderBy": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterOrderByConfigAPI"
                        },
                        "description": "The ordering clauses for the result set",
                        "nullable": true
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of results to return from the request.",
                        "format": "int32"
                    },
                    "filterByProvidedObjects": {
                        "type": "boolean",
                        "description": "Use the list of provided objects as the filter for the lookup.  This allows us to refresh data that can be transient in the remote system."
                    },
                    "searchCriteria": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterSearchCriteriaConfigAPI"
                        },
                        "nullable": true
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterPropertyConfigAPI"
                        },
                        "description": "A list of properties to select. Useful when it's not desirable to load the entire object, for performance\r\nand efficiency.",
                        "nullable": true
                    },
                    "comparisonType": {
                        "type": "string",
                        "description": "The comparison when evaluating the 'where' entries.  This is either \"AND\" or \"OR\" and we do not support nesting (just yet anyway).",
                        "nullable": true
                    },
                    "where": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterWhereConfigAPI"
                        },
                        "description": "The filter criteria that should be applied during the lookup.",
                        "nullable": true
                    },
                    "listFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterMinimalConfigAPI"
                        },
                        "description": "A list of nested minimal ListFilters that can be used for grouped ordering and comparisons",
                        "nullable": true
                    }
                }
            },
            "CommandAPI": {
                "type": "object",
                "properties": {
                    "commandType": {
                        "type": "string",
                        "description": "The type of command to be executed.",
                        "nullable": true
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Additional key value pairs that may help the Command execute.",
                        "nullable": true
                    }
                }
            },
            "ObjectDataRequestConfigAPI": {
                "type": "object",
                "properties": {
                    "typeElementBindingId": {
                        "type": "string",
                        "description": "The unique identifier for the binding that should be used on the provided Type.",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Type that will define the structure of the data returned by this request.",
                        "nullable": true
                    },
                    "listFilter": {
                        "$ref": "#/components/schemas/ListFilterConfigAPI"
                    },
                    "command": {
                        "$ref": "#/components/schemas/CommandAPI"
                    },
                    "typeElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "description": "This object stores the configuration information we need to make object data requests as part of a map element request or\r\nas part of a form field."
            },
            "DataActionAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The developer name to help identify this data action in tooling and APIs.",
                        "nullable": true
                    },
                    "crudOperationType": {
                        "type": "string",
                        "description": "The operation (<code>SAVE</code>, <code>LOAD</code> or <code>DELETE</code>) that should be performed on the\r\nobjects provided in this data action.",
                        "nullable": true
                    },
                    "isSmartSave": {
                        "type": "boolean",
                        "description": "Indicates if the data should saved using tracked changes in the data. Smart save must be supported in the\r\nunderlying service as the platform will only send changed data back to the service rather than the complete\r\nobject or list."
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which the data action should be performed in relation to other data actions. The order must be\r\ngreater than or equal to zero. If data actions have the same order, they will be performed in parallel to\r\nimprove flow performance.",
                        "format": "int32"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Whether the data action is disabled or not"
                    },
                    "valueElementToReferenceId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "valueElementToApplyId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "objectDataRequest": {
                        "$ref": "#/components/schemas/ObjectDataRequestConfigAPI"
                    }
                }
            },
            "NavigationOverrideAPI": {
                "type": "object",
                "properties": {
                    "navigationElementId": {
                        "type": "string",
                        "description": "The unique identifier for the navigation this override is referencing.",
                        "nullable": true
                    },
                    "navigationItemId": {
                        "type": "string",
                        "description": "The unique identifier for the specific navigation item in the navigation being referenced.",
                        "nullable": true
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the navigation item being referenced should be enabled. If the navigation item has\r\n<code>isEnabled</code> set to <code>false</code>, the user will see the navigation item, but it will not\r\nfunction."
                    },
                    "isVisible": {
                        "type": "boolean",
                        "description": "Indicates if the navigation item being referenced should be visible. If the navigation item has\r\n<code>isVisible</code> set to <code>false</code>, it will no longer appear to the user in the navigation.\r\nThis will include child navigation items."
                    },
                    "locationMapElementId": {
                        "type": "string",
                        "description": "The map element that the navigation item should point to based on this override.",
                        "nullable": true
                    },
                    "locationMapElementDeveloperName": {
                        "type": "string",
                        "description": "The name of the map element that the navigation item should point to based on this override.",
                        "nullable": true
                    },
                    "navigationElementDeveloperName": {
                        "type": "string",
                        "description": "The name of the navigation being referenced.",
                        "nullable": true
                    },
                    "navigationItemDeveloperName": {
                        "type": "string",
                        "description": "The name of the navigation item in the navigation being referenced.",
                        "nullable": true
                    }
                }
            },
            "VoteAPI": {
                "type": "object",
                "properties": {
                    "voteType": {
                        "type": "string",
                        "description": "The type of Vote this metadata represents. The <code>voteType</code> is determined by the service.",
                        "nullable": true
                    },
                    "minimumCount": {
                        "type": "integer",
                        "description": "The minimum number of users that need to click on an outcome before the flow will proceed to the next step.",
                        "format": "int32"
                    },
                    "minimumPercent": {
                        "type": "integer",
                        "description": "The minimum percentage of users that need to click on an outcome before the flow will proceed to the next\r\nstep. The percentage is determined based on the authorization context of either the flow or the group\r\nswimlane (if the map element is contained in a swimlane).",
                        "format": "int32"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Arbitrary key value pairs that may help the service execute the vote. Use attributes to extend the vote\r\nmetadata with implementation specific settings.",
                        "nullable": true
                    }
                }
            },
            "MapElementResponseAPI": {
                "type": "object",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the Map Element was first created.",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the last modification was made to the Map Element.",
                        "format": "date-time"
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "operations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationAPI"
                        },
                        "description": "The list of operations that should be performed when this Map Element executes. Operations are used to change the value of Values in the executing Flow (State).",
                        "nullable": true
                    },
                    "listeners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListenerAPI"
                        },
                        "description": "The list of listeners that should be registered when this Map Element executes.",
                        "nullable": true
                    },
                    "viewMessageAction": {
                        "$ref": "#/components/schemas/MessageActionAPI"
                    },
                    "messageActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageActionAPI"
                        },
                        "description": "The list of message actions that should be executed when this Map Element executes. The message action objects define the interface of inputs/outputs for calling against each Service message.",
                        "nullable": true
                    },
                    "dataActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataActionAPI"
                        },
                        "description": "The list of data actions that should be executed when this map element executes. The data action objects\r\ndefine the values and bindings that should be used to perform CRUD operations against each service and value.",
                        "nullable": true
                    },
                    "navigationOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationOverrideAPI"
                        },
                        "description": "The list of navigation overrides that should be applied when this Map Element executes.",
                        "nullable": true
                    },
                    "vote": {
                        "$ref": "#/components/schemas/VoteAPI"
                    },
                    "clearNavigationOverrides": {
                        "type": "boolean"
                    },
                    "postUpdateToStream": {
                        "type": "boolean",
                        "description": "Indicates if this Map Element should post an update to the collaboration stream."
                    },
                    "userContent": {
                        "type": "string",
                        "description": "The content that should be shown to the user at this step in the Flow. This property should only be used for very simple Flows and informational UI. For anything more than simple messaging, use the Page and associate it with this Map Element using the pageElementId property.",
                        "nullable": true
                    },
                    "userContentDateModified": {
                        "type": "string",
                        "description": "The date the Map Elements usercontent was modified.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "statusMessage": {
                        "type": "string",
                        "description": "The content that should be shown to the user while waiting for a system step to complete.",
                        "nullable": true
                    },
                    "postUpdateMessage": {
                        "type": "string",
                        "description": "The content of the message that should be posted to the collaboration stream.",
                        "nullable": true
                    },
                    "notAuthorizedMessage": {
                        "type": "string",
                        "description": "The content that should be shown to the user if they are not authorized to take action on this Map Element.",
                        "nullable": true
                    },
                    "postUpdateWhenType": {
                        "type": "string",
                        "description": "The point at which the post should be made to the collaboration stream.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Type with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements."
                    },
                    "groupElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Group that contains this Map Element. If a Map Element is inside a Group, it inherits certain behaviors of the parent Group. For example, a Swimlane Group wraps all child Map Elements in a security context.",
                        "nullable": true
                    },
                    "x": {
                        "type": "integer",
                        "description": "The x location of the Map Element on the Flow diagram.",
                        "format": "int32"
                    },
                    "y": {
                        "type": "integer",
                        "description": "The y location of the Map Element on the Flow diagram.",
                        "format": "int32"
                    },
                    "pageElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "pageElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "outcomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OutcomeAPI"
                        },
                        "description": "The list of outcomes that are available for this Map Element. An Outcome is used to connect the flow of execution from one Map Element in the Flow to another. An Outcome can take the form of a Page button, but also define system steps such as rules.",
                        "nullable": true
                    },
                    "subflow": {
                        "$ref": "#/components/schemas/SubflowAPI"
                    },
                    "wait": {
                        "$ref": "#/components/schemas/WaitAPI"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    }
                }
            },
            "GroupElementResponseAPI": {
                "type": "object",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the Group was first created.",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the last modification was made to the Group.",
                        "format": "date-time"
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a group with the same developer name as the one provided\r\nand match them up by name as opposed to by ID."
                    },
                    "groupElementId": {
                        "type": "string",
                        "description": "The unique identifier for the group element that holds this group element.",
                        "nullable": true
                    },
                    "x": {
                        "type": "integer",
                        "description": "The x location of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "y": {
                        "type": "integer",
                        "description": "The y location of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "height": {
                        "type": "integer",
                        "description": "The height of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "width": {
                        "type": "integer",
                        "description": "The width of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "authorization": {
                        "$ref": "#/components/schemas/GroupAuthorizationAPI"
                    },
                    "isOpen": {
                        "type": "boolean",
                        "description": "Is the Group open in the buildtime editor. default: true"
                    },
                    "identityProvider": {
                        "$ref": "#/components/schemas/FlowIdentityProviderAPI"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    }
                }
            },
            "FlowGraphElementResponseAPI": {
                "type": "object",
                "properties": {
                    "mapElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MapElementResponseAPI"
                        },
                        "description": "An array of map elements that are part of the flow graph.",
                        "nullable": true
                    },
                    "groupElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupElementResponseAPI"
                        },
                        "description": "An array of group elements that are part of the flow graph.",
                        "nullable": true
                    }
                }
            },
            "MapElementRequestAPI": {
                "type": "object",
                "properties": {
                    "operations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationAPI"
                        },
                        "description": "The list of operations that should be performed when this Map Element executes. Operations are used to change the value of Values in the executing Flow (State).",
                        "nullable": true
                    },
                    "listeners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListenerAPI"
                        },
                        "description": "The list of listeners that should be registered when this Map Element executes.",
                        "nullable": true
                    },
                    "viewMessageAction": {
                        "$ref": "#/components/schemas/MessageActionAPI"
                    },
                    "messageActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageActionAPI"
                        },
                        "description": "The list of message actions that should be executed when this Map Element executes. The message action objects define the interface of inputs/outputs for calling against each Service message.",
                        "nullable": true
                    },
                    "dataActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataActionAPI"
                        },
                        "description": "The list of data actions that should be executed when this map element executes. The data action objects\r\ndefine the values and bindings that should be used to perform CRUD operations against each service and value.",
                        "nullable": true
                    },
                    "navigationOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationOverrideAPI"
                        },
                        "description": "The list of navigation overrides that should be applied when this Map Element executes.",
                        "nullable": true
                    },
                    "vote": {
                        "$ref": "#/components/schemas/VoteAPI"
                    },
                    "clearNavigationOverrides": {
                        "type": "boolean"
                    },
                    "postUpdateToStream": {
                        "type": "boolean",
                        "description": "Indicates if this Map Element should post an update to the collaboration stream."
                    },
                    "userContent": {
                        "type": "string",
                        "description": "The content that should be shown to the user at this step in the Flow. This property should only be used for very simple Flows and informational UI. For anything more than simple messaging, use the Page and associate it with this Map Element using the pageElementId property.",
                        "nullable": true
                    },
                    "userContentDateModified": {
                        "type": "string",
                        "description": "The date the Map Elements usercontent was modified.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "statusMessage": {
                        "type": "string",
                        "description": "The content that should be shown to the user while waiting for a system step to complete.",
                        "nullable": true
                    },
                    "postUpdateMessage": {
                        "type": "string",
                        "description": "The content of the message that should be posted to the collaboration stream.",
                        "nullable": true
                    },
                    "notAuthorizedMessage": {
                        "type": "string",
                        "description": "The content that should be shown to the user if they are not authorized to take action on this Map Element.",
                        "nullable": true
                    },
                    "postUpdateWhenType": {
                        "type": "string",
                        "description": "The point at which the post should be made to the collaboration stream.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Type with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements."
                    },
                    "groupElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Group that contains this Map Element. If a Map Element is inside a Group, it inherits certain behaviors of the parent Group. For example, a Swimlane Group wraps all child Map Elements in a security context.",
                        "nullable": true
                    },
                    "x": {
                        "type": "integer",
                        "description": "The x location of the Map Element on the Flow diagram.",
                        "format": "int32"
                    },
                    "y": {
                        "type": "integer",
                        "description": "The y location of the Map Element on the Flow diagram.",
                        "format": "int32"
                    },
                    "pageElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "pageElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "outcomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OutcomeAPI"
                        },
                        "description": "The list of outcomes that are available for this Map Element. An Outcome is used to connect the flow of execution from one Map Element in the Flow to another. An Outcome can take the form of a Page button, but also define system steps such as rules.",
                        "nullable": true
                    },
                    "subflow": {
                        "$ref": "#/components/schemas/SubflowAPI"
                    },
                    "wait": {
                        "$ref": "#/components/schemas/WaitAPI"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "GroupElementRequestAPI": {
                "type": "object",
                "properties": {
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a group with the same developer name as the one provided\r\nand match them up by name as opposed to by ID."
                    },
                    "groupElementId": {
                        "type": "string",
                        "description": "The unique identifier for the group element that holds this group element.",
                        "nullable": true
                    },
                    "x": {
                        "type": "integer",
                        "description": "The x location of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "y": {
                        "type": "integer",
                        "description": "The y location of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "height": {
                        "type": "integer",
                        "description": "The height of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "width": {
                        "type": "integer",
                        "description": "The width of the Group on the Flow diagram.",
                        "format": "int32"
                    },
                    "authorization": {
                        "$ref": "#/components/schemas/GroupAuthorizationAPI"
                    },
                    "isOpen": {
                        "type": "boolean",
                        "description": "Is the Group open in the buildtime editor. default: true"
                    },
                    "identityProvider": {
                        "$ref": "#/components/schemas/FlowIdentityProviderAPI"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "FlowGraphElementRequestAPI": {
                "type": "object",
                "properties": {
                    "mapElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MapElementRequestAPI"
                        },
                        "description": "An array of map elements that are part of the flow graph.",
                        "nullable": true
                    },
                    "groupElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupElementRequestAPI"
                        },
                        "description": "An array of group elements that are part of the flow graph.",
                        "nullable": true
                    }
                }
            },
            "PageTagAPI": {
                "type": "object",
                "properties": {
                    "valueElementToReferenceId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "tagElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Tag that this tag is associated. This Tag will be used to provide the Tag name at runtime and also ensure Tag content and object type references are maintained.",
                        "nullable": true
                    }
                }
            },
            "ValueToResetAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The reference to the Value that should be reset.",
                        "format": "uuid"
                    },
                    "resetType": {
                        "type": "string",
                        "description": "The mode for resetting the value e.g CLEAR or DEFAULT_VALUE",
                        "nullable": true
                    }
                }
            },
            "NavigationItemAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the NavigationItem. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests. This property is created by the service.",
                        "nullable": true
                    },
                    "locationMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Map Element that this NavigationItem \"points\" to.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the Navigation. This is useful for keeping track of the Navigation in the modeling tool and API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the Navigation.",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label to display the user.",
                        "nullable": true
                    },
                    "navigationItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationItemAPI"
                        },
                        "description": "The navigation items that are available for this NavigationItem. The navigation items are the \"links\" the user can use to navigate around your Flow.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which this NavigationItem should appear in relation to other sibling NavigationItems.",
                        "format": "int32"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageTagAPI"
                        },
                        "description": "The list of tags that are associated with this NavigationItem.",
                        "nullable": true
                    },
                    "valuesToReset": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValueToResetAPI"
                        },
                        "description": "The list of values to reset that are associated with this navigation.",
                        "nullable": true
                    }
                }
            },
            "NavigationElementResponseAPI": {
                "type": "object",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the Navigation was first created.",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the last modification was made to the Navigation.",
                        "format": "date-time"
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label to display to the user.",
                        "nullable": true
                    },
                    "navigationItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationItemAPI"
                        },
                        "description": "The navigation items that are available for this navigation. The navigation items are the \"links\" the user\r\ncan use to navigate around your flow.",
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageTagAPI"
                        },
                        "description": "The list of tags that are associated with this navigation.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a navigation with the same developer name as the one\r\nprovided and match them up by name as opposed to by ID. This is useful when creating scripts to create\r\nflows, as you can use the <code>developerName</code> property as the reference as opposed to needing to know\r\nthe IDs of all created elements."
                    },
                    "persistState": {
                        "type": "boolean",
                        "description": "Indicates if the platform should save state when navigating between elements"
                    },
                    "persistValues": {
                        "type": "boolean",
                        "description": "Indicates if the platform should save values when navigating between elements"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    }
                }
            },
            "PageContainerAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the page container. This property is created by the service.",
                        "nullable": true
                    },
                    "containerType": {
                        "type": "string",
                        "description": "The type of container to render.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the page container. This will be used to identify the container in your layout, and\r\nthis can be used to ease the creation of the page metadata. Developers should ensure that the developer name\r\nis unique for the page.",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label for this particular container. This will appear as a title heading to the running user(s).",
                        "nullable": true
                    },
                    "pageContainers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageContainerAPI"
                        },
                        "description": "The tree hierarchy of page containers that are children of this page container.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which the page container should be rendered relative to its peers. The lowest number is\r\nrendered first.",
                        "format": "int32"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Arbitrary key value pairs that may help the container render/execute. Use attributes to extend the page\r\ncontainer metadata with implementation specific settings.",
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageTagAPI"
                        },
                        "description": "The list of page tags that allow additional metadata to be applied to the page container. Conceptually tags\r\ncan be used to mimic HTML and CSS but can also be used to provide data to enrich functionality of the page\r\ncontainer.",
                        "nullable": true
                    }
                }
            },
            "FileDataRequestConfigAPI": {
                "type": "object",
                "properties": {
                    "serviceElementId": {
                        "type": "string",
                        "description": "The Id for the service element associated with this file data.  The service element will give us the connection settings\r\nand allow us to validate various bits of info.",
                        "nullable": true
                    },
                    "resourcePath": {
                        "type": "string",
                        "description": "The reference for the folder - this can be an identifier or a path - whatever the service implementation needs.",
                        "nullable": true
                    },
                    "resourceFile": {
                        "type": "string",
                        "description": "The reference for the file - this can be an identifier or a file name - whatever the service implementation needs.",
                        "nullable": true
                    }
                }
            },
            "PageComponentColumnAPI": {
                "type": "object",
                "properties": {
                    "typeElementPropertyId": {
                        "type": "string",
                        "description": "The unique identifier for the property in that should be displayed in this column. This pertains to the Type for the bound data or the object data request - not the underlying value binding.",
                        "nullable": true
                    },
                    "isBound": {
                        "type": "boolean",
                        "description": "Indicates that this specific column is bound to the underlying value binding. This can only be true if the content type of this property is the same as the content type of the bound value. It is also not valid for this to be true for multiselect data components."
                    },
                    "boundTypeElementPropertyId": {
                        "type": "string",
                        "description": "The unique identifier for the property in the value binding that should be used to store the selected value. This pertains to the Type for the value binding, not the Type for the bound data or the object data request.",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label that should be used for this column. Often the label is displayed as the column header, but for mobile applications, this may be used inline with the object entry data.",
                        "nullable": true
                    },
                    "isDisplayValue": {
                        "type": "boolean",
                        "description": "Indicates that this value should be shown in the UI to the end user."
                    },
                    "isEditable": {
                        "type": "boolean",
                        "description": "Indicates that this value is editable inline in this component."
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which the page component column should be rendered relative to its peers. The lowest number is rendered first.",
                        "format": "int32"
                    },
                    "typeElementPropertyToDisplayId": {
                        "type": "string",
                        "nullable": true
                    },
                    "componentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "typeElementPropertyDeveloperName": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "PageComponentValidationType": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer",
                "format": "int32"
            },
            "DoubleStringValueElementIdAPIOneOf": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "object",
                        "nullable": true,
                        "readOnly": true
                    },
                    "index": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "isT0": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isT1": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isT2": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "asT0": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "asT1": {
                        "type": "string",
                        "nullable": true,
                        "readOnly": true
                    },
                    "asT2": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    }
                }
            },
            "PageComponentValidationAPI": {
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/PageComponentValidationType"
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "value": {
                        "$ref": "#/components/schemas/DoubleStringValueElementIdAPIOneOf"
                    }
                }
            },
            "PageComponentAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the page component. This property is created by the service.",
                        "nullable": true
                    },
                    "isEditable": {
                        "type": "boolean",
                        "description": "Indicates if the user is able to edit the information associated with this component. The editable status\r\ncan be altered by page conditions."
                    },
                    "valueElementValueBindingReferenceId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "valueElementDataBindingReferenceId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "objectDataRequest": {
                        "$ref": "#/components/schemas/ObjectDataRequestConfigAPI"
                    },
                    "fileDataRequest": {
                        "$ref": "#/components/schemas/FileDataRequestConfigAPI"
                    },
                    "imageUri": {
                        "type": "string",
                        "description": "The URI of the image that should be presented to the running user(s) as part of this page component. This\r\nproperty will be parsed if value references are used in the URI.",
                        "nullable": true
                    },
                    "pageContainerId": {
                        "type": "string",
                        "description": "The unique identifier for the page container this component should be rendered in.",
                        "nullable": true
                    },
                    "pageContainerDeveloperName": {
                        "type": "string",
                        "description": "The unique developer name for the page container this component should be rendered in.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "We have a developer name field solely for external services, so they can match fields appropriately with\r\nrespect to form layouts for types.",
                        "nullable": true
                    },
                    "componentType": {
                        "type": "string",
                        "description": "The type of component to render. Developers can define their own component types, but will need to make sure\r\nthese are then supported in the player.",
                        "nullable": true
                    },
                    "content": {
                        "type": "string",
                        "description": "The content that should be presented to the running user(s) as part of this page component. This property\r\nwill be parsed if value references are used in the content.",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label for this particular component. This will appear as a title heading to the running user(s).",
                        "nullable": true
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageComponentColumnAPI"
                        },
                        "description": "The list of columns to show when rendering the data from an <code>objectDataRequest</code> or\r\n<code>valueElementDataBindingReferenceId</code> lookup.",
                        "nullable": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "The number of characters that should be displayed for the page component.",
                        "format": "int32"
                    },
                    "maxSize": {
                        "type": "integer",
                        "description": "The maximum number of characters that can be entered by the running user(s) for this page component.",
                        "format": "int32"
                    },
                    "height": {
                        "type": "integer",
                        "description": "The height of this component. For form controls, this is the number of rows of characters to show. For image\r\ncomponents, this is the height in pixels of the image.",
                        "format": "int32"
                    },
                    "width": {
                        "type": "integer",
                        "description": "The width of this component. For form controls, this is the number of columns of characters to show. For\r\nimage components, this is the width in pixels of the image.",
                        "format": "int32"
                    },
                    "isRequired": {
                        "type": "boolean",
                        "description": "Indicates if the user is required to complete the information associated with this component. The required\r\nstatus can be altered by page conditions."
                    },
                    "isMultiSelect": {
                        "type": "boolean",
                        "description": "Indicates if the user can select more than one data object associated with this component. If the component\r\nsupports multiselection, then the bound value element must have a content type of <code>ContentList</code>."
                    },
                    "isSearchable": {
                        "type": "boolean",
                        "description": "Indicates if the user is able to search using this component."
                    },
                    "hintValue": {
                        "type": "string",
                        "description": "Specifies information that can be given to the user to help them complete the information associated with\r\nthis component. For form controls, this is typically text that's displayed inside the input that disappears\r\nwhen the user focuses on the component.",
                        "nullable": true
                    },
                    "helpInfo": {
                        "type": "string",
                        "description": "Specifies information that can be given to the user to help them complete the information associated with\r\nthis component. For form controls, this is typically shown to the user when they hover over the component\r\nor click a help link beside the component.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which the page component should be rendered relative to its peers. The lowest number is\r\nrendered first.",
                        "format": "int32"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Arbitrary key value pairs that may help the component render/execute. Use attributes to extend the page\r\ncomponent metadata with implementation specific settings.",
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageTagAPI"
                        },
                        "description": "The list of page tags that allow additional metadata to be applied to the page component. Conceptually,\r\ntags can be used to mimic HTML and CSS but can also be used to provide data to enrich functionality of the\r\npage component.",
                        "nullable": true
                    },
                    "validations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageComponentValidationAPI"
                        },
                        "nullable": true
                    },
                    "className": {
                        "type": "string",
                        "description": "A space separated string of CSS classes to be applied to the component when rendering.",
                        "nullable": true
                    },
                    "row": {
                        "type": "integer",
                        "description": "Row position of a grid item (component).",
                        "format": "int32"
                    },
                    "column": {
                        "type": "integer",
                        "description": "Column position of a grid item (component).",
                        "format": "int32"
                    },
                    "rowSpan": {
                        "type": "integer",
                        "description": "Size of a grid item (component) measured in rows.",
                        "format": "int32"
                    },
                    "colSpan": {
                        "type": "integer",
                        "description": "Size of a grid item (component) measured in columns.",
                        "format": "int32"
                    }
                }
            },
            "PageObjectReferenceAPI": {
                "type": "object",
                "properties": {
                    "pageObjectReferenceId": {
                        "type": "string",
                        "description": "The identifier for the field post save - this is used in place of the field reference.",
                        "nullable": true
                    },
                    "typeElementPropertyId": {
                        "type": "string",
                        "description": "The identifier for any inner reference value references.  The Id in the form is not the shared element id but rather\r\nthe form element id.  However, for inner references, we can use the type element id as this is not specific to the shared\r\nelement binding - but rather the object or list type generically.",
                        "nullable": true
                    },
                    "pageObjectReferenceDeveloperName": {
                        "type": "string",
                        "description": "The temporary field reference from the client application - pre-save.  The notation for this should be the fully qualified\r\npath from the root form: e.g. [Section Name].[Column Name].[Cell Name].[Field Name]",
                        "nullable": true
                    },
                    "valueElementToReferenceId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "metadataType": {
                        "type": "string",
                        "description": "The meta-data to reference on the field:\r\nValue - the actual value of the field\r\nMetaData.Visible - indicates if the form element should be visible or not\r\nMetaData.Required - the required status of the input\r\nMetaData.Enabled - the enabled/disabled status of the input\r\nMetaData.Filter - only for lists - basically only show the entries that match a particular category (this will allow simply dynamic lists)\r\nMetaData.Validation - dynamically bind a validation rule to the input",
                        "nullable": true
                    }
                }
            },
            "PageRuleAPI": {
                "type": "object",
                "properties": {
                    "left": {
                        "$ref": "#/components/schemas/PageObjectReferenceAPI"
                    },
                    "criteriaType": {
                        "type": "string",
                        "description": "The criteria that should be used when evaluating this rule: e.g. EQUAL",
                        "nullable": true
                    },
                    "right": {
                        "$ref": "#/components/schemas/PageObjectReferenceAPI"
                    },
                    "generatedSummary": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "PageOperationAssignmentAPI": {
                "type": "object",
                "properties": {
                    "assignee": {
                        "$ref": "#/components/schemas/PageObjectReferenceAPI"
                    },
                    "assignor": {
                        "$ref": "#/components/schemas/PageObjectReferenceAPI"
                    }
                }
            },
            "PageOperationFilterAPI": {
                "type": "object",
                "properties": {
                    "pageComponentId": {
                        "type": "string",
                        "description": "This is the reference field to apply the filter information contained in this action.",
                        "nullable": true
                    },
                    "pageComponentDeveloperName": {
                        "type": "string",
                        "description": "A temporary reference to the field on which to apply this filter configuration.",
                        "nullable": true
                    },
                    "columnTypeElementPropertyId": {
                        "type": "string",
                        "description": "The unique identifier for the column in the bound component data to filter by. This property should only be used when filtering components that are bound to lists stored in the engine state. For filtering asynchronous data, use the objectDataRequest property.",
                        "nullable": true
                    },
                    "criteriaType": {
                        "type": "string",
                        "description": "The criteria to filter the list data by.",
                        "nullable": true
                    },
                    "filterValue": {
                        "$ref": "#/components/schemas/PageObjectReferenceAPI"
                    },
                    "objectDataRequest": {
                        "$ref": "#/components/schemas/ObjectDataRequestConfigAPI"
                    }
                }
            },
            "PageOperationAPI": {
                "type": "object",
                "properties": {
                    "assignment": {
                        "$ref": "#/components/schemas/PageOperationAssignmentAPI"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/PageOperationFilterAPI"
                    },
                    "generatedSummary": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "PageConditionAPI": {
                "type": "object",
                "properties": {
                    "pageRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageRuleAPI"
                        },
                        "description": "The list of page rules that should be evaluated for this condition. If the page rules evaluate to\r\n<code>true</code>, the condition will execute the associated page operations.",
                        "nullable": true
                    },
                    "comparisonType": {
                        "type": "string",
                        "description": "The comparison to use when evaluating the page rules associated with this page condition.",
                        "nullable": true
                    },
                    "pageOperations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageOperationAPI"
                        },
                        "description": "These are the actions to be performed based on the above rules evaluating to true.",
                        "nullable": true
                    },
                    "generatedSummary": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "PageElementResponseAPI": {
                "type": "object",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the Page Element was first created.",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the last modificiation was made to the Page Element.",
                        "format": "date-time"
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label for the page element. This is usually used as the title of the page.",
                        "nullable": true
                    },
                    "pageContainers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageContainerAPI"
                        },
                        "description": "The tree hierarchy of page containers that define the scaffolding of the page layout. Conceptually, page\r\ncontainers are similar to HTML5 <code>div</code> tags. If no page containers are provided, it is assumed\r\nthat all components will be oriented in a vertical flow layout.",
                        "nullable": true
                    },
                    "pageComponents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageComponentAPI"
                        },
                        "description": "The list of components to be embedded on the page. Each component is associated with a page container for\r\nrelative positioning information. Conceptually, page containers are similar to HTML5 <code>form</code>\r\ncontrols and/or specific layout blocks containing images or content.",
                        "nullable": true
                    },
                    "pageConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageConditionAPI"
                        },
                        "description": "The list of page conditions that set out the rules that should be evaluated and the actions that should be\r\ntaken if those rules evaluate to <code>true</code>. Page conditions make it possible to define complex UI\r\nevent models.",
                        "nullable": true
                    },
                    "stopConditionsOnFirstTrue": {
                        "type": "boolean",
                        "description": "Indicates if the engine should continue to execute rules and actions on the page if a condition evaluates\r\nto <code>true</code>. This makes it possible to deal with page rules that may conflict if all run for all\r\nevents on the page."
                    },
                    "saveHiddenInputs": {
                        "type": "boolean",
                        "description": "Indicates if page components that are not visible should still save their input to state"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key value pairs that provide additional information for the page layout to be rendered. Builders should\r\nrefer to the documentation of the UI code being used.",
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageTagAPI"
                        },
                        "description": "The list of page tags that allow additional metadata to be applied to various page objects: components,\r\ncontrols and the overall page. Conceptually tags can be used to mimic HTML and CSS but can also be used to\r\nprovide data to enrich functionality on the page.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a page element with the same developer name as the one\r\nprovided and match them up by name as opposed to by ID. This is useful when creating scripts to create\r\nflows, as you can use the <code>developerName</code> property as the reference as opposed to needing to\r\nknow the IDs of all created elements."
                    },
                    "modernPageLayout": {
                        "type": "boolean",
                        "description": "Indicates if the page is using the modern layout based on the CSS grid."
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    }
                }
            },
            "ValueElementResponseAPI": {
                "type": "object",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the Value was first created.",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the last modification was made to the Value.",
                        "format": "date-time"
                    },
                    "isFixed": {
                        "type": "boolean",
                        "description": "Indicates if the value of the Value can be changed by operations in the Flow or from outside systems. If this property is set to 'true', the Value will act like a 'constant' - i.e. it can't be changed by anyone except the Flow author at design time."
                    },
                    "isEncrypted": {
                        "type": "boolean"
                    },
                    "isVersionless": {
                        "type": "boolean"
                    },
                    "access": {
                        "type": "string",
                        "description": "Sets the level of access this Value has to change. In many situations, Values can only be changed by the operations defined in your Flow and the value is not exposed outside of the Flow. Alternatively, you may wish to allow the value of the Value to be assigned at initialization.",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of content the Value holds.",
                        "nullable": true
                    },
                    "contentFormat": {
                        "type": "string",
                        "nullable": true
                    },
                    "defaultContentValue": {
                        "type": "string",
                        "description": "The default content value for the Value before any operations have been performed. This is for primitive Values.",
                        "nullable": true
                    },
                    "defaultObjectData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectAPI"
                        },
                        "description": "The default object data for the Value before any operations have been performed. This is for Object and List Values.",
                        "nullable": true
                    },
                    "initializationOperations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationAPI"
                        },
                        "description": "The operations that should be performed when the object is initialized. Initialization operations are only appropriate for Values of content type ContentObject.",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Type and object or list data must adhere to in structure (the Type basically defines the 'interface' that all objects and lists stored in this Value must implement). This property is only applicable for ContentObject and ContentList content types.",
                        "nullable": true
                    },
                    "typeElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Value with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements."
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "MacroElementResponseAPI": {
                "type": "object",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the Macro was first created.",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the last modification was made to the Macro.",
                        "format": "date-time"
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "code": {
                        "type": "string",
                        "description": "The JavaScript code for the Macro.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Macro with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements."
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    }
                }
            },
            "ServiceValueRequestAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the service value. This needs to match up with the developerName of the configuration value sent back from the Service description.",
                        "nullable": true
                    },
                    "valueElementToReferenceId": {
                        "$ref": "#/components/schemas/ValueElementIdAPI"
                    },
                    "valueElementToReferenceDeveloperName": {
                        "type": "string",
                        "description": "This is a temporary property so we have the name of the shared element and type element entry tagged against the value (useful in listings)",
                        "nullable": true
                    },
                    "typeElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of content the component holds.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which this Value should appear to builder users.",
                        "format": "int32"
                    }
                }
            },
            "ServiceActionOutcomeAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ServiceActionRequestAPI": {
                "type": "object",
                "properties": {
                    "uriPart": {
                        "type": "string",
                        "description": "The uri part that will be used in addition to the base uri provided for the Service. This needs to match up with the uriPart of the actions sent back from the Service description.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the service action. This does not need to match with the service description as the matching to action is done based on uri part above.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the service action.",
                        "nullable": true
                    },
                    "isViewMessageAction": {
                        "type": "boolean",
                        "description": "This property is not yet supported. Indicates if this particular service action will return a View as opposed to being a system-to-system API reference. If this is a View message action, then it can be used in 'Remote Page' map elements."
                    },
                    "serviceActionOutcomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceActionOutcomeAPI"
                        },
                        "description": "This property is not yet supported. Provides the outcomes that the View exposes for the Author to use as outcomes in their Flow.",
                        "nullable": true
                    },
                    "serviceInputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceValueRequestAPI"
                        },
                        "description": "The list of input values that are available for this particular action. The only supported properties on the service value request object are: id, developerName and ContentType as the Value references are defined by the actions in each 'Message' map element.",
                        "nullable": true
                    },
                    "serviceOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceValueRequestAPI"
                        },
                        "description": "The list of output values that are available for this particular action. The only supported properties on the service value request object are: id, developerName and ContentType as the Value references are defined by the actions in each 'Message' map element.",
                        "nullable": true
                    }
                }
            },
            "TypeElementPropertyAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the type element property value. This property is created by the service.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the type element property. This will be used to identify the property in API calls that use values of this Type.",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of content the type element property holds.",
                        "nullable": true
                    },
                    "contentFormat": {
                        "type": "string",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Type held in this type element property. This property should only be assigned if this type element property is a ContentType of ContentObject or ContentList. The unique identifier should be for the object or list of objects that will be stored.",
                        "nullable": true
                    },
                    "typeElementDeveloperName": {
                        "type": "string",
                        "description": "This property is used to specify the developer name rather than the identifier of the associated Type (see typeElementId). This property is only used as part of the Service install. Do not use this property if you are creating a Type through the API manually - you must use the typeElementId.",
                        "nullable": true
                    }
                }
            },
            "TypeElementPropertyBindingAPI": {
                "type": "object",
                "properties": {
                    "databaseFieldName": {
                        "type": "string",
                        "description": "The name of the database field in the table that this binding should be applied. If no underlying table is used, this should represent a unique name that will allow the Service implementation to identify how to store the object property.",
                        "nullable": true
                    },
                    "typeElementPropertyId": {
                        "type": "string",
                        "description": "The unique identifier for the type element property that this binding relates to.",
                        "nullable": true
                    },
                    "typeElementPropertyDeveloperName": {
                        "type": "string",
                        "description": "The developer name for the type element property that this binding relates to. This property is only used in the Service installation and is not supported as part of a manual Type creation.",
                        "nullable": true
                    },
                    "databaseContentType": {
                        "type": "string",
                        "description": "The content type of the database field in the table that this binding should be applied. For example, the content type in ManyWho may be ContentNumber, but in the underlying database, the actual field type is Decimal. This is an optional property that depends on the Service implementation.",
                        "nullable": true
                    }
                }
            },
            "TypeElementBindingAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the type element binding.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the type element binding.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the type element binding.",
                        "nullable": true
                    },
                    "databaseTableName": {
                        "type": "string",
                        "description": "The name of the database table that this binding should be applied. If no underlying table is used or the binding involves multiple backend tables, this should represent a unique name that will allow the Service implementation to identify how to store the object.",
                        "nullable": true
                    },
                    "serviceElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Service that implements the mapping code to save objects and lists of this Type back to the data store.",
                        "nullable": true
                    },
                    "propertyBindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TypeElementPropertyBindingAPI"
                        },
                        "description": "The list of type element property bindings. These are the individual mappings of type element properties to fields in the underlying data store implemented by the Service.",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "TypeElementRequestAPI": {
                "type": "object",
                "properties": {
                    "serviceElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TypeElementPropertyAPI"
                        },
                        "description": "The list of properties for this Type. A property is very similar to a field in a table - it represents the structure of the data that will be stored in Values that use this Type.",
                        "nullable": true
                    },
                    "bindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TypeElementBindingAPI"
                        },
                        "description": "The list of bindings for the Type. A binding holds the mapping of properties to tables and fields in an underlying Service. A binding is not required for a Type if there is no plan to save the data in an external data store. When creating a binding, you will need to have saved the initial Type first so you have the identifiers for the various properties in the Type that need to be bound.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Type with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements."
                    },
                    "serviceElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "ServiceInstallRequestAPI": {
                "type": "object",
                "properties": {
                    "typeElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TypeElementRequestAPI"
                        },
                        "description": "The list of Types can will be installed as part of this Service creation. Once the Service saves, the install object is no longer used as it will create all the Types as part of the single save operation.",
                        "nullable": true
                    }
                }
            },
            "ServiceElementResponseAPI": {
                "type": "object",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the Service was first created.",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the last modification was made to the Service.",
                        "format": "date-time"
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "uri": {
                        "type": "string",
                        "description": "The location of the Service implementation for the platform to callout against.",
                        "nullable": true
                    },
                    "format": {
                        "type": "string",
                        "description": "The REST messaging format to use to communicate with this service. Currently the only valid value for this property is: JSON",
                        "nullable": true
                    },
                    "configurationValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceValueRequestAPI"
                        },
                        "description": "The list of configuration value mappings the service needs to function. Each entry provides a reference to a Value in the Flow that contains the configuration value needed by the service plugin.",
                        "nullable": true
                    },
                    "providesLogic": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'logic'. Logic allows authors to make API calls as part of elements that support messaging: 'Message', 'Page', and 'Remote Page' currently. Messaging is used for asynchronous and synchronous use-cases."
                    },
                    "providesViews": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'views'. A View allows authors to build Flows that include 'Remote Page' elements - e.g. the UI of the page is not actually hosted on the ManyWho platform, but rather the UI is provided by the external service."
                    },
                    "providesFiles": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'files'. Files allows the author to reference files and content from the service as dynamic references - meaning that the files and content can be managed outside of ManyWho, but embedded in your Flows."
                    },
                    "providesDatabase": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'database'. Database functionality allows the author to map their Typed Objects and Lists back to this service for storage. The service then acts as the persistence implementation to store and retrieve the data as neede by the Flow."
                    },
                    "providesIdentity": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'identity'. Identity functionality allows the author to manage permissions to their Flows and sections of their Flows (via Swimlanes) using this service as the directory. This also allows users to login to the Flows using the information stored in this service directory."
                    },
                    "providesSocial": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'social'. Social allows the author to add features for feed, file and user collaboration to their Flows using this service as the underlying social network."
                    },
                    "providesLocation": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'location'. ManyWho optionally collects location information about the user when running a Flow. This information can be used to make decisions about permissions and also data filtering - though it is up to the service to implement this functionality."
                    },
                    "providesAutoBinding": {
                        "type": "boolean"
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceActionRequestAPI"
                        },
                        "description": "The list of 'logic' operations that are available for the service. If the underlying service 'providesLogic', this is where the 'interface' for those logic operations should be stored. This allows the author to know what inputs and outputs are provided by the actions provided by this Service.",
                        "nullable": true
                    },
                    "install": {
                        "$ref": "#/components/schemas/ServiceInstallRequestAPI"
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Service with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created elements."
                    },
                    "sendDecryptedValues": {
                        "type": "boolean"
                    },
                    "httpAuthenticationUsername": {
                        "type": "string",
                        "nullable": true
                    },
                    "httpAuthenticationPassword": {
                        "type": "string",
                        "nullable": true
                    },
                    "httpAuthenticationClientCertificateReference": {
                        "type": "string",
                        "nullable": true
                    },
                    "httpAuthenticationClientCertificatePasswordReference": {
                        "type": "string",
                        "nullable": true
                    },
                    "version": {
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    }
                }
            },
            "TypeElementResponseAPI": {
                "type": "object",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the Type was first created.",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the last modification was made to the Type.",
                        "format": "date-time"
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "serviceElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TypeElementPropertyAPI"
                        },
                        "description": "The list of properties for this Type. A property is very similar to a field in a table - it represents the structure of the data that will be stored in Values that use this Type.",
                        "nullable": true
                    },
                    "bindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TypeElementBindingAPI"
                        },
                        "description": "The list of bindings for the Type. A binding holds the mapping of properties to tables and fields in an underlying Service. A binding is not required for a Type if there is no plan to save the data in an external data store. When creating a binding, you will need to have saved the initial Type first so you have the identifiers for the various properties in the Type that need to be bound.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Type with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements."
                    },
                    "serviceElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    }
                }
            },
            "TagElementResponseAPI": {
                "type": "object",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the Tag was first created.",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the last modification was made to the Tag.",
                        "format": "date-time"
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of Value the Tag holds. As part of the Page layout creation, the Tag will be associated with a Value. The Value bound to this Tag must be of the same content type.",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Type and object or list data must adhere to in structure (the Type basically defines the 'interface' that all objects and lists stored in this Value must implement). This property is only applicable for ContentObject and ContentList content types. As part of the Page layout creation, the Tag will be associated with a Value. The Value bound to this Tag must be of the same Type.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Tag with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements."
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    }
                }
            },
            "FlowImageResponseAPI": {
                "type": "object",
                "properties": {
                    "navigationElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationElementResponseAPI"
                        },
                        "description": "The complete object metadata for all Navigations in your Flow.",
                        "nullable": true
                    },
                    "mapElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MapElementResponseAPI"
                        },
                        "description": "The complete object metadata for all Map Elements in your Flow.",
                        "nullable": true
                    },
                    "groupElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupElementResponseAPI"
                        },
                        "description": "The complete object metadata for all Groups in your Flow.",
                        "nullable": true
                    },
                    "pageElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageElementResponseAPI"
                        },
                        "description": "The complete object metadata for all Pages in your Flow.",
                        "nullable": true
                    },
                    "valueElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValueElementResponseAPI"
                        },
                        "description": "The complete object metadata for all Values in your Flow.",
                        "nullable": true
                    },
                    "macroElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MacroElementResponseAPI"
                        },
                        "description": "The complete object metadata for all Macros in your Flow.",
                        "nullable": true
                    },
                    "serviceElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceElementResponseAPI"
                        },
                        "description": "The complete object metadata for all Services in your Flow.",
                        "nullable": true
                    },
                    "typeElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TypeElementResponseAPI"
                        },
                        "description": "The complete object metadata for all Types in your Flow.",
                        "nullable": true
                    },
                    "tagElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagElementResponseAPI"
                        },
                        "description": "The complete object metadata for all Tags in your Flow.",
                        "nullable": true
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date and time the flow was created at",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date and time of the last modification to the flow",
                        "format": "date-time"
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "alertEmail": {
                        "type": "string",
                        "description": "The email of the builder who activated the flow",
                        "nullable": true
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Indicates if this flow version is the active version."
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Indicates if this flow version is the default version."
                    },
                    "comment": {
                        "type": "string",
                        "description": "The activation comment provided by the builder, if given",
                        "nullable": true
                    },
                    "editingToken": {
                        "type": "string",
                        "description": "A unique token for this particular editing session",
                        "format": "uuid",
                        "nullable": true
                    },
                    "id": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the flow. When referencing flows by name, this is the name you should use in your referencing.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the Flow.",
                        "nullable": true
                    },
                    "startMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the first element in the flow. This element is always of the `START` map element type.",
                        "nullable": true
                    },
                    "allowJumping": {
                        "type": "boolean",
                        "description": "Indicates that the builder of the flow will allow users to jump to any position in the Flow regardless of outcomes and/or navigation."
                    },
                    "enableHistoricalNavigation": {
                        "type": "boolean",
                        "description": "Indicates that the builder of the flow wants to enable/disable both the UI and api for historical navigation."
                    },
                    "stateExpirationLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "idleStateExpirationLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "authorization": {
                        "$ref": "#/components/schemas/GroupAuthorizationAPI"
                    },
                    "identityProvider": {
                        "$ref": "#/components/schemas/FlowIdentityProviderAPI"
                    }
                }
            },
            "IdentityProviderType": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer",
                "format": "int32"
            },
            "IdentityProviderAPI": {
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/IdentityProviderType"
                    },
                    "dateCreated": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "IdentityProviderAPIItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IdentityProviderAPI"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "MacroElementRequestAPI": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The JavaScript code for the Macro.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Macro with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements."
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "NavigationElementRequestAPI": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The label to display to the user.",
                        "nullable": true
                    },
                    "navigationItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationItemAPI"
                        },
                        "description": "The navigation items that are available for this navigation. The navigation items are the \"links\" the user\r\ncan use to navigate around your flow.",
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageTagAPI"
                        },
                        "description": "The list of tags that are associated with this navigation.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a navigation with the same developer name as the one\r\nprovided and match them up by name as opposed to by ID. This is useful when creating scripts to create\r\nflows, as you can use the <code>developerName</code> property as the reference as opposed to needing to know\r\nthe IDs of all created elements."
                    },
                    "persistState": {
                        "type": "boolean",
                        "description": "Indicates if the platform should save state when navigating between elements"
                    },
                    "persistValues": {
                        "type": "boolean",
                        "description": "Indicates if the platform should save values when navigating between elements"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "PageElementRequestAPI": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The label for the page element. This is usually used as the title of the page.",
                        "nullable": true
                    },
                    "pageContainers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageContainerAPI"
                        },
                        "description": "The tree hierarchy of page containers that define the scaffolding of the page layout. Conceptually, page\r\ncontainers are similar to HTML5 <code>div</code> tags. If no page containers are provided, it is assumed\r\nthat all components will be oriented in a vertical flow layout.",
                        "nullable": true
                    },
                    "pageComponents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageComponentAPI"
                        },
                        "description": "The list of components to be embedded on the page. Each component is associated with a page container for\r\nrelative positioning information. Conceptually, page containers are similar to HTML5 <code>form</code>\r\ncontrols and/or specific layout blocks containing images or content.",
                        "nullable": true
                    },
                    "pageConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageConditionAPI"
                        },
                        "description": "The list of page conditions that set out the rules that should be evaluated and the actions that should be\r\ntaken if those rules evaluate to <code>true</code>. Page conditions make it possible to define complex UI\r\nevent models.",
                        "nullable": true
                    },
                    "stopConditionsOnFirstTrue": {
                        "type": "boolean",
                        "description": "Indicates if the engine should continue to execute rules and actions on the page if a condition evaluates\r\nto <code>true</code>. This makes it possible to deal with page rules that may conflict if all run for all\r\nevents on the page."
                    },
                    "saveHiddenInputs": {
                        "type": "boolean",
                        "description": "Indicates if page components that are not visible should still save their input to state"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key value pairs that provide additional information for the page layout to be rendered. Builders should\r\nrefer to the documentation of the UI code being used.",
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageTagAPI"
                        },
                        "description": "The list of page tags that allow additional metadata to be applied to various page objects: components,\r\ncontrols and the overall page. Conceptually tags can be used to mimic HTML and CSS but can also be used to\r\nprovide data to enrich functionality on the page.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a page element with the same developer name as the one\r\nprovided and match them up by name as opposed to by ID. This is useful when creating scripts to create\r\nflows, as you can use the <code>developerName</code> property as the reference as opposed to needing to\r\nknow the IDs of all created elements."
                    },
                    "modernPageLayout": {
                        "type": "boolean",
                        "description": "Indicates if the page is using the modern layout based on the CSS grid."
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "CultureAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id for the culture.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the culture.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary for the culture.",
                        "nullable": true
                    },
                    "brand": {
                        "type": "string",
                        "description": "The brand for the culture.",
                        "nullable": true
                    },
                    "language": {
                        "type": "string",
                        "description": "The language for the culture.",
                        "nullable": true
                    },
                    "country": {
                        "type": "string",
                        "description": "The country for the culture.",
                        "nullable": true
                    },
                    "variant": {
                        "type": "string",
                        "description": "The variant for the culture.",
                        "nullable": true
                    }
                }
            },
            "EngineValueAPI": {
                "type": "object",
                "properties": {
                    "valueElementId": {
                        "type": "string",
                        "description": "The unique identifier for the value in the flow being assigned. Using the id to reference the value ensures that your player is guaranteed to be assigning the correct value. If you reference a value by developerName, it is possible for the author to break integration points simply by changing the name of the value. You must provide an 'id' or a 'developerName'.",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "description": "The unique identifier for the object type of the value in the flow being assigned. Using the typeElementId ensures that your player is guaranteed to be referencing the correct object type. If you use the typeElementDeveloperName property, a change in the type name can break the integration. We ask that you specify the type as we may in future support type casting and we therefore want to know the type you're passing in so we can validate it is correct before mapping to the super type.",
                        "nullable": true
                    },
                    "typeElementPropertyId": {
                        "type": "string",
                        "description": "The unique identifier for the object property of the value in the flow being assigned. Typed objects all have properties. Using the typeElementPropertyId allows you to assign a property in an object value as opposed to the whole value. As with the other identifier references, using the typeElementPropertyId ensures that your player is guaranteed to be assigning the correct value. Using the typeElementPropertyDeveloperName makes it possible to break the integration if the author changes the developerName of a property in the type.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "typeElementDeveloperName": {
                        "type": "string",
                        "description": "The developer name for the object type of the value in the flow being assigned.",
                        "nullable": true
                    },
                    "typeElementPropertyDeveloperName": {
                        "type": "string",
                        "description": "The developer name for the object property of the value in the flow being assigned.",
                        "nullable": true
                    },
                    "contentValue": {
                        "type": "string",
                        "description": "The actual content value being assigned to the value in the flow. This property should be used for all \"primitive\", non-typed values in your flow. For example, if you are referencing a value called \"First Name\", this would be the value you actually want to assign to it: e.g. \"Steve\".",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content type of the value you are passing into the flow. The content types are specified by the ContentType enumeration.",
                        "nullable": true
                    },
                    "objectData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "DescribeServiceRequestAPI": {
                "type": "object",
                "properties": {
                    "culture": {
                        "$ref": "#/components/schemas/CultureAPI"
                    },
                    "uri": {
                        "type": "string",
                        "description": "The Uri for the service to describe.",
                        "nullable": true
                    },
                    "uriTrimmed": {
                        "type": "string",
                        "nullable": true,
                        "readOnly": true
                    },
                    "httpAuthenticationUsername": {
                        "type": "string",
                        "nullable": true
                    },
                    "httpAuthenticationPassword": {
                        "type": "string",
                        "nullable": true
                    },
                    "httpAuthenticationClientCertificate": {
                        "type": "string",
                        "nullable": true
                    },
                    "httpAuthenticationClientCertificatePassword": {
                        "type": "string",
                        "nullable": true
                    },
                    "version": {
                        "type": "string",
                        "nullable": true
                    },
                    "configurationValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "Configuration values provided by the end user to help the describe.",
                        "nullable": true
                    }
                }
            },
            "DescribeValueAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the value.",
                        "nullable": true
                    },
                    "contentValue": {
                        "type": "string",
                        "description": "The content for this value.",
                        "nullable": true
                    },
                    "isRequired": {
                        "type": "boolean",
                        "description": "Indicates if the value is required."
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content type for the value.",
                        "nullable": true
                    },
                    "typeElementDeveloperName": {
                        "type": "string",
                        "description": "This allows the describe value to reference supported types.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The position in the UI where the value will be displayed",
                        "format": "int32"
                    }
                }
            },
            "DescribeServiceResponseBaseAPI": {
                "type": "object",
                "properties": {
                    "configurationValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DescribeValueAPI"
                        },
                        "description": "Configuration information that's required to set up the service.  These are values that are typically not associated with\r\ninput/output or moment in time information - this is stuff that is required for the service to function correctly.",
                        "nullable": true
                    },
                    "providesLogic": {
                        "type": "boolean",
                        "description": "Tells the system whether or not the service exposes logic actions."
                    },
                    "providesViews": {
                        "type": "boolean",
                        "description": "Tells the system whether or not the service exposes views."
                    },
                    "providesDatabase": {
                        "type": "boolean",
                        "description": "Indicates if this service provides object data support for the provided types."
                    },
                    "providesIdentity": {
                        "type": "boolean",
                        "description": "Indicates if this service provides identity information for authentication and authorization calls."
                    },
                    "providesSocial": {
                        "type": "boolean",
                        "description": "Indicates if this service provides social networking capabilities to the flow."
                    },
                    "providesFiles": {
                        "type": "boolean",
                        "description": "Indicates if this service provides files for download and upload. This is logically separate from the social networking where it is\r\nassumed the feed supports basic file attachments."
                    },
                    "providesAutoBinding": {
                        "type": "boolean"
                    }
                }
            },
            "DescribeUIServiceActionOutcomeAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "DescribeServiceActionResponseAPI": {
                "type": "object",
                "properties": {
                    "uriPart": {
                        "type": "string",
                        "description": "The part of the Uri that will allow us to call this action as part of the service.  For example,\r\nif you specify \"myaction\", the full Uri for the service would be \"https://myservice.com/myservice/myaction\".",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The label for this action.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary for the service operation.",
                        "nullable": true
                    },
                    "serviceActionOutcomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DescribeUIServiceActionOutcomeAPI"
                        },
                        "description": "For UI actions, this property provides the bindable outcomes so the author can wire buttons to steps in the flow.",
                        "nullable": true
                    },
                    "serviceInputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DescribeValueAPI"
                        },
                        "description": "The service inputs that need to be provided.",
                        "nullable": true
                    },
                    "serviceOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DescribeValueAPI"
                        },
                        "description": "The service outputs that will be provided back.",
                        "nullable": true
                    },
                    "isViewMessageAction": {
                        "type": "boolean",
                        "description": "Indicates if this message action is for views rather than logic."
                    }
                }
            },
            "DescribeInstallResponseAPI": {
                "type": "object",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DescribeServiceActionResponseAPI"
                        },
                        "description": "The actions available for this service.  The actions are basically a proxy for methods.",
                        "nullable": true
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TypeElementRequestAPI"
                        },
                        "nullable": true
                    },
                    "version": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ServiceElementRequestAPI": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "The location of the Service implementation for the platform to callout against.",
                        "nullable": true
                    },
                    "format": {
                        "type": "string",
                        "description": "The REST messaging format to use to communicate with this service. Currently the only valid value for this property is: JSON",
                        "nullable": true
                    },
                    "configurationValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceValueRequestAPI"
                        },
                        "description": "The list of configuration value mappings the service needs to function. Each entry provides a reference to a Value in the Flow that contains the configuration value needed by the service plugin.",
                        "nullable": true
                    },
                    "providesLogic": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'logic'. Logic allows authors to make API calls as part of elements that support messaging: 'Message', 'Page', and 'Remote Page' currently. Messaging is used for asynchronous and synchronous use-cases."
                    },
                    "providesViews": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'views'. A View allows authors to build Flows that include 'Remote Page' elements - e.g. the UI of the page is not actually hosted on the ManyWho platform, but rather the UI is provided by the external service."
                    },
                    "providesFiles": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'files'. Files allows the author to reference files and content from the service as dynamic references - meaning that the files and content can be managed outside of ManyWho, but embedded in your Flows."
                    },
                    "providesDatabase": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'database'. Database functionality allows the author to map their Typed Objects and Lists back to this service for storage. The service then acts as the persistence implementation to store and retrieve the data as neede by the Flow."
                    },
                    "providesIdentity": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'identity'. Identity functionality allows the author to manage permissions to their Flows and sections of their Flows (via Swimlanes) using this service as the directory. This also allows users to login to the Flows using the information stored in this service directory."
                    },
                    "providesSocial": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'social'. Social allows the author to add features for feed, file and user collaboration to their Flows using this service as the underlying social network."
                    },
                    "providesLocation": {
                        "type": "boolean",
                        "description": "Indicates if the Service provides functionality for 'location'. ManyWho optionally collects location information about the user when running a Flow. This information can be used to make decisions about permissions and also data filtering - though it is up to the service to implement this functionality."
                    },
                    "providesAutoBinding": {
                        "type": "boolean"
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceActionRequestAPI"
                        },
                        "description": "The list of 'logic' operations that are available for the service. If the underlying service 'providesLogic', this is where the 'interface' for those logic operations should be stored. This allows the author to know what inputs and outputs are provided by the actions provided by this Service.",
                        "nullable": true
                    },
                    "install": {
                        "$ref": "#/components/schemas/ServiceInstallRequestAPI"
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Service with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created elements."
                    },
                    "sendDecryptedValues": {
                        "type": "boolean"
                    },
                    "httpAuthenticationUsername": {
                        "type": "string",
                        "nullable": true
                    },
                    "httpAuthenticationPassword": {
                        "type": "string",
                        "nullable": true
                    },
                    "httpAuthenticationClientCertificateReference": {
                        "type": "string",
                        "nullable": true
                    },
                    "httpAuthenticationClientCertificatePasswordReference": {
                        "type": "string",
                        "nullable": true
                    },
                    "version": {
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "ServiceElementResponseAPIItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceElementResponseAPI"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "TagElementRequestAPI": {
                "type": "object",
                "properties": {
                    "contentType": {
                        "type": "string",
                        "description": "The type of Value the Tag holds. As part of the Page layout creation, the Tag will be associated with a Value. The Value bound to this Tag must be of the same content type.",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Type and object or list data must adhere to in structure (the Type basically defines the 'interface' that all objects and lists stored in this Value must implement). This property is only applicable for ContentObject and ContentList content types. As part of the Page layout creation, the Tag will be associated with a Value. The Value bound to this Tag must be of the same Type.",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Tag with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements."
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "TypeElementResponseAPIItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TypeElementResponseAPI"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "ValueElementRequestAPI": {
                "type": "object",
                "properties": {
                    "isFixed": {
                        "type": "boolean",
                        "description": "Indicates if the value of the Value can be changed by operations in the Flow or from outside systems. If this property is set to 'true', the Value will act like a 'constant' - i.e. it can't be changed by anyone except the Flow author at design time."
                    },
                    "isEncrypted": {
                        "type": "boolean"
                    },
                    "isVersionless": {
                        "type": "boolean"
                    },
                    "access": {
                        "type": "string",
                        "description": "Sets the level of access this Value has to change. In many situations, Values can only be changed by the operations defined in your Flow and the value is not exposed outside of the Flow. Alternatively, you may wish to allow the value of the Value to be assigned at initialization.",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of content the Value holds.",
                        "nullable": true
                    },
                    "contentFormat": {
                        "type": "string",
                        "nullable": true
                    },
                    "defaultContentValue": {
                        "type": "string",
                        "description": "The default content value for the Value before any operations have been performed. This is for primitive Values.",
                        "nullable": true
                    },
                    "defaultObjectData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectAPI"
                        },
                        "description": "The default object data for the Value before any operations have been performed. This is for Object and List Values.",
                        "nullable": true
                    },
                    "initializationOperations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationAPI"
                        },
                        "description": "The operations that should be performed when the object is initialized. Initialization operations are only appropriate for Values of content type ContentObject.",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Type and object or list data must adhere to in structure (the Type basically defines the 'interface' that all objects and lists stored in this Value must implement). This property is only applicable for ContentObject and ContentList content types.",
                        "nullable": true
                    },
                    "typeElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "updateByName": {
                        "type": "boolean",
                        "description": "Indicates if the platform should attempt to find a Value with the same developer name as the one provided and match them up by name as opposed to 'id'. This is useful when creating scripts to create Flows - as you can use the developerName property as the reference as opposed to needing to know the ids of all created Elements."
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element. The id should be null for \"insert\" requests and a valid identifier for \"update\" requests.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The type of element this metadata represents.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the element. This is useful for keeping track of the element in the modelling tool and the API.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the element",
                        "nullable": true
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    }
                }
            },
            "ValueElementResponseAPIItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValueElementResponseAPI"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "ValueElementIdReferenceAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "The developer name from the Value.",
                        "nullable": true
                    },
                    "typeElementDeveloperName": {
                        "type": "string",
                        "description": "The developer name of the Type associated with the Value. This will be a non-null value for Objects and Lists.",
                        "nullable": true
                    },
                    "typeElementPropertyDeveloperName": {
                        "type": "string",
                        "description": "The developer name of one of the properties available for the Type.",
                        "nullable": true
                    },
                    "typeElementPropertyTypeElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "typeElementPropertyTypeElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Type property associated with the Value. This will be a non-null value for Objects and Lists for entries referring to a property.",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "description": "The element type from the Value.",
                        "nullable": true
                    },
                    "typeElementId": {
                        "type": "string",
                        "description": "The unique identifier for the Type associated with the Value.",
                        "nullable": true
                    },
                    "serviceElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "serviceElementDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The ContentType from the Value.",
                        "nullable": true
                    },
                    "parentContentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "isFixed": {
                        "type": "boolean",
                        "description": "The isFixed property from the Value."
                    },
                    "access": {
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the Value to be referenced with this identifier.",
                        "nullable": true
                    },
                    "typeElementPropertyId": {
                        "type": "string",
                        "description": "The unique identifier for a property in the Value to be referenced with this identifier. This only applies for Values of type ContentObject.",
                        "nullable": true
                    },
                    "command": {
                        "type": "string",
                        "description": "The command to execute as part of the Value reference. For certain objects, the command exposes additional properties that can be referenced.",
                        "nullable": true
                    }
                }
            },
            "PageElementResponseAPIItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageElementResponseAPI"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "EnvironmentClassificationType": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "integer",
                "format": "int32"
            },
            "EnvironmentAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "classificationType": {
                        "$ref": "#/components/schemas/EnvironmentClassificationType"
                    },
                    "requiresBuildUser": {
                        "type": "boolean"
                    },
                    "nextEnvironmentId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "TenantFeatureUpdateRequest": {
                "type": "object",
                "properties": {
                    "featureFlagId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                }
            },
            "NotificationAPI": {
                "type": "object",
                "properties": {
                    "tenant": {
                        "$ref": "#/components/schemas/TenantMinimalAPI"
                    },
                    "userId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "content": {
                        "type": "string",
                        "nullable": true
                    },
                    "subject": {
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "isRead": {
                        "type": "boolean"
                    }
                }
            },
            "UriMapping": {
                "type": "object",
                "properties": {
                    "from": {
                        "type": "string",
                        "nullable": true
                    },
                    "to": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "PackageElement": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the element",
                        "format": "uuid"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The name of the element",
                        "nullable": true
                    }
                },
                "description": "A summary of an element from a packaging operation."
            },
            "PackageElements": {
                "type": "object",
                "properties": {
                    "flows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageElement"
                        },
                        "nullable": true
                    },
                    "groupElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageElement"
                        },
                        "nullable": true
                    },
                    "macroElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageElement"
                        },
                        "nullable": true
                    },
                    "mapElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageElement"
                        },
                        "nullable": true
                    },
                    "navigationElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageElement"
                        },
                        "nullable": true
                    },
                    "pageElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageElement"
                        },
                        "nullable": true
                    },
                    "serviceElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageElement"
                        },
                        "nullable": true
                    },
                    "tagElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageElement"
                        },
                        "nullable": true
                    },
                    "typeElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageElement"
                        },
                        "nullable": true
                    },
                    "valueElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageElement"
                        },
                        "nullable": true
                    },
                    "identityProviderElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageElement"
                        },
                        "nullable": true
                    }
                }
            },
            "PackageConflictResponse": {
                "type": "object",
                "properties": {
                    "existingElements": {
                        "$ref": "#/components/schemas/PackageElements"
                    }
                },
                "description": "A response that details the conflicts that arose from a packaging operation."
            },
            "SharedPackageRequestAPI": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "SharedPackageResponseAPI": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ReleaseFlowAPI": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "summary": {
                        "type": "string",
                        "nullable": true
                    },
                    "releaseId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "flowId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "versionId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    }
                }
            },
            "ReleaseAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "summary": {
                        "type": "string",
                        "nullable": true
                    },
                    "flows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReleaseFlowAPI"
                        },
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "AuthorizationUserAPI": {
                "type": "object",
                "properties": {
                    "authenticationId": {
                        "type": "string",
                        "description": "A unique identifier provided by the Service for the AuthorizationUser. The AuthorizationUser can represent any object in the underlying Service identity management system, but typically it is an actual user identity.",
                        "nullable": true
                    },
                    "attribute": {
                        "type": "string",
                        "description": "The attribute associated with the authentication identifier. The attributes are defined by the Service, but typically they're things like: MANAGER, USER, DELEGATES, COLLEAGUES, etc.",
                        "nullable": true
                    },
                    "runningUser": {
                        "type": "boolean",
                        "description": "Indicates that the authorization should be based on the running user, not on a pre-configured user authentication identifier."
                    }
                }
            },
            "AuthorizationGroupAPI": {
                "type": "object",
                "properties": {
                    "authenticationId": {
                        "type": "string",
                        "description": "A unique identifier provided by the Service for the AuthorizationGroup. The AuthorizationGroup can represent any object in the underlying Service identity management system.",
                        "nullable": true
                    },
                    "attribute": {
                        "type": "string",
                        "description": "The attribute associated with the authentication identifier. The attributes are defined by the Service, but typically they're things like: MEMBER, OWNER, etc.",
                        "nullable": true
                    }
                }
            },
            "AuthorizationAPI": {
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthorizationUserAPI"
                        },
                        "description": "An array containing the list of Users that are authorized to access this part of the Flow.",
                        "nullable": true
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthorizationGroupAPI"
                        },
                        "description": "An array containing the list of Groups that are authorized to access this part of the Flow.",
                        "nullable": true
                    },
                    "runningAuthenticationId": {
                        "type": "string",
                        "description": "The unique identifier of the assigned \"running user\". This is not necessarily the user currently accessing the Flow, but rather the reference user identifier that should be used for relationships such as \"Manager\" or \"Colleague\" when moving from one authentication context to another.",
                        "nullable": true
                    },
                    "globalAuthenticationType": {
                        "type": "string",
                        "description": "The overall authentication type that should be used when authorizing users.",
                        "nullable": true
                    }
                }
            },
            "CommandRequestAPI": {
                "type": "object",
                "properties": {
                    "commandType": {
                        "type": "string",
                        "description": "The type of command being executed on the remote service. The command type is up to the author and service.",
                        "nullable": true
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The properties to be used to support the command type being executed on the remote service.",
                        "nullable": true
                    }
                }
            },
            "ListFilterOrderByAPI": {
                "type": "object",
                "properties": {
                    "columnName": {
                        "type": "string",
                        "description": "The developer name of the column to order by.",
                        "nullable": true
                    },
                    "direction": {
                        "type": "string",
                        "description": "The direction of the ordering.",
                        "nullable": true
                    }
                }
            },
            "ListFilterSearchCriteriaAPI": {
                "type": "object",
                "properties": {
                    "columnName": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ListFilterWhereAPI": {
                "type": "object",
                "properties": {
                    "columnName": {
                        "type": "string",
                        "nullable": true
                    },
                    "criteriaType": {
                        "type": "string",
                        "nullable": true
                    },
                    "value": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentValue": {
                        "type": "string",
                        "nullable": true
                    },
                    "objectData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "ListFilterMinimalAPI": {
                "type": "object",
                "properties": {
                    "comparisonType": {
                        "type": "string",
                        "description": "The comparison type to use when evaluating the wheres.",
                        "nullable": true
                    },
                    "where": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterWhereAPI"
                        },
                        "description": "The where filter to apply to the list.",
                        "nullable": true
                    },
                    "listFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterMinimalAPI"
                        },
                        "description": "A list of nested minimal ListFilters that can be used for grouped ordering and comparisons",
                        "nullable": true
                    }
                }
            },
            "ListFilterAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier of the actual object to filter by - this basically gives an individual result back.",
                        "nullable": true
                    },
                    "filterByProvidedObjects": {
                        "type": "boolean",
                        "description": "Use the list of provided objects as the filter for the lookup.  This allows us to refresh data that can be transient in the remote system."
                    },
                    "orderByPropertyDeveloperName": {
                        "type": "string",
                        "description": "The developer name of the column to order by.",
                        "nullable": true
                    },
                    "orderByDirectionType": {
                        "type": "string",
                        "description": "The direction of the ordering.",
                        "nullable": true
                    },
                    "orderBy": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterOrderByAPI"
                        },
                        "nullable": true
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The number of objects to retrieve in the list.",
                        "format": "int32"
                    },
                    "offset": {
                        "type": "integer",
                        "description": "The number of records to skip past to effectively support paging of the data.",
                        "format": "int32"
                    },
                    "offsetToken": {
                        "type": "string",
                        "description": "An optional offset token, used for pagination by the service if required",
                        "nullable": true
                    },
                    "search": {
                        "type": "string",
                        "description": "The search string that should be used in addition to any filter criteria.",
                        "nullable": true
                    },
                    "searchCriteria": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterSearchCriteriaAPI"
                        },
                        "description": "Any extra criteria that should be used when searching",
                        "nullable": true
                    },
                    "comparisonType": {
                        "type": "string",
                        "description": "The comparison type to use when evaluating the wheres.",
                        "nullable": true
                    },
                    "where": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterWhereAPI"
                        },
                        "description": "The where filter to apply to the list.",
                        "nullable": true
                    },
                    "listFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFilterMinimalAPI"
                        },
                        "description": "A list of nested minimal ListFilters that can be used for grouped ordering and comparisons",
                        "nullable": true
                    }
                }
            },
            "ObjectDataTypePropertyAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectDataTypeAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "ObjectDataTypeAPI": {
                "type": "object",
                "properties": {
                    "typeElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectDataTypePropertyAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "ObjectDataRequestAPI": {
                "type": "object",
                "properties": {
                    "stateId": {
                        "type": "string",
                        "description": "The state id that allows us to make the correct version references.",
                        "nullable": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The unique token for this data job.  The token can be used to help the plugin cache multiple data calls.  If the token is provided, we can match it up\r\nwith a previous data request - if we choose to cache it.",
                        "nullable": true
                    },
                    "typeElementBindingId": {
                        "type": "string",
                        "description": "The Id for the service element associated with this object data.  The service element will give us the connection settings\r\nand allow us to validate various info around the type.",
                        "nullable": true
                    },
                    "authorization": {
                        "$ref": "#/components/schemas/AuthorizationAPI"
                    },
                    "configurationValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "The configuration information that comes from the service element.",
                        "nullable": true
                    },
                    "command": {
                        "$ref": "#/components/schemas/CommandRequestAPI"
                    },
                    "culture": {
                        "$ref": "#/components/schemas/CultureAPI"
                    },
                    "listFilter": {
                        "$ref": "#/components/schemas/ListFilterAPI"
                    },
                    "objectDataType": {
                        "$ref": "#/components/schemas/ObjectDataTypeAPI"
                    },
                    "objectData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectAPI"
                        },
                        "description": "The list of objects to insert, update or delete.",
                        "nullable": true
                    }
                }
            },
            "ObjectDataResponseAPI": {
                "type": "object",
                "properties": {
                    "culture": {
                        "$ref": "#/components/schemas/CultureAPI"
                    },
                    "objectData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectAPI"
                        },
                        "description": "The list of objects post select, insert, update, delete",
                        "nullable": true
                    },
                    "hasMoreResults": {
                        "type": "boolean",
                        "description": "Indicates if there are more results available based on the offset and limit provided"
                    },
                    "offsetToken": {
                        "type": "string",
                        "description": "An optional offset token, sent by the service if required for pagination",
                        "nullable": true
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The unique ID of the state",
                        "format": "uuid"
                    }
                }
            },
            "FileListFilterAPI": {
                "type": "object",
                "properties": {
                    "orderByPropertyDeveloperName": {
                        "type": "string",
                        "description": "The developer name of the column to order by.",
                        "nullable": true
                    },
                    "orderByDirectionType": {
                        "type": "string",
                        "description": "The direction of the ordering.",
                        "nullable": true
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The number of objects to retrieve in the list.",
                        "format": "int32"
                    },
                    "offset": {
                        "type": "integer",
                        "description": "The number of records to skip past to effectively support paging of the data.",
                        "format": "int32"
                    },
                    "search": {
                        "type": "string",
                        "description": "The search string that should be used in addition to any filter criteria.",
                        "nullable": true
                    }
                }
            },
            "FileDataRequestAPI": {
                "type": "object",
                "properties": {
                    "stateId": {
                        "type": "string",
                        "description": "The state id that allows us to make the correct version references.",
                        "nullable": true
                    },
                    "serviceElementId": {
                        "type": "string",
                        "description": "The service to grab the files from.",
                        "nullable": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The unique token for this data job.  The token can be used to help the plugin cache multiple data calls.  If the token is provided, we can match it up\r\nwith a previous data request - if we choose to cache it.",
                        "nullable": true
                    },
                    "authorization": {
                        "$ref": "#/components/schemas/AuthorizationAPI"
                    },
                    "configurationValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "The configuration information that comes from the service element.",
                        "nullable": true
                    },
                    "culture": {
                        "$ref": "#/components/schemas/CultureAPI"
                    },
                    "resourcePath": {
                        "type": "string",
                        "description": "The resouce path to use when sourcing the files.",
                        "nullable": true
                    },
                    "resourceFile": {
                        "type": "string",
                        "description": "The resouce path to use when sourcing a specific file.",
                        "nullable": true
                    },
                    "listFilter": {
                        "$ref": "#/components/schemas/FileListFilterAPI"
                    }
                }
            },
            "FlowResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the flow. When referencing flows by name, this is the name you should use in your referencing.",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "description": "The developer summary the author provided to give more information about the Flow.",
                        "nullable": true
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date and time the flow was created at",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date and time of the last modification to the flow",
                        "format": "date-time"
                    },
                    "whoCreated": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoModified": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "whoOwner": {
                        "$ref": "#/components/schemas/BuilderWhoAPI"
                    },
                    "alertEmail": {
                        "type": "string",
                        "description": "The email of the builder who activated the flow",
                        "nullable": true
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Indicates if this flow version is the active version."
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Indicates if this flow version is the default version."
                    },
                    "comment": {
                        "type": "string",
                        "description": "The activation comment provided by the builder, if given",
                        "nullable": true
                    },
                    "startMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the first element in the flow. This element is always of the `START` map element type.",
                        "nullable": true
                    }
                }
            },
            "EngineAuthorizationContextAPI": {
                "type": "object",
                "properties": {
                    "directoryName": {
                        "type": "string",
                        "description": "The name of the directory the user needs to login to. This can be helpful in dialogs so the user knows what system they need to provide credentials for.",
                        "nullable": true
                    },
                    "directoryId": {
                        "type": "string",
                        "description": "The unique identifier for the directory. Again, this can be helpful in dialogs. In this case, for developers as the directory identifier may allow you to gather additional information about what needs to be collected from the user.",
                        "nullable": true
                    },
                    "loginUrl": {
                        "type": "string",
                        "description": "The Url that should be used as part of any authentication request to the runtime.",
                        "nullable": true
                    },
                    "authenticationType": {
                        "type": "string",
                        "description": "The type of authentication that needs to be performed against the directory.",
                        "nullable": true
                    }
                }
            },
            "AuthenticationCredentialsAPI": {
                "type": "object",
                "properties": {
                    "configurationValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "Any additional configuration values that may have been applied by the engine to help with authentication.",
                        "nullable": true
                    },
                    "authenticationType": {
                        "type": "string",
                        "description": "The type of authentication being performed",
                        "nullable": true
                    },
                    "username": {
                        "type": "string",
                        "description": "The username for your account in the directory",
                        "nullable": true
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for your account in the directory",
                        "nullable": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The account token for the directory. For OAuth2 integration, this the access token",
                        "nullable": true
                    },
                    "code": {
                        "type": "string",
                        "description": "The OAuth2 code",
                        "nullable": true
                    },
                    "sessionToken": {
                        "type": "string",
                        "description": "The session token for the directory. For services such as salesforce.com, this is the sessionId",
                        "nullable": true
                    },
                    "sessionUrl": {
                        "type": "string",
                        "description": "The session URL for the directory. For services such as salesforce.com, this is the pod instance you are currently logged into",
                        "nullable": true
                    },
                    "loginUrl": {
                        "type": "string",
                        "description": "The REST endpoint for the plugin providing the identity",
                        "nullable": true
                    },
                    "redirectUri": {
                        "type": "string",
                        "description": "The OAuth2 redirect URI",
                        "nullable": true
                    },
                    "instanceUrl": {
                        "type": "string",
                        "description": "The particular instance of the directory. For services such as salesforce.com, this is either \"https://login.salesforce.com\" (default) or \"https://test.salesforce.com\".",
                        "nullable": true
                    },
                    "platformUri": {
                        "type": "string",
                        "description": "The URI of the Flow platform that sent the request",
                        "nullable": true
                    },
                    "tenantId": {
                        "type": "string",
                        "nullable": true
                    },
                    "verifier": {
                        "type": "string",
                        "description": "The OAuth1.0 verifier",
                        "nullable": true
                    }
                }
            },
            "EngineNavigationRequestAPI": {
                "type": "object",
                "properties": {
                    "culture": {
                        "$ref": "#/components/schemas/CultureAPI"
                    },
                    "stateId": {
                        "type": "string",
                        "nullable": true
                    },
                    "stateToken": {
                        "type": "string",
                        "nullable": true
                    },
                    "navigationElementId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "NavigationItemResponseAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "nullable": true
                    },
                    "navigationItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationItemResponseAPI"
                        },
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "NavigationItemDataResponseAPI": {
                "type": "object",
                "properties": {
                    "navigationItemId": {
                        "type": "string",
                        "nullable": true
                    },
                    "navigationItemDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "isCurrent": {
                        "type": "boolean"
                    },
                    "isEnabled": {
                        "type": "boolean"
                    },
                    "isVisible": {
                        "type": "boolean"
                    },
                    "locationMapElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "EngineNavigationResponseAPI": {
                "type": "object",
                "properties": {
                    "culture": {
                        "$ref": "#/components/schemas/CultureAPI"
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "nullable": true
                    },
                    "navigationItemResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationItemResponseAPI"
                        },
                        "nullable": true
                    },
                    "navigationItemDataResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationItemDataResponseAPI"
                        },
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "nullable": true
                    },
                    "isVisible": {
                        "type": "boolean"
                    },
                    "isEnabled": {
                        "type": "boolean"
                    },
                    "stateId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "persistState": {
                        "type": "boolean",
                        "description": "Indicates if the platform should save state when navigating between elements"
                    },
                    "persistValues": {
                        "type": "boolean",
                        "description": "Indicates if the platform should save values when navigating between elements"
                    }
                }
            },
            "NavigationElementReferenceAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "persistState": {
                        "type": "boolean",
                        "description": "Indicates if the platform should save state when navigating between elements"
                    },
                    "persistValues": {
                        "type": "boolean",
                        "description": "Indicates if the platform should save values when navigating between elements"
                    }
                }
            },
            "EngineInitializationResponseAPI": {
                "type": "object",
                "properties": {
                    "culture": {
                        "$ref": "#/components/schemas/CultureAPI"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The unique identifier for the initialized flow state. The state identifier is needed throughout the execution of the flow as it is the pointer that points the engine to the correct running instance of a flow.",
                        "nullable": true
                    },
                    "stateToken": {
                        "type": "string",
                        "description": "The unique identifier for the token response from the state. The state token identifier changes with every cycle of request/response. The token is needed as it tells the engine how in-sync your request is with the current service side state.",
                        "nullable": true
                    },
                    "currentMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the map element the user is currently executing against. When initializing the flow, this will be the start element for the flow if the user has authenticated correctly, otherwise, this will be null.",
                        "nullable": true
                    },
                    "currentStreamId": {
                        "type": "string",
                        "description": "The unique identifier for the collaboration stream associated with this flow. This identifier allows you to make calls against the \"social\" APIs to get the posts and comments associated with the flow. The stream identifier can change as you progress through the flow.",
                        "nullable": true
                    },
                    "statusCode": {
                        "type": "string",
                        "description": "The values mimic standard REST codes, but as a String. A \"200\" indicates the user is authenticated to execute the flow. A \"401\" indicates the user needs to login based on the authorization context information provided in the response.",
                        "nullable": true
                    },
                    "authorizationContext": {
                        "$ref": "#/components/schemas/EngineAuthorizationContextAPI"
                    },
                    "navigationElementReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationElementReferenceAPI"
                        },
                        "description": "The list of available navigation element references. These are the navigation schemes that can be used for this particular executing Flow.",
                        "nullable": true
                    },
                    "isHistoricalNavigationEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether both the UI and api for historical navigation has been enabled/disabled."
                    }
                }
            },
            "EngineInitializationRequestAPI": {
                "type": "object",
                "properties": {
                    "flowId": {
                        "$ref": "#/components/schemas/FlowIdAPI"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The unique identifier for an existing State. This parameter should be used if the first initialization request was rejected due to access being denied due to authentication. If you do not re-use this stateId property, your inputs will not be correctly assigned.",
                        "nullable": true
                    },
                    "parentStateId": {
                        "type": "string",
                        "description": "The unique identifier for the parent State that \"spawned\" this State. This property is assigned when a Flow calls a Sub-Flow. The Sub-Flow will have this property assigned referencing the parent Flow.",
                        "nullable": true
                    },
                    "externalIdentifier": {
                        "type": "string",
                        "description": "An arbitrary external identifier that can be used to query for a State.",
                        "nullable": true
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations take the form of {\"mykey\":\"myvalue\"}. Any annotations added to the State will be persisted for the duration of the Flow. Annotations are passed to the executing player and also through to Services. Annotations can be changed at any time through the execution of the Flow.",
                        "nullable": true
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "An array of engine value objects that will be used to assign values in the flow at initialization.",
                        "nullable": true
                    },
                    "playerUrl": {
                        "type": "string",
                        "description": "The location of the player that should be used for sharing and notifications when first running the flow. The service will automatically append the \"flow-id\" parameter to this url so the player knows which flow it is playing.",
                        "nullable": true
                    },
                    "joinPlayerUrl": {
                        "type": "string",
                        "description": "The location of the player that should be used for sharing and notifications when joining a running flow. The service will automatically append the \"join\" parameter to this url so the player knows which flow and state it is playing (the \"join\" parameter is the state identifier).",
                        "nullable": true
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode you wish to run the flow in. The mode is mainly useful for debugging purposes as you can step through the flow and also view state information to check everything is working as expected.",
                        "nullable": true
                    },
                    "reportingMode": {
                        "type": "string",
                        "description": "The reporting mode under which you want to run this State of a Flow.",
                        "nullable": true
                    }
                }
            },
            "EngineInitializationSimpleRequestAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "versionId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "nullable": true
                    },
                    "username": {
                        "type": "string",
                        "nullable": true
                    },
                    "password": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "PageContainerResponseAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the page component. All page components have a property of pageContainerId that will match with this identifier to indicate that the component should be a child of this container.",
                        "nullable": true
                    },
                    "containerType": {
                        "type": "string",
                        "description": "The container type tells the player the kind of container that needs to be rendered. This is usually to indicate if the container has particular layour properties such as vertical, horizontal or inline flow - or that the container is a group of tabs. The container type is not restricted to the enumeration provided here - however - all of the standard players provided by ManyWho are able to render the container types in the enum. If you wish to add more container types, be aware that you will need to update the player to support these.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The name the author has given for this container.",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label for the container. This is often used as a title for the section of the page represented by this container.",
                        "nullable": true
                    },
                    "pageContainerResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageContainerResponseAPI"
                        },
                        "description": "The child scaffolding for this page container.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which this container should appear on the page with respect to other page containers at the same level in the page container hierarchy.",
                        "format": "int32"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                }
            },
            "PageComponentColumnResponseAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "description": "This is the developer name of the type element entry.",
                        "nullable": true
                    },
                    "typeElementPropertyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentFormat": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "nullable": true
                    },
                    "isDisplayValue": {
                        "type": "boolean"
                    },
                    "isEditable": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "typeElementPropertyToDisplayId": {
                        "type": "string",
                        "nullable": true
                    },
                    "componentType": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "description": "This acts as the column descriptor for rendering the table content stored in the content property (as part of the parent\r\nfield definition)."
            },
            "PageComponentResponseAPI": {
                "type": "object",
                "properties": {
                    "pageContainerDeveloperName": {
                        "type": "string",
                        "description": "The developer name for the page container this component should be placed into. When rendering a UI, it's best to reference the pageContainerId as this developer name is not guaranteed to be unique.",
                        "nullable": true
                    },
                    "pageContainerId": {
                        "type": "string",
                        "description": "The unique identifier for the page container this component should be placed into. When rendering a UI, this is the best reference to use as the developer names are not guaranteed to be unique.",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifer for this page component.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The name the author has given for this component.",
                        "nullable": true
                    },
                    "componentType": {
                        "type": "string",
                        "description": "The type of component that should be used. The platform currently supports the standard components such as \"INPUT\", \"SELECT\", etc as would be familiar with HTML UI. If you want to provide additional UI componentry, we recommend using \"tags\" to inform the player that you want to adapt the component based on the data in the tag. For example, you may want to change a particular number input to a \"slider\" or you might bind this page component to a widget - again, based on the data in the tag.",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of content the component holds.",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label for the component. This is often the label for a form field.",
                        "nullable": true
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageComponentColumnResponseAPI"
                        },
                        "description": "The columns associated with this page component. This property is only used for \"TABLE\"/\"SELECT\" components and details out the columns that should be displayed to the user. This property is not currently fully documented until we release the page composition tool.",
                        "nullable": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the component. For \"INPUT\" components, this is typically the number of characters wide to display the input box.",
                        "format": "int32"
                    },
                    "maxSize": {
                        "type": "integer",
                        "description": "The maximum size of characters the component can hold. For \"INPUT\" and \"TEXTAREA\" components, this is the amount of content these inputs can hold.",
                        "format": "int32"
                    },
                    "height": {
                        "type": "integer",
                        "description": "The height of the component. For \"TEXTAREA\" components, this is typically the number of characters high to display the text box. For \"IMAGE\" components, this is the height in pixels of the image.",
                        "format": "int32"
                    },
                    "width": {
                        "type": "integer",
                        "description": "The width of the component. For \"TEXTAREA\" components, this is typically the number of characters wide to display the text box. For \"IMAGE\" components, this is the width in pixels of the image.",
                        "format": "int32"
                    },
                    "hintValue": {
                        "type": "string",
                        "description": "The information that should be shown to the user to help them understand what they need to enter. For \"INPUT\" components, this if often the text you see in the input box (e.g. Enter Name) that disappears once you enter something into the input.",
                        "nullable": true
                    },
                    "helpInfo": {
                        "type": "string",
                        "description": "The help information to assist the user in completing this page component. The help information is often something the user sees if they click on a \"help\" button beside the component or hover over a \"help\" icon.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which this component should be placed with respect to other components in the same page container.",
                        "format": "int32"
                    },
                    "isMultiSelect": {
                        "type": "boolean",
                        "description": "This property indicates if the component supports selection of more than one value. This is only applicable for \"TABLE\"/\"SELECT\" components."
                    },
                    "isSearchable": {
                        "type": "boolean"
                    },
                    "hasEvents": {
                        "type": "boolean",
                        "description": "Indicates if changes to this component should result in a \"SYNC\" invoke type with the service. If the component has events, it's likely that the page state needs to change based on business rules. If the component does not have events, there is no need to update the service of changes made to the value of the component."
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "className": {
                        "type": "string",
                        "description": "A space separated string of CSS classes to be applied to the component when rendering.",
                        "nullable": true
                    },
                    "row": {
                        "type": "integer",
                        "description": "Row position of a grid item (component).",
                        "format": "int32"
                    },
                    "column": {
                        "type": "integer",
                        "description": "Column position of a grid item (component).",
                        "format": "int32"
                    },
                    "rowSpan": {
                        "type": "integer",
                        "description": "Size of a grid item (component) measured in rows.",
                        "format": "int32"
                    },
                    "colSpan": {
                        "type": "integer",
                        "description": "Size of a grid item (component) measured in columns.",
                        "format": "int32"
                    }
                }
            },
            "PageComponentDataResponseAPI": {
                "type": "object",
                "properties": {
                    "pageComponentId": {
                        "type": "string",
                        "description": "The unique identifier for the page component that this data pertains to.",
                        "nullable": true
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the page component should be enabled."
                    },
                    "isEditable": {
                        "type": "boolean",
                        "description": "Indicates if the page component should be editable."
                    },
                    "isRequired": {
                        "type": "boolean",
                        "description": "Indicates if the page component should be required."
                    },
                    "isVisible": {
                        "type": "boolean",
                        "description": "Indicates if the page component should be visible."
                    },
                    "objectData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectAPI"
                        },
                        "description": "The up-to-date object data for the component. For page components that use asynchronous object data requests, this list contains the selected objects. If not, the object data is flagged with \"isSelected\" for all objects in the list that should be rendered to the user as selected. This object will be further documented when we release the page composition tool.",
                        "nullable": true
                    },
                    "objectDataRequest": {
                        "$ref": "#/components/schemas/ObjectDataRequestAPI"
                    },
                    "fileDataRequest": {
                        "$ref": "#/components/schemas/FileDataRequestAPI"
                    },
                    "contentValue": {
                        "type": "string",
                        "description": "The value of the page component. For \"INPUT\" and \"TEXTAREA\" components, this is typically the value the user entered.",
                        "nullable": true
                    },
                    "content": {
                        "type": "string",
                        "description": "Any formatted content that may be associated with this component. For \"PRESENTATION\" components, this is the content that should be displayed on the page.",
                        "nullable": true
                    },
                    "imageUri": {
                        "type": "string",
                        "nullable": true
                    },
                    "isValid": {
                        "type": "boolean",
                        "description": "Indicates if the value provided in the field is valid. The validation is only performed when the user selects an outcome. Validation is not done on values as the result of an invokeType of \"SYNC\"."
                    },
                    "validationMessage": {
                        "type": "string",
                        "description": "Any message from the system that explains why the value is not valid. This message can result from a straight page component validation or as the result of the value not being accepted by a subsequent element in the flow (in which case the author of the flow indicated the user should be taken back to this screen to correct the issue).",
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "The page tag provides additional metadata that the author of the flow has defined for this component. Tags are a very powerful way of providing additional information to player developers to ensure the app is providing exactly the user experience you expect. This object will be further documented when we release the page composition tool.",
                        "nullable": true
                    }
                }
            },
            "PageContainerDataResponseAPI": {
                "type": "object",
                "properties": {
                    "pageContainerId": {
                        "type": "string",
                        "description": "The unique identifier for the page container that this data pertains to.",
                        "nullable": true
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the page container should be enabled. If the page container is disabled, the default behavior is that all child components and containers are also disabled."
                    },
                    "isEditable": {
                        "type": "boolean",
                        "description": "Indicates if the page container should be editable. If the page container is not editable, the default behavior is that all child components and containers are also not editable."
                    },
                    "isVisible": {
                        "type": "boolean",
                        "description": "Indicates if the page container should be visible. If the page container is not visible, the default behavior is that all child components and containers are also not visible."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "The page tag provides additional metadata that the author of the flow has defined for this container. Tags are a very powerful way of providing additional information to player developers to ensure the app is providing exactly the user experience you expect. This object will be further documented when we release the page composition tool.",
                        "nullable": true
                    }
                }
            },
            "PageResponseAPI": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The label for the page. This is often used as a title for the page.",
                        "nullable": true
                    },
                    "pageContainerResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageContainerResponseAPI"
                        },
                        "description": "The scaffolding for the page UI containers. The page containers are nested objects that give the complete heirarchy of containers that make up the layour of the UI. The engine will only return this array of objects for a \"JOIN\" or \"FORWARD\" invokeType. For all other types, we assume the player has the UI layout and therefore is only needing metadata and content/data updates. The engine will always provide the complete page scaffolding and then rely on the data responses to hide, display, disable, etc.",
                        "nullable": true
                    },
                    "pageComponentResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageComponentResponseAPI"
                        },
                        "description": "The UI component base structures. The data contained in this object will not change based on events. As with the page container response objects, this data is only provided when the engine is called with an invokeType of \"JOIN\" or \"FORWARD\".",
                        "nullable": true
                    },
                    "pageComponentDataResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageComponentDataResponseAPI"
                        },
                        "description": "The meta data and data for the page components. The metadata tells the player if the component is visible, enabled, etc, and also tells the player the content of the component. This information is subject to change based on events performed by the UI and this array of objects will always be returned by the engine regardless of invokeType (assuming the user is authenticated and the element has UI).",
                        "nullable": true
                    },
                    "pageContainerDataResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageContainerDataResponseAPI"
                        },
                        "description": "The meta data for the page containers. The metadata tells the player if the container is visible, enabled, etc. This information is subject to change based on events performed by the UI and this array of objects will always be returned by the engine regardless of invokeType (assuming the user is authenticated and the element has UI).",
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "nullable": true
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which this page element should appear. The order will always be zero for the page element as it is the root container.",
                        "format": "int32"
                    }
                }
            },
            "OutcomeResponseAPI": {
                "type": "object",
                "properties": {
                    "pageActionBindingType": {
                        "type": "string",
                        "description": "The page action binding type as specified by the builder user.",
                        "nullable": true
                    },
                    "pageActionType": {
                        "type": "string",
                        "description": "The page action type as specified by the builder user. This helps inform the UI of the \"type\" of outcome - e.g. selecting it will perform a \"DELETE\" operation or a \"SAVE\" operation.",
                        "nullable": true
                    },
                    "isBulkAction": {
                        "type": "boolean",
                        "description": "Indicates if the outcome is a \"bulk\" action. If an outcome is bound to a component such as a TABLE, this indicates that the outcome applies to all records, not individual records."
                    },
                    "pageObjectBindingId": {
                        "type": "string",
                        "description": "The unique identifier for the page object (PageComponent or PageContainer) that this outcome should be bound to.",
                        "nullable": true
                    },
                    "isOut": {
                        "type": "boolean",
                        "description": "Indicates if this outcome should invoke the \"out\" API to initialize and invoke a child Flow or join child Flow."
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "className": {
                        "type": "string",
                        "description": "A space separated string of CSS classes to be applied to the outcome when rendering.",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the outcome.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name provided by the builder user to help identify the outcome.",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label provided by the builder user to help Flow users select the correct outcome.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which this outcome should appear with respect to sibling outcomes.",
                        "format": "int32"
                    }
                }
            },
            "MapElementInvokeResponseAPI": {
                "type": "object",
                "properties": {
                    "mapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the map element this response pertains to.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The developer name for the map element this response pertains to.",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The translatable label for the map element this response pertains to.",
                        "nullable": true
                    },
                    "pageResponse": {
                        "$ref": "#/components/schemas/PageResponseAPI"
                    },
                    "outcomeResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OutcomeResponseAPI"
                        },
                        "description": "The outcome response objects are the actions that can be performed by the user to navigate the flow from element to element. Outcome responses can be bound to page components to add additional context to the action (e.g. the button should appear beside a field input, above a table of records, etc)",
                        "nullable": true
                    },
                    "rootFaults": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key value pairs taking the form of {\"errorCode\":\"errorMessage\"}. The root faults are populated if a fault has occurred that is not attributed to a specific value on the page. A root fault is often due to an element in the flow experiencing a fault and the author of the flow has determined that the user should be navigated to this page to rectify the problem. If an error is attributed to a value in the state, it will be bound to the page component as a validation error message.",
                        "nullable": true
                    }
                }
            },
            "VoteResponseAPI": {
                "type": "object",
                "properties": {
                    "isComplete": {
                        "type": "boolean"
                    },
                    "configurationValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "The configuration information needed for the service to function.",
                        "nullable": true
                    },
                    "authorization": {
                        "$ref": "#/components/schemas/AuthorizationAPI"
                    },
                    "userVotes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserVoteAPI"
                        },
                        "description": "The current list of votes that have been cast by end users.",
                        "nullable": true
                    },
                    "voteType": {
                        "type": "string",
                        "nullable": true
                    },
                    "minimumCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "minimumPercent": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "selectedOutcomeId": {
                        "type": "string",
                        "description": "The outcome the user has selected when then submitted the vote.",
                        "nullable": true
                    }
                }
            },
            "GeoLocationAPI": {
                "type": "object",
                "properties": {
                    "latitude": {
                        "type": "number",
                        "description": "The latitude coordinate of the user's location.",
                        "format": "double"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "The longitude coordinate of the user's location.",
                        "format": "double"
                    },
                    "accuracy": {
                        "type": "number",
                        "description": "The accuracy of the location data that has been collected.",
                        "format": "double"
                    },
                    "altitude": {
                        "type": "number",
                        "description": "The altitude of the user above mean sea level.",
                        "format": "double"
                    },
                    "altitudeAccuracy": {
                        "type": "number",
                        "description": "The accuracy of the altitude data that has been collected.",
                        "format": "double"
                    },
                    "heading": {
                        "type": "number",
                        "description": "The heading of the user as degrees clockwise from North.",
                        "format": "double"
                    },
                    "speed": {
                        "type": "number",
                        "description": "The speed of the user in meters per second.",
                        "format": "double"
                    },
                    "time": {
                        "type": "string",
                        "description": "The timestamp of the data that has been collected",
                        "format": "date-time"
                    }
                }
            },
            "PageComponentInputResponseRequestAPI": {
                "type": "object",
                "properties": {
                    "pageComponentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentValue": {
                        "type": "string",
                        "nullable": true
                    },
                    "objectData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "PageRequestAPI": {
                "type": "object",
                "properties": {
                    "pageComponentInputResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageComponentInputResponseRequestAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "MapElementInvokeRequestAPI": {
                "type": "object",
                "properties": {
                    "selectedOutcomeId": {
                        "type": "string",
                        "description": "The unique identifier for the outcome the user is taking action on. The outcomes are provided in the MapElementInvokeResponse as part of the outcomeResponses property.",
                        "nullable": true
                    },
                    "pageRequest": {
                        "$ref": "#/components/schemas/PageRequestAPI"
                    },
                    "messageActionRequest": {
                        "$ref": "#/components/schemas/MessageActionAPI"
                    }
                }
            },
            "EngineInvokeRequestAPI": {
                "type": "object",
                "properties": {
                    "culture": {
                        "$ref": "#/components/schemas/CultureAPI"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The unique identifier for the initialized flow state. The state identifier is needed throughout the execution of the flow as it is the pointer that points the engine to the correct running instance of a flow.",
                        "nullable": true
                    },
                    "stateToken": {
                        "type": "string",
                        "description": "The unique identifier for the token response from the state. The state token identifier changes with every cycle of request/response. The token is needed as it tells the engine how in-sync your request is with the current service side state.",
                        "nullable": true
                    },
                    "currentMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the map element the user is currently executing against.",
                        "nullable": true
                    },
                    "navigationElementId": {
                        "type": "string",
                        "description": "The unique identifier for the navigation element that's being used to drive the navigation scheme.",
                        "nullable": true
                    },
                    "selectedNavigationItemId": {
                        "type": "string",
                        "description": "When executing using an InvokeType of 'NAVIGATE', this is the selected navigation item the user wishes to move to in the Flow.",
                        "nullable": true
                    },
                    "selectedMapElementId": {
                        "type": "string",
                        "description": "When executing a Flow that has the allowJumping property set to 'true', the user can move to any Map Element in the Flow regardless of navigation or outcomes. This is the unique identifier of the Map Element the user wishes to navigate to and must be used with an InvokeType of 'NAVIGATE'.",
                        "nullable": true
                    },
                    "selectedStateEntryId": {
                        "type": "string",
                        "description": "When executing a Flow that has the allowJumping property set to 'true', the user can move to any Map Element regardless of navigation or outcomes.\r\nThis is the Id of the State Entry that the user wishes to navigate to and must be used with an InvokeType of 'NAVIGATE'.\r\nThe engine will calculate the Map Element from the previous State Entry and execute a jump to it.\r\nThis is an alternative to using 'selectedMapElementId' jumping, with this method offering an added capability to navigate between different flows.",
                        "nullable": true
                    },
                    "invokeType": {
                        "type": "string",
                        "description": "The way you want to invoke the engine as part of this request. The user may be navigating forward, or you may be wanting to perform a sync operation to update the UI due to another user making a change.",
                        "nullable": true
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key value pairs you wish to annotate to the flow. Annotations take the form of {\"mykey\":\"myvalue\"}. Any annotations added to the state will be persisted for the duration of the flow. Annotations are passed to the executing player and also through to plugin services. Annotations can be changed at any time through the execution of the flow.",
                        "nullable": true
                    },
                    "geoLocation": {
                        "$ref": "#/components/schemas/GeoLocationAPI"
                    },
                    "mapElementInvokeRequest": {
                        "$ref": "#/components/schemas/MapElementInvokeRequestAPI"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode you wish to run the flow in. The mode is mainly useful for debugging purposes as you can step through the flow and also view state information to check everything is working as expected.",
                        "nullable": true
                    }
                }
            },
            "StateLogEntryInvokePairAPI": {
                "type": "object",
                "properties": {
                    "engineInvokeRequest": {
                        "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                    },
                    "engineInvokeResponse": {
                        "$ref": "#/components/schemas/EngineInvokeResponseAPI"
                    },
                    "order": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "StateLogEntryAPI": {
                "type": "object",
                "properties": {
                    "engineInvokeRequest": {
                        "$ref": "#/components/schemas/EngineInvokeRequestAPI"
                    },
                    "engineInvokeResponse": {
                        "$ref": "#/components/schemas/EngineInvokeResponseAPI"
                    },
                    "stateLogEntryInvokePairs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StateLogEntryInvokePairAPI"
                        },
                        "nullable": true
                    },
                    "timeStamp": {
                        "type": "string",
                        "nullable": true
                    },
                    "isActive": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "StateLogAPI": {
                "type": "object",
                "properties": {
                    "stateLogEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StateLogEntryAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "EngineFrameAPI": {
                "type": "object",
                "properties": {
                    "flowId": {
                        "type": "string",
                        "description": "The id of the flow associated with this stack frame",
                        "format": "uuid"
                    },
                    "mapElementId": {
                        "type": "string",
                        "description": "If this frame is the current frame, this property contains the id of the current map element.\r\nIf this frame refers to one of the parent frames, this property contains the id of a Subflow map element that was the entry point to the next frame.",
                        "format": "uuid",
                        "nullable": true
                    },
                    "mapElementDeveloperName": {
                        "type": "string",
                        "description": "If this frame is the current frame, this property contains the developer name of the current map element.\r\nIf this frame refers to one of the parent frames, this property contains the id of a Subflow map element that was the entry point to the next frame.",
                        "nullable": true
                    }
                }
            },
            "EngineInvokeResponseAPI": {
                "type": "object",
                "properties": {
                    "culture": {
                        "$ref": "#/components/schemas/CultureAPI"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The unique identifier for the initialized flow state. The state identifier is needed throughout the execution of the flow as it is the pointer that points the engine to the correct running instance of a flow.",
                        "nullable": true
                    },
                    "parentStateId": {
                        "type": "string",
                        "nullable": true
                    },
                    "stateToken": {
                        "type": "string",
                        "description": "The unique identifier for the token response from the state. The state token identifier changes with every cycle of request/response. The token is needed as it tells the engine how in-sync your request is with the current service side state.",
                        "nullable": true
                    },
                    "alertEmail": {
                        "type": "string",
                        "description": "The email address that should be used to notify of any Flow or player related faults. This email address is typically the email of the author of the Flow.",
                        "nullable": true
                    },
                    "waitMessage": {
                        "type": "string",
                        "description": "The message that should be shown to the user if the engine returns an Invoke Type of 'WAIT'.",
                        "nullable": true
                    },
                    "notAuthorizedMessage": {
                        "type": "string",
                        "description": "The message that should be shown to the user if the engine returns an Invoke Type of 'STATUS'. The engine will automatically handle UI permissions - so this user will not recieve Page metadata.",
                        "nullable": true
                    },
                    "flowId": {
                        "type": "string",
                        "description": "The unique identifier for the flow the user is currently executing against.",
                        "nullable": true
                    },
                    "flowName": {
                        "type": "string",
                        "description": "The name for the flow the user is currently executing against.",
                        "nullable": true
                    },
                    "flowVersion": {
                        "type": "string",
                        "description": "The unique identifier for the flow version the user is currently executing against.",
                        "nullable": true
                    },
                    "currentMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the map element the user is currently executing against.",
                        "nullable": true
                    },
                    "currentStreamId": {
                        "type": "string",
                        "description": "The unique identifier for the collaboration stream the user is currently using to collaborate with colleagues. If the Flow is not leveraging collaboration streams, this property will be null or blank.",
                        "nullable": true
                    },
                    "invokeType": {
                        "type": "string",
                        "description": "The way the engine responded to your initial invoke request.",
                        "nullable": true
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key value pairs you wish to annotate to the flow. Annotations take the form of {\"mykey\":\"myvalue\"}. Any annotations added to the state will be persisted for the duration of the flow. Annotations are passed to the executing player and also through to plugin services. Annotations can be changed at any time through the execution of the flow.",
                        "nullable": true
                    },
                    "mapElementInvokeResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MapElementInvokeResponseAPI"
                        },
                        "description": "The list of map element invoke responses generated by the executed element or elements in the flow. Currently the array contains only the one object, which is the object that is the current element being executed in the flow.",
                        "nullable": true
                    },
                    "voteResponse": {
                        "$ref": "#/components/schemas/VoteResponseAPI"
                    },
                    "stateLog": {
                        "$ref": "#/components/schemas/StateLogAPI"
                    },
                    "preCommitStateValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "The list of engine values that are currently in a pre-commit state. This is only populated when the engine is being run in \"DEBUG\" or \"DEBUG_STEPTHROUGH\" mode. Values are only committed to the state after the element has completed execution successfully (usually as a result of the user invoking the engine \"FORWARD\" and the page validating correctly).",
                        "nullable": true
                    },
                    "stateValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "The list of engine values that are currently committed in the state. This is only populated when the engine is being run in \"DEBUG\" or \"DEBUG_STEPTHROUGH\" mode.",
                        "nullable": true
                    },
                    "outputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "The list of engine values for all values in the flow that are set as OUTPUT or INPUT/OUTPUT. This property is only populated when the engine responds with an invokeType of \"DONE\".",
                        "nullable": true
                    },
                    "frames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineFrameAPI"
                        },
                        "description": "This property is populated is only in debug mode. It contains the list of current stack frames.",
                        "nullable": true
                    },
                    "statusCode": {
                        "type": "string",
                        "description": "The values mimic standard REST codes, but as a String. A \"200\" indicates the user is authenticated to execute the flow. A \"401\" indicates the user needs to login based on the authorization context information provided in the response.",
                        "nullable": true
                    },
                    "runFlowUri": {
                        "type": "string",
                        "description": "The Url that should be used to run a new instance of this flow with this player. For cross-platform situations, the run Url should redirect to the appropriate player for the calling device.",
                        "nullable": true
                    },
                    "joinFlowUri": {
                        "type": "string",
                        "description": "The Url that should be used to join this instance of this this flow with this player. For cross-platform situations, the join Url should redirect to the appropriate player for the calling device.",
                        "nullable": true
                    },
                    "authorizationContext": {
                        "$ref": "#/components/schemas/EngineAuthorizationContextAPI"
                    },
                    "navigationElementReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationElementReferenceAPI"
                        },
                        "nullable": true
                    },
                    "isHistoricalNavigationEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether both the UI and api for historical navigation has been enabled/disabled."
                    },
                    "waitExpiresAt": {
                        "type": "string",
                        "description": "A currently configured wait, after which execution of the flow can continue.",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "ElementResponseAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element",
                        "nullable": true
                    },
                    "pageContainerId": {
                        "type": "string",
                        "description": "The unique identifier for the page container this element should be placed into. When rendering a UI, this is the best reference to use as the developer names are not guaranteed to be unique.",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type tells the player the kind of element that needs to be rendered. This is usually to indicate if the container has particular layour properties such as vertical, horizontal or inline flow - or that the container is a group of tabs. The container type is not restricted to the enumeration provided here - however - all of the standard players provided by ManyWho are able to render the container types in the enum. If you wish to add more container types, be aware that you will need to update the player to support these.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The name the author has given for this element.",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label for the element. This is often used as a title for the section of the page represented by this container.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which this element should appear on the page with respect to other page containers at the same level in the element hierarchy.",
                        "format": "int32"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the element should be enabled. If the element is disabled, the default behavior is that all child components and containers are also disabled."
                    },
                    "isEditable": {
                        "type": "boolean",
                        "description": "Indicates if the element should be editable. If the element is not editable, the default behavior is that all child components and containers are also not editable."
                    },
                    "isVisible": {
                        "type": "boolean",
                        "description": "Indicates if the element should be visible. If the element is not visible, the default behavior is that all child components and containers are also not visible."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "The page tag provides additional metadata that the author of the flow has defined for this element. Tags are a very powerful way of providing additional information to player developers to ensure the app is providing exactly the user experience you expect. This object will be further documented when we release the page composition tool.",
                        "nullable": true
                    },
                    "outcomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OutcomeResponseAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "PageContainerResponse2API": {
                "type": "object",
                "properties": {
                    "children": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ElementResponseAPI"
                        },
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the element",
                        "nullable": true
                    },
                    "pageContainerId": {
                        "type": "string",
                        "description": "The unique identifier for the page container this element should be placed into. When rendering a UI, this is the best reference to use as the developer names are not guaranteed to be unique.",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type tells the player the kind of element that needs to be rendered. This is usually to indicate if the container has particular layour properties such as vertical, horizontal or inline flow - or that the container is a group of tabs. The container type is not restricted to the enumeration provided here - however - all of the standard players provided by ManyWho are able to render the container types in the enum. If you wish to add more container types, be aware that you will need to update the player to support these.",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "description": "The name the author has given for this element.",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label for the element. This is often used as a title for the section of the page represented by this container.",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order in which this element should appear on the page with respect to other page containers at the same level in the element hierarchy.",
                        "format": "int32"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the element should be enabled. If the element is disabled, the default behavior is that all child components and containers are also disabled."
                    },
                    "isEditable": {
                        "type": "boolean",
                        "description": "Indicates if the element should be editable. If the element is not editable, the default behavior is that all child components and containers are also not editable."
                    },
                    "isVisible": {
                        "type": "boolean",
                        "description": "Indicates if the element should be visible. If the element is not visible, the default behavior is that all child components and containers are also not visible."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "The page tag provides additional metadata that the author of the flow has defined for this element. Tags are a very powerful way of providing additional information to player developers to ensure the app is providing exactly the user experience you expect. This object will be further documented when we release the page composition tool.",
                        "nullable": true
                    },
                    "outcomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OutcomeResponseAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "NavigationItemResponse2API": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationItemResponse2API"
                        },
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "isCurrent": {
                        "type": "boolean"
                    },
                    "isEnabled": {
                        "type": "boolean"
                    },
                    "isVisible": {
                        "type": "boolean"
                    },
                    "locationMapElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "EngineNavigationResponse2API": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationItemResponse2API"
                        },
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "nullable": true
                    },
                    "isVisible": {
                        "type": "boolean"
                    },
                    "isEnabled": {
                        "type": "boolean"
                    },
                    "persistState": {
                        "type": "boolean",
                        "description": "Indicates if the platform should save state when navigating between elements"
                    },
                    "persistValues": {
                        "type": "boolean",
                        "description": "Indicates if the platform should save values when navigating between elements"
                    }
                }
            },
            "EngineInvokeResponse2API": {
                "type": "object",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "rootElement": {
                        "$ref": "#/components/schemas/PageContainerResponse2API"
                    },
                    "navigations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineNavigationResponse2API"
                        },
                        "nullable": true
                    },
                    "outcomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OutcomeResponseAPI"
                        },
                        "nullable": true
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The unique identifier for the initialized flow state. The state identifier is needed throughout the execution of the flow as it is the pointer that points the engine to the correct running instance of a flow.",
                        "nullable": true
                    },
                    "stateToken": {
                        "type": "string",
                        "description": "The unique identifier for the token response from the state. The state token identifier changes with every cycle of request/response. The token is needed as it tells the engine how in-sync your request is with the current service side state.",
                        "nullable": true
                    },
                    "waitMessage": {
                        "type": "string",
                        "description": "The message that should be shown to the user if the engine returns an Invoke Type of 'WAIT'.",
                        "nullable": true
                    },
                    "notAuthorizedMessage": {
                        "type": "string",
                        "description": "The message that should be shown to the user if the engine returns an Invoke Type of 'STATUS'. The engine will automatically handle UI permissions - so this user will not recieve Page metadata.",
                        "nullable": true
                    },
                    "flowId": {
                        "type": "string",
                        "description": "The unique identifier for the flow the user is currently executing against.",
                        "nullable": true
                    },
                    "flowName": {
                        "type": "string",
                        "description": "The name for the flow the user is currently executing against.",
                        "nullable": true
                    },
                    "flowVersion": {
                        "type": "string",
                        "description": "The unique identifier for the flow version the user is currently executing against.",
                        "nullable": true
                    },
                    "currentMapElementId": {
                        "type": "string",
                        "description": "The unique identifier for the map element the user is currently executing against.",
                        "nullable": true
                    },
                    "invokeType": {
                        "type": "string",
                        "description": "The way the engine responded to your initial invoke request.",
                        "nullable": true
                    },
                    "statusCode": {
                        "type": "string",
                        "description": "The values mimic standard REST codes, but as a String. A \"200\" indicates the user is authenticated to execute the flow. A \"401\" indicates the user needs to login based on the authorization context information provided in the response.",
                        "nullable": true
                    },
                    "joinFlowUri": {
                        "type": "string",
                        "description": "The Url that should be used to join this instance of this this flow with this player. For cross-platform situations, the join Url should redirect to the appropriate player for the calling device.",
                        "nullable": true
                    },
                    "authorizationContext": {
                        "$ref": "#/components/schemas/EngineAuthorizationContextAPI"
                    },
                    "waitExpiresAt": {
                        "type": "string",
                        "description": "A currently configured wait, after which execution of the flow can continue.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "rootFaults": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key value pairs taking the form of {\"errorCode\":\"errorMessage\"}. The root faults are populated if a fault has occurred that is not attributed to a specific value on the page. A root fault is often due to an element in the flow experiencing a fault and the author of the flow has determined that the user should be navigated to this page to rectify the problem. If an error is attributed to a value in the state, it will be bound to the page component as a validation error message.",
                        "nullable": true
                    },
                    "pageComponentDataResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageComponentDataResponseAPI"
                        },
                        "description": "The meta data and data for the page components. The metadata tells the player if the component is visible, enabled, etc, and also tells the player the content of the component. This information is subject to change based on events performed by the UI and this array of objects will always be returned by the engine regardless of invokeType (assuming the user is authenticated and the element has UI).",
                        "nullable": true
                    },
                    "pageContainerDataResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageContainerDataResponseAPI"
                        },
                        "description": "The meta data for the page containers. The metadata tells the player if the container is visible, enabled, etc. This information is subject to change based on events performed by the UI and this array of objects will always be returned by the engine regardless of invokeType (assuming the user is authenticated and the element has UI).",
                        "nullable": true
                    }
                }
            },
            "ValueFaultAPI": {
                "type": "object",
                "properties": {
                    "valueElementToReferenceId": {
                        "type": "string",
                        "description": "The unique identifier of the Value that caused the fault in the Service. This allows ManyWho to match this fault with any Pages that display it to a user.",
                        "nullable": true
                    },
                    "valueElementTypeElementPropertyToReferenceId": {
                        "type": "string",
                        "description": "The unique identifier of the Type Property that cause the fault in the Service. This is only applicable for ContentObject and ContentList Values.",
                        "nullable": true
                    },
                    "faultCode": {
                        "type": "string",
                        "description": "An informative code from the Service to indicate the type of fault that occurred.",
                        "nullable": true
                    },
                    "faultMessage": {
                        "type": "string",
                        "description": "A fault message that will help users understand how to fix the fault in their provided value.",
                        "nullable": true
                    }
                }
            },
            "ServiceResponseAPI": {
                "type": "object",
                "properties": {
                    "invokeType": {
                        "type": "string",
                        "description": "Tells the engine what this service would like it to do.  At the moment, there are really only\r\ntwo possible commands: WAIT (to tell the engine to wait for a completed response) or DONE (to\r\ntell the engine that it has completed its work.",
                        "nullable": true
                    },
                    "waitMessage": {
                        "type": "string",
                        "description": "The \"wait\" message that should be provided to users waiting for the Service to complete its tasks.",
                        "nullable": true
                    },
                    "outputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EngineValueAPI"
                        },
                        "description": "The output values from the Service being sent back to the Flow State. Outputs will be applied to the Flow State even if the InvokeType is set to WAIT.",
                        "nullable": true
                    },
                    "selectedOutcomeId": {
                        "type": "string",
                        "description": "The Outcome the Service would like the Flow to follow. If the Outcome has Rules, the Service request for this outcome will be ignored unless the Rules are also satisfied.",
                        "nullable": true
                    },
                    "rootFaults": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Any faults that have happened in the Service that should be reported up to the Flow State.",
                        "nullable": true
                    },
                    "valueFaults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValueFaultAPI"
                        },
                        "description": "Any faults that are directly attributed to an input value provided in the ServiceRequest. If a ValueFault is specified, ManyWho will attempt to match this error with any input fields that are bound to that Value.",
                        "nullable": true
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode which the Service would like the Flow State to execute under.",
                        "nullable": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The execution token needed for any callback responses from the Service.",
                        "nullable": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The unique identifier for the tenant that made the request to the Service.",
                        "nullable": true
                    },
                    "culture": {
                        "$ref": "#/components/schemas/CultureAPI"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Any runtime annotations that were provided to the State plus any additional annotations the Service may be providing.",
                        "nullable": true
                    }
                }
            },
            "ListenerServiceResponseAPI": {
                "type": "object",
                "properties": {
                    "listeningEventValue": {
                        "$ref": "#/components/schemas/EngineValueAPI"
                    },
                    "token": {
                        "type": "string",
                        "description": "The execution token needed for any callback responses from the Service.",
                        "nullable": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The unique identifier for the tenant that made the request to the Service.",
                        "nullable": true
                    },
                    "culture": {
                        "$ref": "#/components/schemas/CultureAPI"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Any runtime annotations that were provided to the State plus any additional annotations the Service may be providing.",
                        "nullable": true
                    }
                }
            },
            "StateListenerRequestAPI": {
                "type": "object",
                "properties": {
                    "listenType": {
                        "type": "string",
                        "nullable": true
                    },
                    "stateId": {
                        "type": "string",
                        "nullable": true
                    },
                    "callbackUri": {
                        "type": "string",
                        "nullable": true
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                }
            },
            "StateListenerResponseAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "listenType": {
                        "type": "string",
                        "nullable": true
                    },
                    "stateId": {
                        "type": "string",
                        "nullable": true
                    },
                    "callbackUri": {
                        "type": "string",
                        "nullable": true
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                }
            },
            "StateHistoryEntryAPI": {
                "type": "object",
                "properties": {
                    "flowId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "mapElementId": {
                        "type": "string",
                        "description": "The ID of the Map Element",
                        "format": "uuid"
                    },
                    "mapElementName": {
                        "type": "string",
                        "description": "The name of the Map Element",
                        "nullable": true
                    },
                    "stateEntryId": {
                        "type": "string",
                        "description": "The id of the corresponding State Entry",
                        "format": "uuid"
                    }
                }
            },
            "StateHistoryAPI": {
                "type": "object",
                "properties": {
                    "entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StateHistoryEntryAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "ProblemKind": {
                "enum": [
                    0,
                    1
                ],
                "type": "integer",
                "format": "int32"
            },
            "ServiceProblem": {
                "type": "object",
                "properties": {
                    "invokeType": {
                        "type": "string",
                        "description": "The expected invoke type returned by the service",
                        "nullable": true
                    },
                    "action": {
                        "type": "string",
                        "description": "The name of the action executed by the service",
                        "nullable": true
                    },
                    "kind": {
                        "$ref": "#/components/schemas/ProblemKind"
                    },
                    "uri": {
                        "type": "string",
                        "description": "The URI of the service endpoint the problem originated from",
                        "nullable": true
                    },
                    "statusCode": {
                        "type": "integer",
                        "description": "The status code returned by the service",
                        "format": "int32"
                    },
                    "responseBody": {
                        "type": "string",
                        "description": "The body returned by the service",
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "description": "A short summary of the error returned by the service",
                        "nullable": true
                    },
                    "responseHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "nullable": true
                    }
                }
            },
            "ServiceInvokerFailureAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the Failure",
                        "format": "uuid"
                    },
                    "serviceRequestId": {
                        "type": "string",
                        "description": "The unique ID of the Request the Failure belongs to",
                        "format": "uuid"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The unique ID of the tenant the Failure belongs to",
                        "format": "uuid"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The unique ID of the state the Failure belongs to",
                        "format": "uuid"
                    },
                    "problem": {
                        "$ref": "#/components/schemas/ServiceProblem"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time that the failure was created and received at",
                        "format": "date-time"
                    }
                }
            },
            "ServiceInvokerRequestAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the Request",
                        "format": "uuid"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The unique ID of the tenant the Request belongs to",
                        "format": "uuid"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The unique ID of the state the Request belongs to",
                        "format": "uuid"
                    },
                    "content": {
                        "type": "string",
                        "description": "The serialised JSON body of the Request sent to the service",
                        "nullable": true
                    },
                    "method": {
                        "type": "string",
                        "description": "The HTTP method of the call to the service",
                        "nullable": true
                    },
                    "uri": {
                        "type": "string",
                        "description": "The URI of the endpoint hit on the service",
                        "nullable": true
                    },
                    "authorizationHeader": {
                        "type": "string",
                        "nullable": true
                    },
                    "mapElementId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "sequenceNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time that the request was created and sent at",
                        "format": "date-time"
                    },
                    "failures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceInvokerFailureAPI"
                        },
                        "description": "A list of failures sent back from the service. This field is only populated when fetching a single Request",
                        "nullable": true
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    }
                }
            },
            "ServiceInvokerRequestAPIItemCollectionResponse": {
                "type": "object",
                "properties": {
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceInvokerRequestAPI"
                        },
                        "nullable": true,
                        "readOnly": true
                    }
                }
            },
            "NavigationItemTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "locationMapElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "labelContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "navigationItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationItemTranslationResponseAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "ContentValueDocumentTranslationAPI": {
                "type": "object",
                "properties": {
                    "contentValues": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The set of content value translations for a particular element. The key of the content value is the identifier for the\r\nproperty in the element.",
                        "nullable": true
                    },
                    "objectData": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ObjectAPI"
                            }
                        },
                        "description": "The set of object data translations for a particular element. The key of the object data is the identifier for the\r\nproperty in the element.",
                        "nullable": true
                    }
                }
            },
            "ContentValueDocumentAPI": {
                "type": "object",
                "properties": {
                    "translations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ContentValueDocumentTranslationAPI"
                        },
                        "description": "The set of content value document translations for a particular element. The key of the document is the identifier for the\r\nculture.",
                        "nullable": true
                    }
                }
            },
            "NavigationElementTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "labelContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "navigationItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationItemTranslationResponseAPI"
                        },
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentValueDocument": {
                        "$ref": "#/components/schemas/ContentValueDocumentAPI"
                    }
                }
            },
            "OutcomeTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "labelContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "nextMapElementId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "MapElementTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "userContentContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "statusMessageContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "postUpdateMessageContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "notAuthorizedMessageContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "labelContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "outcomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OutcomeTranslationResponseAPI"
                        },
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentValueDocument": {
                        "$ref": "#/components/schemas/ContentValueDocumentAPI"
                    }
                }
            },
            "PageContainerTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "containerType": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "labelContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "pageContainers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageContainerTranslationResponseAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "PageComponentColumnTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "labelContentValueId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "PageComponentTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "pageContainerDeveloperName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "componentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "labelContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "hintValueContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "helpInfoContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageComponentColumnTranslationResponseAPI"
                        },
                        "nullable": true
                    }
                }
            },
            "PageElementTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "labelContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "pageContainers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageContainerTranslationResponseAPI"
                        },
                        "nullable": true
                    },
                    "pageComponents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageComponentTranslationResponseAPI"
                        },
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentValueDocument": {
                        "$ref": "#/components/schemas/ContentValueDocumentAPI"
                    }
                }
            },
            "PropertyTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentFormatContentValueId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "TypeElementTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PropertyTranslationResponseAPI"
                        },
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentValueDocument": {
                        "$ref": "#/components/schemas/ContentValueDocumentAPI"
                    }
                }
            },
            "ValueElementTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "contentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentFormatContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "defaultContentValueContentValueId": {
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "elementType": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentValueDocument": {
                        "$ref": "#/components/schemas/ContentValueDocumentAPI"
                    }
                }
            },
            "FlowImageTranslationResponseAPI": {
                "type": "object",
                "properties": {
                    "editingToken": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "developerSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "startMapElementId": {
                        "type": "string",
                        "nullable": true
                    },
                    "navigationElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NavigationElementTranslationResponseAPI"
                        },
                        "nullable": true
                    },
                    "mapElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MapElementTranslationResponseAPI"
                        },
                        "nullable": true
                    },
                    "pageElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PageElementTranslationResponseAPI"
                        },
                        "nullable": true
                    },
                    "typeElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TypeElementTranslationResponseAPI"
                        },
                        "nullable": true
                    },
                    "valueElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValueElementTranslationResponseAPI"
                        },
                        "nullable": true
                    }
                }
            }
        },
        "securitySchemes": {
            "token": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Admin Provisioning",
            "x-displayName": "Provisioning"
        },
        {
            "name": "Admin Runtimes",
            "x-displayName": "Runtimes"
        },
        {
            "name": "Admin States",
            "description": "_The flow state object provides data about a specific instance of a running flow_\r\n            \r\nA flow state provides in-depth information about how users have interacted with a flow, from the data that has\r\nbeen collected in values, to the path of map elements that were travelled, to the users who have interacted with\r\nthe flow at the various stages of its execution. Flow state data is only available for active flows that have\r\nnot yet completed.\r\n            \r\nThis API should also not be used for reporting purposes as we have a separate reporting API and reporting\r\ninfrastructure.",
            "x-displayName": "States"
        },
        {
            "name": "Admin Tenants and Subtenants",
            "description": "_A tenant provides a central place for flow builders to build, manage and deploy flows._\r\n            \r\nOnce a tenant has been provisioned, there are various settings available to ensure security is correctly\r\nconfigured and data is properly managed for reporting purposes. The APIs below work for both tenants and\r\nsubtenants. The only difference between a tenant and and subtenant is that flow builders can move between them\r\nusing and the tenants are grouped together to ease management.",
            "x-displayName": "Tenants and Subtenants"
        },
        {
            "name": "Admin Users",
            "description": "_Users provide basic information about flow builders and running users in a tenant_\r\n            \r\nUsers on the platform are identified via their email. As a result, the email address determines who the user is.\r\nThe email address is the unique identifier across the entire platform. When running users access a flow, a user\r\nis provisioned into the tenant on-demand. In addition, flow builders are included in the user listing.",
            "x-displayName": "Users"
        },
        {
            "name": "Audit Audit",
            "x-displayName": "Audit"
        },
        {
            "name": "Dashboard Dashboard",
            "x-displayName": "Dashboard"
        },
        {
            "name": "Draw Assets",
            "x-displayName": "Assets"
        },
        {
            "name": "Draw Authentication",
            "description": "_Authenticate flow builders before using the Admin, Draw, Packaging and Translate APIs_\r\n            \r\nOnce a tenant and flow builder have been provisioned, you can authenticate using the Draw API. The returned\r\ntoken should be used in the standard HTTP `Authorization` header when performing any operations against the\r\nvarious supported APIs.",
            "x-displayName": "Authentication"
        },
        {
            "name": "Draw Draw",
            "x-displayName": "Draw"
        },
        {
            "name": "Draw Flow",
            "description": "_Flows represent an entire application_\r\n            \r\nFlows represent an atomic package of elements that when run, are fully versioned. Flows can reference other\r\nflows using a \"flow out\" or by messaging other flows in the tenant using the Runtime Service. When referencing\r\nflows (parent or subflows), the platform will always take the latest activated and default version of the flow.\r\n            \r\nWhen editing elements in a flow, you do not do this through this section of the APIs. Each element type has its\r\nown API endpoint for managing objects, etc.\r\n            \r\nAs with group elements, a flow can also have permissions. However, unlike the group element, if a user cannot\r\nauthenticate to a flow, they cannot access any part of the flow state. Effectively, the flow authorization\r\nprotects your flow application from any access by running users that cannot successfully authenticate with the\r\nprovided authorization criteria. Therefore any group elements act as a subset of authorization. The running\r\nusers must first authenticate successfully into the flow and subsequently authenticate into any group elements.\r\nFurther to this, there's no requirement that the flow and group elements use the same service for\r\nauthentication. Flow builders can build flows that authenticate across multiple systems, move from\r\nunauthenticated to authenticated access, etc.",
            "x-displayName": "Flow"
        },
        {
            "name": "Draw Flow Graph",
            "description": "_The Flow Graph object provides the coordinate and basic configuration information of map and group elements._\r\n            \r\nThe Flow Graph object is typically used for editing the layout of the flow for flow builders. This API should\r\nnot be used for creating new flows, but rather to manage map and group elements in an existing flow. The focus\r\nof this API is to allow flow builders to make coordinate changes to these elements while ensuring other flow\r\nbuilders are notified of these changes and can be updated in realtime.",
            "x-displayName": "Flow Graph"
        },
        {
            "name": "Draw Flow Snapshot",
            "description": "_The flow snapshot is the package that is sent to the platform runtime engine._\r\n            \r\nWithout a flow snapshot, a flow cannot be accessed by running users. The flow snapshot contains all the fully\r\nversioned elements that are needed for the flow to execute (excluding subflows). In the tooling, each time a\r\nflow is run or published, a flow snapshot is taken. This means you then have a version of the flow that can also\r\nbe reverted if flow builders make a range of mistakes and would like to go back to a previous snapshot.\r\n            \r\nThe flow snapshot also acts as a version system as all metadata for the flow can be accessed, and external tools\r\ncan be used to diff for changes. Equally, for compliance, a customer can access the flow snapshots to get a\r\ncomplete picture of which flow the running user(s) were running at any particular point in time.",
            "x-displayName": "Flow Snapshot"
        },
        {
            "name": "Draw Group Element",
            "description": "_The group element object represents any group or element in your flow that can contain map elements._\r\n            \r\nGroup elements are used to add additional behavior to map elements in your flow. The group element currently\r\nonly supports the ability to change the authentication context of the map elements it contains. This allows\r\nbuilders to change the permissions for map elements contained in the group element and restrict the ability for\r\nrunning users to edit or take action on any outcomes.\r\n            \r\n<aside class=\"alert alert-info\">\r\nIt’s important to note that the swimlane group element assigns a new authorization context to the map elements\r\nit holds. This authorization context is passed up the stack to any integrated services that can leverage this\r\ninformation to provide additional features.\r\n            \r\nFor example, the Salesforce service uses the swimlane information to determine the percentage of running users\r\nthat have voted. It also uses this context to determine who should be notified or emailed.\r\n</aside>",
            "x-displayName": "Group Element"
        },
        {
            "name": "Draw Identity Provider",
            "x-displayName": "Identity Provider"
        },
        {
            "name": "Draw Macro Element",
            "x-displayName": "Macro Element"
        },
        {
            "name": "Draw Map Element",
            "description": "_The map element object represents any node or element in your flow diagram._\r\n            \r\nMap elements are used to set out the actions and journey of your flow. Each map element performs an action,\r\nwhich may be to present the user with information, collect information, or perform logical actions such as\r\ninserting records into a database, executing business rules, or sending messages to a 3rd party application.\r\n            \r\nThere's a lot of functionality packed into map elements, and that has been separated out in the sections below.\r\n            \r\n### Data Actions\r\n            \r\nA data action is used to perform create, read, update, or delete (CRUD) type operations on a service. There are\r\na number of features that make data actions particularly powerful:\r\n            \r\n<ul><li>You do not need to manage <code>INSERT</code> vs. <code>UPDATE</code> operations. We automatically track the\r\nobjects in your flow and know if it is a new object to be inserted or an update to an existing object. This is\r\ndone using our <code>SAVE</code> operation. We do not separate <code>INSERT</code> and <code>UPDATE</code>.</li><li>You can configure filters using our common metadata. This means you do not need to understand the query\r\nlanguage of the underlying service - you can create queries using a standard notation and we automatically\r\ntranslate this notation into SQL (RDBMS), SOQL (Salesforce), ZOQL (Zuora), etc.</li><li>The data action automatically knows where the data needs to go. There is no need to map fields into the\r\ndatabase as this is already configured in the type. In addition, a number of services also support “smart save”\r\nwhich does a smart merge of data collected/changed in the flow with data already stored in the service.</li><li>If you need advanced data management capabilities such as summary roll-ups or joined tables, you can\r\nconfigure this using \"commands\" (as supported by the underlying service implementation).</li></ul><aside class=\"alert alert-info\">\r\nMap elements that support data actions are:\r\n<ul><li>Database Save</li><li>Database Load</li><li>Database Delete</li></ul></aside>\r\n            \r\n### Listeners\r\n            \r\nA Listener is used to listen to events on objects stored or managed by a service. When an event occurs (e.g. a\r\nrecord is updated) in the underlying application (e.g. Salesforce), the platform will inform the executing flow\r\nof the event so it can take appropriate action.\r\n            \r\nListeners work as follows:\r\n<ol><li>You send the service the objects you want to listen to (referencing the appropriate value). In addition, you\r\nspecify the type of event you’re interested in (e.g. record created).</li><li>The service will notify the platform when that event has happened on the associated object(s). This will\r\npopulate the referenced value with the latest data from the service.</li><li>You specify the outcomes (with comparisons/rules) under which you \"accept\" the event and the path the flow\r\nshould follow. If those comparisons/rules are met, the flow will proceed to the next map element in the flow as\r\ndefined by the matching outcome. If not, the flow will continue to wait until the appropriate event occurs.</li></ol><aside class=\"alert alert-info\">\r\nMap elements that support listeners are:\r\n<ul><li>Database Load</li><li>Database Save</li><li>Message</li><li>Page</li></ul></aside>\r\n            \r\n### Message Actions\r\n            \r\nA Message Action is used to perform general API operations on a Service. There are a number of features that make Message Actions particularly powerful:\r\n            \r\n<ul><li><strong>Multiple inputs/multiple outputs:</strong> When executing a message action, the service can specify\r\nmultiple inputs and multiple outputs post processing. E.g. you might have a service that moves a file from one\r\nfolder to another (in Box). For this you’d specify the file that needs to be moved and the location you’d\r\nlike to move it from and to (these would be the inputs). The outputs might be the file with revised information\r\nregarding its location and permissions.</li><li><strong>They can \"wait\"</strong>: When executing a message action, it can sometimes take some time to\r\ncomplete the request. Alternatively, the request may need to wait for a response. E.g. if you are sending a text\r\nmessage via Twilio and you want to have the flow wait for the response before proceeding. Other services may\r\nbe used precisely to cause the flow to wait, e.g. our Timer service that allows you to stop or wait the flow for\r\na timer interval or until a specific date. A \"wait\" can be created by building comparison/rules (e.g. the rules\r\nunder which the flow will proceed down a particular path). The flow will only follow an outcome until the rules\r\nare satisfied.</li></ul>\r\n            \r\nIt's important to note that message actions are described in the service definition. The purpose of the message\r\nactions is to map values in the flow to the inputs and outputs specified by the service.\r\n            \r\n<aside class=\"alert alert-info\">\r\nMap elements that support message actions are:\r\n<ul><li>Message</li><li>Page</li></ul></aside>\r\n            \r\n### Navigation Overrides\r\n            \r\nA navigation override is used to alter the functionality of navigation in your flow. As running users go through\r\na flow, it is often useful to alter how the navigation works. As a result, when the user gets to a particular\r\nmap element, you can execute changes to the navigation. These changes will persist until altered by another map\r\nelement. This can be useful in a variety of use-cases:\r\n            \r\n<ul><li>Certain parts of the navigation should only be functional once a certain portion of the flow has been\r\ncompleted. You can either disable or only make visible these parts of the navigation when ready. For example,\r\nyou might want to disable navigation steps 3-5 until step 2 in your Flow has been completed.</li><li>You want the navigation to remember where the user was in a particular section of your flow. For example,\r\nthe user might be going through a sequence of diagnostic steps under a \"Diagnose\" navigation item. If the user\r\nthen clicks on an \"FAQ\" navigation item to answer a quick question, by default when they click back on\r\n\"Diagnose\" it will restart the diagnostic section. If each map element in the \"Diagnose\" section overrides the\r\nnavigation to point to that particular map element, when the user clicks on the \"Diagnose\" navigation item, it\r\nwill take them to that particular map element, not back to the start.</li></ul><aside class=\"alert alert-info\">\r\nAll map elements support navigation overrides.\r\n</aside>\r\n            \r\n### Operations\r\n            \r\nAn operation is used to make a change to a value or execute a macro in your flow. Each operation can be ordered\r\nallowing builders to do operations in a particular sequence - as individual commands performed on values. Here\r\nare some examples of operations:\r\n            \r\n<ul><li>You want to assign the content of a value so the user doesn’t need to do it manually.</li><li>You want to get the next object from a list of objects in your flow.</li><li>You want to execute a macro that performs complex logic and business rules on values in your flow.</li></ul>\r\n            \r\nIn mathematics, an operation would be something like: <code>x = 3</code><aside class=\"alert alert-info\">\r\nMap elements that support operations are:\r\n<ul><li>Operator</li></ul></aside>\r\n            \r\n            \r\n### Outcomes\r\n            \r\nAn outcome is used to make move the running user(s) from one map element in the flow to another or from one map\r\nelement into another flow. An outcome can represent a button the running user(s) can click, or it can represent\r\na path the executing flow should follow based on logical operations in the flow. Outcomes can be combined with\r\nbusiness rules (provided by comparison/rules) to determine the path of execution based on pre-determined logic.\r\n            \r\n<aside class=\"alert alert-info\">\r\nAll map elements support outcomes. Map elements that support outcomes with comparison/rules are:\r\n<ul><li>Decision</li><li>Message</li><li>Page</li></ul></aside><aside class=\"alert alert-success\">\r\nWhen using outcomes with comparison/rules, it’s important to note a few things:\r\n            \r\n<ul><li><strong>Decision:</strong> The outcomes are evaluated in real-time and an outcome path is always selected or\r\nthe flow completes. Decisions do not have the ability to “wait”, they are processed and the correct outcome path\r\nis selected. If none of the outcome comparison/rules evaluate to true, the flow finishes.</li><li><strong>Message:</strong> The outcomes are evaluated in real-time every time the service responds with a\r\nstatus update. As a result, the flow will continue to “wait” until one of the outcome comparision/rules\r\nevaluates to true. A flow can “wait” for as long as the state exists on the platform.</li><li><strong>Page:</strong> The page effectively extends message. As a result, outcomes that have a blank “label”\r\nkey can be used with outcomes running users can click/select. For example, you may have a page used for\r\napproving some data. The page could also execute a message action with the Timer service to “wait” 2 hours. If\r\nthe message action returns before the running user(s) take action, the flow will progress down the outcome path\r\nconfigured to proceed when the Timer service responds. This is useful for escalation use-cases.</li></ul></aside>\r\n            \r\n### Vote\r\n            \r\nThe vote object is used to configure voting or multi-user approval options on an outcome. By configuring the\r\nvote, you can determine if a set number of running users or a percentage of running users (within the\r\nauthentication context of the map element) must click on a particular outcome before the flow will proceed down\r\nthat path. For example, before the approval is accepted, more than two running users must click on the “Approve”\r\noutcome before the flow will progress.\r\n            \r\nThe implementation of the vote algorithm is determined by the service. Builders should refer to the\r\ndocumentation of the service being used. The first running user to click on an outcome contained in a voting map\r\nelement will force the platform to “lock” the page from any further user inputs. Effectively the map element\r\nbecomes read-only until the vote is completed.\r\n            \r\n<aside class=\"alert alert-info\">\r\nMap elements that support voting are:\r\n<ul><li>Page</li><li>Step</li></ul></aside>",
            "x-displayName": "Map Element"
        },
        {
            "name": "Draw Navigation Element",
            "description": "_The navigation element object provides a menu or navigation structure allowing users to move around your flow\r\napplication in an unstructured way._\r\n            \r\nNavigation elements are used to set out the structure and map element locations which users can jump to\r\ndirectly. As a result, your map elements act more like web pages on a website than steps in a process. The base\r\nproperties of the navigation element are outlined here.",
            "x-displayName": "Navigation Element"
        },
        {
            "name": "Draw Page Element",
            "description": "_The page element object provides the structure of your pages or screens._\r\n            \r\nThe purpose of the page element is to allow flow builders to lay out the structure of the pages the users will\r\ninteract with as part of the flow application. The page element is extremely extensible and allows developers to\r\ncreate their own components and containers as needed to give users the best possible experience using your flow\r\napplication. The base properties of the page element are outlined here.\r\n            \r\n### Page Containers\r\n            \r\nA page container is used to determine the scaffolding of your page. Page containers allow flow builders to set\r\nout the relative position of page components on the page. In comparison with HTML5, a page container would be\r\nequivalent to a <code>div</code> tag. As a result, page containers do not have any value or input, they are\r\nsimply used to determine the layout or scaffolding aspects of the page.\r\n            \r\nThe type of page container is determined by the <code>containerType</code> property and developers looking to\r\nbuild custom containers should use a unique <code>containerType</code> name to identify their container\r\nimplementation. The properties outlined here are the common attributes for typical containers, however, if\r\nthese do not suffice, developers should use the <code>attributes</code> to extend the attributes for their own\r\nspecific needs. It’s important to note that each of the properties here provides features and the engine does\r\nnot have any understanding of one container type from another.\r\n            \r\n### Page Components\r\n            \r\nA page component is used to show or edit information on your page. In comparison with HTML5, a page component\r\nwould be equivalent to an <code>input</code>, <code>textarea</code>, or similar tag. As a result, page\r\ncomponents typically do have a value or input, and are used to prompt the user for some form or input or to view\r\na particular piece of information on the page.\r\n            \r\nThe type of page component is determined by the <code>componentType</code> property and developers looking to\r\nbuild custom components should use a unique <code>componentType</code> name to identify their component\r\nimplementation. The properties outlined here are the common attributes for typical components, however, if\r\nthese do not suffice, developers should use the <code>attributes</code> to extend the attributes for their own\r\nspecific needs. It’s important to note that each of the properties here provides features and the engine does\r\nnot have any understanding of one component type from another.\r\n            \r\n### Page Conditions\r\n            \r\nPage conditions are used to make your pages dynamic. Based on a set of page rules, the page conditions can\r\nassign values to your page components but also change various properties on your page components and containers\r\nsuch as: <code>required</code>, <code>editable</code>, <code>visible</code>. Page components can also have data\r\nrefreshed and <code>objectDataRequest</code> information dynamically assigned so you can, for example, change\r\ntable filters. This gives flow builders the ability to provide single pages that can provide the running user(s)\r\nwith a very dynamic experience.\r\n            \r\n### Page Operation Assignment\r\n            \r\nThe assignment object should be used when a value or piece of metadata for a component or container needs to be\r\nchanged. For example, a page component should be set as <code>required</code> under a specific set of\r\nconditions. Or a page container should no longer be visible under another set of conditions.\r\n            \r\n### Page Operation Filter\r\n            \r\nThe filter object should be used when applying filters based on conditions. For example, the list of options in\r\na combobox should be limited based on a checkbox being checked. The filter object can be applied to lists as\r\nwell as <code>objectDataRequests</code>.\r\n            \r\n### Page Object Reference\r\n            \r\nThe page object reference is a general purpose object for referencing data and metadata on the page. It can be\r\nconfigured to reference data that is not formally stored into the flow state and also value elements that are.",
            "x-displayName": "Page Element"
        },
        {
            "name": "Draw Service Element",
            "x-displayName": "Service Element"
        },
        {
            "name": "Draw Tag Element",
            "description": "_The tag element object provides additional runtime data to your page element containers/components and\r\nnavigation elements/items._\r\n            \r\nThe purpose of the tag element is to add flexibility to your flow application user experience. The components,\r\ncontainers and navigation items in your flow can benefit from having access to the flow state to get more\r\ncontextual information. For example, if you have a numeric input field, it may be useful to know the possible\r\nrange or numeric values that can be provided by the end user - where that range depends on logic in the flow.\r\nThe components, containers and navigation items also supports <code>attributes</code> and these are often\r\nsufficient for many use-cases. As a result, only use the tag element if you need information that is very\r\nspecific to the flow state for particular running user(s).",
            "x-displayName": "Tag Element"
        },
        {
            "name": "Draw Type Element",
            "description": "_The type element object defines the structure of objects and lists in the flow._\r\n            \r\nThe purpose of the type element is to allow flow builders to determine the business objects that will be used\r\nin the flow. Often the type elements are provided when the flow builder installs a new service element, however,\r\nflow builders can define their own type elements as needed to support the objectives of the flow. The type\r\nelement also provides the bindings back to the service elements that can save, read or delete data of the same\r\nstructure. As a result, the type element maps from friendly business objects to underlying storage\r\nimplementations as provided by the service element. The base properties of the type element are outlined here.\r\n            \r\n### Bindings\r\n            \r\nA binding is used to map properties in the type to database fields in the service. The mapping does not need to\r\nbe directly to database tables in the service, however, the binding should provide unique identifier information\r\nnecessary for the service element to put the provided values back to the correct storage locations. The binding\r\nis typically pre-configured as part of the type installation process. However, it is possible for flow builders\r\nto define bindings manually.",
            "x-displayName": "Type Element"
        },
        {
            "name": "Draw Value Element",
            "description": "_The value element object stores data collected in the flow state._\r\n            \r\nThe purpose of the value element is to allow flow builders to determine how data collected from running user(s)\r\nor external services will be stored and used. The value element represents the memory for the flow application\r\nso data gathered can be later saved, updated, or viewed. The base properties of the value element are outlined\r\nhere.",
            "x-displayName": "Value Element"
        },
        {
            "name": "Environment Environment",
            "description": "A controller to be consumed by the tooling to access environments",
            "x-displayName": "Environment"
        },
        {
            "name": "Features Features",
            "description": "A controller to be consumed by the tooling to access developer/pm/po\r\ndriven feature flags.",
            "x-displayName": "Features"
        },
        {
            "name": "Notifications Notifications",
            "description": "The notifications API allows you to view any notifications sent to your or inside your tenant.",
            "x-displayName": "Notifications"
        },
        {
            "name": "Package Package",
            "description": "The packaging API allows you to move a Flow from one tenant to another. This can be handy for a few example reasons:\r\n<ul><li>You have Sub-Tenants that you use for testing or team based development of Flows. You then have a master tenant for all “production” Flows.</li><li>You have a library of useful Flows that you want to distribute as templates.</li><li>You want to create a “store” of Flows that can be used by your customers to help them leverage and adapt your existing intellectual property.</li></ul>\r\nA few things to consider with packaging:\r\n<ol><li>The source Tenant should be used for editing. If you make changes in the target Tenant and attempt to apply those back to the source, you can accidentially overwrite changes in the source, not applied in the target.</li><li>Packaging overwrites the existing Flow with the same Flow identifier. As a result, you can apply upgrades to a target Tenant.</li><li>If you plan to use a Service in multiple Tenants, make sure you create the Service in the source Tenant and distribute a Flow package for all target Tenants. If a Service is installed in each Target Tenant, it will be duplicated as we do not “merge” Services even if they point to the same Service end-point.</li><li>Do not refresh the Service in the Target Tenant if you are simply changing the endpoint URL. Packaging only pulls in the Types that are used by the Flow. If you refresh the whole Service in the Target Tenant, you can end up with duplicate Types.</li><li>When you export a Flow Package, you will receive a String that contains all the information needed to execute your Flow.</li><li>We do not automatically Package sub-Flows.</li><li>You can only export a package of the Flow if that Flow has a SnapShot (generated by either Running or Publishing the Flow).</li></ol>\r\nThe package file should never be altered. Please refer to the SnapShot APIs if you need to get information about your Flows.",
            "x-displayName": "Package"
        },
        {
            "name": "Play Play",
            "x-displayName": "Play"
        },
        {
            "name": "Release Release",
            "description": "A controller to be consumed by the tooling to access releases",
            "x-displayName": "Release"
        },
        {
            "name": "Run Data",
            "x-displayName": "Data"
        },
        {
            "name": "Run Files",
            "x-displayName": "Files"
        },
        {
            "name": "Run Flow",
            "x-displayName": "Flow"
        },
        {
            "name": "Run Log",
            "x-displayName": "Log"
        },
        {
            "name": "Run Run",
            "x-displayName": "Run"
        },
        {
            "name": "Service Invoker",
            "x-displayName": "Invoker"
        },
        {
            "name": "Translate Cultures",
            "description": "_The content value culture object represents a language or brand supported by the tenant._\r\n            \r\nContent value cultures are used to specify the language/brand options that are available for the tenant. By\r\ndefault all tenants have a content value culture for USA (English). However, for multi-national/language\r\nuse-cases, others can be specified. They follow the ISO conventions for language. However, the platform also\r\nsupports a fourth variation on the standard ISO properties; this is <code>brand</code>. As a result, content\r\nvalue culture objects can also be used to specify white-labelling or single language variations on flow content.",
            "x-displayName": "Cultures"
        },
        {
            "name": "Translate Flow",
            "description": "_The flow translation object provides all of the content elements and properties in a flow that can be\r\ntranslated._\r\n            \r\nThe flow translation object provides every element in the flow that is available for translation. It therefore\r\nprovides all of the content in the flow, regardless of whether or not the elements are shared (such as value and\r\npage elements) or specific to the flow (such as map or navigation elements). The flow translation object also\r\nincludes additional properties to help translators identify the purpose/location of the content being translated.",
            "x-displayName": "Flow"
        },
        {
            "name": "Translate Map Element",
            "description": "_The map element translation object provides all of the content properties in a map element that can be\r\ntranslated._\r\n            \r\nThe map element translation object also includes additional properties to help translators identity the\r\npurpose/location of the content being translated.",
            "x-displayName": "Map Element"
        },
        {
            "name": "Translate Navigation Element",
            "description": "This element allow you to have one or more translations for the element navigation. The navigation element\r\ntranslation will show the information in runtime depending on which culture is choose when the flow runs.",
            "x-displayName": "Navigation Element"
        },
        {
            "name": "Translate Page Element",
            "description": "_The page element translation object provides all of the content properties in a page element that can be\r\ntranslated._\r\n            \r\nThe page element translation object also includes additional properties to help translators identify the\r\npurpose/location of the content being translated.",
            "x-displayName": "Page Element"
        },
        {
            "name": "Translate Type Element",
            "description": "_The type element translation object provides all of the content properties in a type element that can be\r\ntranslated._\r\n            \r\nThe type element translation object also includes additional properties to help translators identify the\r\npurpose/location of the content being translated.",
            "x-displayName": "Type Element"
        },
        {
            "name": "Translate Value Element",
            "description": "_The value element translation object provides all of the content properties in a value element that can be\r\ntranslated._\r\n            \r\nThe value element translation object also includes additional properties to help translators identify the\r\npurpose/location of the content being translated.",
            "x-displayName": "Value Element"
        }
    ],
    "x-tagGroups": [
        {
            "name": "Admin",
            "tags": [
                "Admin Provisioning",
                "Admin Runtimes",
                "Admin States",
                "Admin Tenants and Subtenants",
                "Admin Users"
            ]
        },
        {
            "name": "Audit",
            "tags": [
                "Audit Audit"
            ]
        },
        {
            "name": "Dashboard",
            "tags": [
                "Dashboard Dashboard"
            ]
        },
        {
            "name": "Draw",
            "tags": [
                "Draw Assets",
                "Draw Authentication",
                "Draw Draw",
                "Draw Flow",
                "Draw Flow Graph",
                "Draw Flow Snapshot",
                "Draw Group Element",
                "Draw Identity Provider",
                "Draw Macro Element",
                "Draw Map Element",
                "Draw Navigation Element",
                "Draw Page Element",
                "Draw Service Element",
                "Draw Tag Element",
                "Draw Type Element",
                "Draw Value Element"
            ]
        },
        {
            "name": "Environment",
            "tags": [
                "Environment Environment"
            ]
        },
        {
            "name": "Features",
            "tags": [
                "Features Features"
            ]
        },
        {
            "name": "Notifications",
            "tags": [
                "Notifications Notifications"
            ]
        },
        {
            "name": "Package",
            "tags": [
                "Package Package"
            ]
        },
        {
            "name": "Play",
            "tags": [
                "Play Play"
            ]
        },
        {
            "name": "Release",
            "tags": [
                "Release Release"
            ]
        },
        {
            "name": "Run",
            "tags": [
                "Run Data",
                "Run Files",
                "Run Flow",
                "Run Log",
                "Run Run"
            ]
        },
        {
            "name": "Service",
            "tags": [
                "Service Invoker"
            ]
        },
        {
            "name": "Translate",
            "tags": [
                "Translate Cultures",
                "Translate Flow",
                "Translate Map Element",
                "Translate Navigation Element",
                "Translate Page Element",
                "Translate Type Element",
                "Translate Value Element"
            ]
        }
    ]
}